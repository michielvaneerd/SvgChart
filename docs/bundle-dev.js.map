{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/colors.ts", "../src/charts/controller.ts", "../src/config.ts", "../src/axis.ts", "../src/charts/bar_and_line_utils.ts", "../src/charts/line_chart_controller.ts", "../src/types.ts", "../src/charts/bar_chart_controller.ts", "../src/charts/bar_and_line_chart_controller.ts", "../src/charts/donut_or_pie_utils.ts", "../src/charts/donut_chart_controller.ts", "../src/charts/pie_chart_controller.ts", "../src/svg.ts", "app_svg.js"],
  "sourcesContent": ["import { ChartPoint } from \"./types\";\n\n/**\n * Callback function that is called by the {@link directionForEach} function.\n */\ntype DirectionForEachCallback = (item: any, index: number, items: Array<any>) => void;\n\n/**\n * SVG namespace.\n */\nconst ns = 'http://www.w3.org/2000/svg';\n\n/**\n * Regex we use to convert from dash to camelcase.\n */\nconst attributesCamelCaseToDashRegex = /[A-Z]/g;\n\n/**\n * String we use to prefix all class names and ID names.\n */\nconst classNamePrefix = 'svg-chart-';\n\n/**\n * Creates a new HTML element.\n * \n * @param name Tag name for new HTML element.\n * @param attributes - Key value pair of attributes to set.\n * @param child - Child node to add to new HTML element.\n * @returns The new HTML element.\n */\nfunction el(name: string, attributes: object = {}, child: Node = null): SVGElement {\n    var el = document.createElementNS(ns, name);\n    Object.keys(attributes).forEach((key) => {\n        if (attributes[key] === null) {\n            return;\n        }\n        switch (key) {\n            case 'className':\n                if (attributes[key]) {\n                    el.classList.add(...attributes[key].trim().split(' '));\n                }\n                break;\n            default:\n                //el.setAttribute(key.replaceAll(attributesCamelCaseToDashRegex, \"-$&\").toLowerCase(), attributes[key]);\n                el.setAttribute(key.replace(attributesCamelCaseToDashRegex, \"-$&\").toLowerCase(), attributes[key]);\n                break;\n        }\n    });\n    if (child) {\n        el.appendChild(child);\n    }\n    return el;\n}\n\n/**\n * Searches up from currentElement until an element is found with the parentName. \n * \n * @param currentElement - HTML element to search up from.\n * @param parentName - Tag name of element to search for.\n * @returns Found HTML element or null.\n */\nfunction parent(currentElement: SVGElement, parentName: string): SVGElement | null {\n    var el = currentElement;\n    while (el && el.nodeName.toLowerCase() !== parentName.toLowerCase()) {\n        el = el.parentNode as SVGElement;\n    }\n    return el;\n}\n\n/**\n * Returns the className with prefix.\n * \n * @param className - Class name to prefix.\n * @returns Classname with prefix.\n */\nfunction prefixed(className: string): string {\n    return classNamePrefix + className;\n}\n\n/**\n * Loop through items in normal (isRTL = true) or reversed (isRTL = false) order and call the callback for each item.\n * \n * @param instance - Instance of object that will be this in the callback.\n * @param items - Array of items to loop through.\n * @param isRTL - Whether it is left-to-right or right-to-left.\n * @param callback - Callback function that is called for each array item.\n */\nfunction directionForEach(instance: object, items: Array<any>, isRTL: boolean, callback: DirectionForEachCallback) {\n    if (isRTL) {\n        const length = items.length;\n        for (let i = 0; i < length; i++) {\n            callback.call(instance, items[i], i, items);\n        }\n    } else {\n        const maxIndex = items.length - 1;\n        for (let i = maxIndex; i >= 0; i--) {\n            callback.call(instance, items[i], maxIndex - i, items);\n        }\n    }\n}\n\n/**\n * Convert polar to cartesian point.\n * \n * @param centerX - Center x.\n * @param centerY - Center y.\n * @param radius - Radius of arc.\n * @param angleInDegrees - Angle in degrees.\n * @returns ChartPoint.\n */\nfunction polarToCartesian(centerX: number, centerY: number, radius: number, angleInDegrees: number): ChartPoint {\n    var angleInRadians = (angleInDegrees - 90) * Math.PI / 180;\n    return {\n        x: centerX + (radius * Math.cos(angleInRadians)),\n        y: centerY + (radius * Math.sin(angleInRadians))\n    };\n}\n\nexport { el, parent, prefixed, directionForEach, polarToCartesian, DirectionForEachCallback };", "/**\n * Some color palettes.\n */\nexport const colors = {\n    dutchFieldColorPalette: [\"#e60049\", \"#0bb4ff\", \"#50e991\", \"#e6d800\", \"#9b19f5\", \"#ffa300\", \"#dc0ab4\", \"#b3d4ff\", \"#00bfa0\"],\n    retroMetroColorPalette: [\"#ea5545\", \"#f46a9b\", \"#ef9b20\", \"#edbf33\", \"#ede15b\", \"#bdcf32\", \"#87bc45\", \"#27aeef\", \"#b33dc6\"],\n    riverNightsColorPalette: [\"#b30000\", \"#7c1158\", \"#4421af\", \"#1a53ff\", \"#0d88e6\", \"#00b7c7\", \"#5ad45a\", \"#8be04e\", \"#ebdc78\"],\n    springPastelsColorPalette: [\"#fd7f6f\", \"#7eb0d5\", \"#b2e061\", \"#bd7ebe\", \"#ffb55a\", \"#ffee65\", \"#beb9db\", \"#fdcce5\", \"#8bd3c7\"]\n};", "import { SvgChartConfig } from \"../config\";\nimport { ChartConfigSerie } from \"../types\";\nimport { SvgChart } from \"../svg\";\nimport { el, prefixed } from \"../utils\";\n\n/**\n * Abstract Controller class. Reponsible for drawing charts for specific chart types.\n */\nclass Controller {\n\n    svgChart: SvgChart;\n    config: SvgChartConfig;\n\n    static requiredConfigWithValue = {};\n\n    /**\n     * Create new Controller class.\n     * \n     * @param svgChart - SvgChart instance.\n     */\n    constructor(svgChart: SvgChart) {\n        if (new.target === Controller) {\n            throw new Error('Controller class cannot be directly instanstiated.');\n        }\n        this.svgChart = svgChart;\n        this.config = this.svgChart.config;\n    }\n\n    /**\n     * Draws chart.\n     * \n     * @param currentSerieGroupElement - Group element where the chart can be appended to.\n     */\n    onDraw(currentSerieGroupElement: SVGElement) {\n        this.onDrawStart(currentSerieGroupElement);\n        this.config.series.forEach((serie, serieIndex) => {\n            const serieGroup = el('g', {\n                dataSerie: serie.id,\n                className: this.svgChart.unselectedSeries[serie.id] ? prefixed('unselected') : ''\n            });\n            this.onDrawSerie(serie, serieIndex, serieGroup);\n            currentSerieGroupElement.appendChild(serieGroup);\n        });\n        this.onDrawEnd(currentSerieGroupElement);\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * \n     * @param currentSerieGroupElement - DOM group element.\n     */\n    onDrawStart(currentSerieGroupElement: SVGElement) {\n\n    }\n\n    /**\n     * Do things at the end of the draw for this chart.\n     * \n     * @param currentSerieGroupElement - DOM group element.\n     */\n    onDrawEnd(currentSerieGroupElement: SVGElement) {\n\n    }\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup.\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @param serieGroup - DOM group element for this serie.\n     */\n    onDrawSerie(serie: ChartConfigSerie, serieIndex: number, serieGroup: SVGElement) { }\n\n    /**\n     * Execute config things before global config things are done.\n     */\n    onConfigBefore() { }\n\n    /**\n     * Execute config things after global config things are done.\n     */\n    onConfigAfter() { }\n\n    /**\n     * Execute serie config things before global config serie things are done.\n     * \n     * @param serie - Serie object\n     */\n    onConfigSerieBefore(serie: ChartConfigSerie) { }\n\n    /**\n     * Execute config things after global config things are done.\n     * \n     * @param serie - Serie object\n     */\n    onConfigSerieAfter(serie: ChartConfigSerie) { }\n\n}\n\nexport { Controller };", "import { ChartConfigSerie, ChartType } from \"./types\";\n\n/**\n * SvgChart config class.\n */\nclass SvgChartConfig {\n\n    static getDirection(config: SvgChartConfig) {\n        return config.ltr ? 'ltr' : 'rtl';\n    }\n\n    /**\n     * Whether language direction is ltr.\n     */\n    ltr: boolean = true;\n\n    /**\n     * @prop {Array<ChartConfigSerie>} series - Series array.\n     */\n    series: Array<ChartConfigSerie> = null;\n\n    /**\n     * @prop {String} title - Title of chart.\n     */\n    title: string = null;\n\n    /**\n     * Chart type.\n     */\n    chartType: ChartType = null;\n\n    /**\n     * @prop {Function} onXAxisLabelGroupSelect - Callback when x axis label is selected. Parameters are SvgChart and x axis column index.\n     */\n    onXAxisLabelGroupSelect: Function = null;\n\n    /**\n     * @prop {Object} padding - Padding object.\n     * @example {start: 40, end: 20, top: 100, bottom: 40}\n     */\n    padding = {\n        start: 40,\n        end: 20,\n        top: 100,\n        bottom: 40,\n        /**\n         * Left will be set by code, depends on direction.\n         */\n        left: 40,\n        /**\n         * Right will be set by code, depends on direction.\n         */\n        right: 20\n    };\n\n    /**\n     * @prop {number} paddingDefault - Default padding for space between elements.\n     * @default 20\n     */\n    paddingDefault: number = 20;\n\n    /**\n     * @prop {number} legendWidth - Width of legend squares or circles.\n     * @default 10\n     */\n    legendWidth: number = 10;\n\n    /**\n     * @prop {boolean} focusedValueShow - Whether the value box should be displayed when an element has focus.\n     * @default true\n     */\n    focusedValueShow: boolean = true;\n\n    /**\n     * @prop {string} focusedValueFill - Fill color of focused value box.\n     * @default black\n     */\n    focusedValueFill: string = 'black';\n\n    /**\n     * @prop {string} focusedValueColor - Font color of focused value box.\n     * @default white\n     */\n    focusedValueColor: string = 'white';\n\n    /**\n     * @prop {number} focusedValuePadding - Padding of focused value box.\n     * @default 6\n     */\n    focusedValuePadding: number = 6;\n\n    /**\n     * @prop {Function} drawOnConfig - Draw function to execute in the config phase. It receives a SvgChart and HTMLElement parameter.\n     * @example function(svgChart, groupNode) {\n     *     groupNode.appendChild(svgChart.el('rect', {\n     *         x: 10,\n     *         y: 10\n     *     }));\n     * }\n     */\n    drawOnConfig: Function = null;\n\n    /**\n     * @prop {Function} drawOnData - Draw function to execute in the chart phase. It receives a SvgChart and HTMLElement parameter.\n     * @example function(svgChart, groupNode) {\n     *     groupNode.appendChild(svgChart.el('rect', {\n     *         x: 10,\n     *         y: 10\n     *     }));\n     * }\n     */\n    drawOnData: Function = null;\n\n    /**\n     * @prop {boolean} transition - Whether the chart elements should be faded in or nor.\n     * @default true\n     */\n    transition: boolean = true;\n\n    /**\n     * @prop {string} backgroundColor - Background color of the SVG element.\n     * @default white\n     */\n    backgroundColor: string = 'white';\n\n    /**\n     * @prop {string} fontFamily - Font fanily for all text elements.\n     * @default sans-serif\n     */\n    fontFamily: string = 'sans-serif';\n\n    /**\n     * @prop {string|number} titleFontSize - Fontsize for the title.\n     * @default normal\n     * \n     */\n    titleFontSize: string|number = 'normal';\n\n    /**\n     * @prop {string} titleColor - Font color of title.\n     * @default black\n     */\n    titleColor: string = 'black';\n\n    /**\n     * @prop {string} titleHorizontalPosition - Horizontal position of title. Can be one of: center, start, end.\n     * @default center\n     */\n    titleHorizontalPosition: string = 'center'; // center (default); start; end\n\n    /**\n     * @prop {string} titleVerticalPosition - Vertical position of title. Can be one of: top, bottom, center.\n     * @default top\n     */\n    titleVerticalPosition: string = 'top'; // top (default); bottom; center\n\n    /**\n     * @prop {number} maxValue - Maximum value. Required for charts with Y-axes.\n     */\n    maxValue: number = null;\n\n    /**\n     * @prop {number} minValue - Minumum value of Y axis. Required for charts with Y-axes.\n     */\n    minValue: number = null;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // X Axis\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Font size of axes titles.\n     */\n    axisTitleFontSize: string = 'smaller';\n\n    /**\n     * Font size of axes labels.\n     */\n    axisLabelFontSize: string = 'small';\n\n    // X axis\n    /**\n     * X axis title.\n     */\n    xAxisTitle: string = null;\n\n    /**\n     * If this is a number X, than the x axis title will be positioned X pixels from the bottom.\n     * If this is null, then the title will be positioned paddingDefault pixesl from the bottom.\n     */\n    xAxisTitleBottom: number = null;\n\n    /**\n     * Line width of the x axis grid.\n     */\n    xAxisGridLineWidth: number = 1;\n\n    /**\n     * Color of x axis grid lines.\n     */\n    xAxisGridLineColor: string = '#C0C0C0';\n\n    /**\n     * Stroke dash array value for the x axis grid lines.\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray}.\n     */\n    xAxisGridLineDashArray: string = '1 1';\n\n    /**\n     * Font color of xaxis labels.\n     */\n    xAxisLabelColor: string = '#A0A0A0';\n\n    /**\n     * @prop {string} xAxisTitleColor - Font color of x axis title.\n     * @default #A0A0A0\n     */\n    xAxisTitleColor: string = '#A0A0A0';\n\n    /**\n     * @prop {boolean} xAxisGrid - Whether the xaxis grid should be displayed.\n     * @default true\n     */\n    xAxisGrid: boolean = true;\n\n    /**\n     * @prop {number} xAxisGridPadding - Outside padding for x axis grid.\n     * @default 0\n     */\n    xAxisGridPadding: number = 0;\n\n    /**\n     * @prop {boolean} xAxisLabels - Whether x axis labels should be displayed.\n     * @default true\n     */\n    xAxisLabels: boolean = true;\n\n    /**\n     * @prop {boolean} xAxisGridColumns - Whether the x axis labels should be below (false)\n     * or between (true) the x axis grid lines. For bar charts this will always be set to true.\n     * @default false\n     */\n    xAxisGridColumns: boolean = false;\n\n    /**\n     * @prop {boolean} xAxisGridColumnsSelectable - Whether xAxisGridColumns should be selectable.\n     * If this is true, the x axis labels can be clicked and selected.\n     * @default false\n     */\n    xAxisGridColumnsSelectable: boolean = false;\n\n    /**\n     * @prop {number} xAxisGridSelectedColumnOpacity - Opacity value for the selected xAxisGridColumn.\n     * @default 0.2\n     */\n    xAxisGridSelectedColumnOpacity: number = 0.2;\n\n    /**\n     * @prop {string} xAxisGridColumnsSelectableColor - Background color for a selected xAxisGridColumn.\n     * @default black\n     */\n    xAxisGridColumnsSelectableColor: string = 'black';\n\n    /**\n     * The text anchor value for x axis labels.\n     * For example if you want vertical labels that should be aligned to the x axis, you can set this to 'start'.\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor}.\n     */\n    textAnchorXAxisLabels: string = 'middle';\n\n    /**\n     * Number of pixels that the x axsis labels will be positioned from the bottom x axis grid line.\n     */\n    xAxisLabelTop: number = 10;\n\n    /**\n     * Degrees for the x axis labels.\n     */\n    xAxisLabelRotation: number = 0;\n\n    /**\n     * Steps between x axis grid lines.\n     */\n    xAxisStep: number = 1;\n\n    /**\n     * Steps between x axis labels.\n     */\n    xAxisLabelStep: number = 1;\n\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Y Axis\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @prop {string} yAxisTitle - Y axis title.\n     */\n    yAxisTitle: string = null;\n\n    /**\n     *  Number of pixels the y axis labels should be positioned from the start. If this is null, this will be defaultPadding pixels.\n     */\n    yAxisTitleStart: number = null; // if this is <> null; then this will be the X start position of the Y axis title.\n\n    /**\n     * Line width of the y axis grid.\n     */\n    yAxisGridLineWidth: number = 1;\n\n    /**\n     * Color of y axis grid lines.\n     */\n    yAxisGridLineColor: string = '#C0C0C0';\n\n    /**\n     * Stroke dash array value for the y axis grid lines.\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray}.\n     */\n    yAxisGridLineDashArray: string = '1 1';\n\n    /**\n     * Font color of y axis labels.\n     */\n    yAxisLabelColor: string = '#A0A0A0';\n\n    /**\n     * Font color of y axis title.\n     */\n    yAxisTitleColor: string = '#A0A0A0';\n\n    /**\n     * Steps between y axis grid lines.\n     */\n    yAxisStep: number = 10; // how many steps between y axis grid lines\n\n    /**\n     * Steps between y axis labels.\n     */\n    yAxisLabelStep: number = 10; // how many steps between labels y axis\n\n\n    //yAxis = true;\n\n    /**\n     * Whether the y axis grid should be displayed.\n     */\n    yAxisGrid: boolean = true;\n\n    /**\n     * Whether y axis labels should be displayed.\n     */\n    yAxisLabels: boolean = true;\n\n    /**\n     * Outside padding for y axis grid.\n     */\n    yAxisGridPadding: number = 0;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Legend\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Font size for legend labels.\n     */\n    legendFontSize: string = 'smaller';\n\n    /**\n     * Font color of legend labels.\n     */\n    legendColor: string = 'black';\n\n    /**\n     * Whether legends should be squares (false) or circles (true)\n     */\n    legendCircle: boolean = false;\n\n    /**\n     * @prop {boolean} legend - Whether legends should be displayed.\n     */\n    legend: boolean = true;\n\n    /**\n     * Whether clicking on a legend hides and shows a the serie.\n     */\n    legendSelect: boolean = true;\n\n    /**\n     * Position of legend. Possible values: bottom, top, end.\n     */\n    legendPosition: string = 'top';\n\n    /**\n     * If not null, number of pixels the legend should be positioned from the bottom. Otherwise a default number of pixels will be used.\n     */\n    legendBottom: number = null;\n\n    /**\n     * @prop {number} legendTop - If not null, number of pixels the legend should be positioned from the top. Otherwise a default number of pixels will be used.\n     */\n    legendTop: number = null;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Line charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    /**\n     * Width of line for line charts.\n     */\n    lineWidth: number = 2;\n\n    /**\n     * Radius of line points for line charts.\n     */\n    pointRadius: number = 2;\n\n    /**\n     * Whether null values should be connected or not.\n     */\n    connectNullValues: boolean = false;\n\n    /**\n     * Whether lines should be curved or not.\n     */\n    lineCurved: boolean = true;\n\n    /**\n     * @prop {boolean} lineChartFilled - Whether line charts should be filled or not.\n     * @default false\n     */\n    lineChartFilled: boolean = false;\n\n    /**\n     * @prop {boolean} points - Whether the lines should display points or not.\n     * @default true\n     */\n    points: boolean = true;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Bar charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    \n    /**\n     * @prop {number} barFillOpacity - Opacity of bars.\n     * @default 0.5\n     */\n    barFillOpacity: number = 0.5;\n\n    /**\n     * @prop {number} barSpacing - Spacing in pixels between bars.\n     * @default 4\n     */\n    barSpacing: number = 4;\n\n    /**\n     * @prop {number} barStrokeWidth - Width of bar border.\n     * @default 1\n     */\n    barStrokeWidth: number = 1;\n\n    /**\n     * @prop {boolean} barStacked - Whether bars should be stacked.\n     * @default false\n     */\n    barStacked: boolean = false;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Pie and donut charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @prop {number} pieFillOpacity - Opacity of pie and donut charts.\n     * @default 0.6\n     */\n    pieFillOpacity: number = 0.6;\n\n    /**\n     * @prop {number} donutWidth - With of donuts. Of not given a default value is used.\n     */\n    donutWidth: number = null;\n\n    /**\n     * @prop {string} pieStroke - Stroke color for pie charts.\n     * @default white\n     */\n    pieStroke: string = 'white';\n\n    /**\n     * @prop {number} pieStrokeWidth - Width of stroke for pie charts. If this is 0, no stroke is painted.\n     * @default 2\n     */\n    pieStrokeWidth: number = 2;\n\n    /**\n     * @prop {string} donutStroke - Stroke color for donut charts.\n     * @default white\n     */\n    donutStroke: string = 'white';\n\n    /**\n     * @prop {number} donutStrokeWidth - Width of stroke for donut charts. If this is 0, no stroke is painted.\n     * @default 2\n     */\n    donutStrokeWidth: number = 2;\n};\n\nexport { SvgChartConfig };", "import { SvgChartConfig } from \"./config\";\nimport { SvgChart } from \"./svg\";\nimport { ScopedEventCallback } from \"./types\";\nimport { el, prefixed, directionForEach } from \"./utils\";\n\nclass AxisController {\n\n    #onXAxisLabelGroupClickScoped: ScopedEventCallback;\n    #onXAxisLabelGroupKeypressScoped: ScopedEventCallback;\n\n    svgChart: SvgChart;\n    config: SvgChartConfig;\n\n    /**\n     * @param svgChart SvgChart instance.\n     */\n    constructor(svgChart: SvgChart) {\n        this.svgChart = svgChart;\n        this.config = svgChart.config;\n    }\n\n    /**\n     * Add Y axis grid lines and labels.\n     */\n    addYAxisGridAndLabels() {\n        var gYAxis = el('g', {\n            className: prefixed('y-axis-group')\n        });\n        const absMinValue = Math.abs(this.config.minValue);\n        var currentYAxisValue = this.config.minValue;\n        var currentYAxisLabelValue = this.config.minValue;\n        while (currentYAxisValue <= this.config.maxValue || currentYAxisLabelValue <= this.config.maxValue) {\n            if (this.config.yAxisGrid && currentYAxisValue <= this.config.maxValue) {\n                let y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - ((currentYAxisValue + absMinValue) * this.svgChart.lineAndBarValueHeight);\n                gYAxis.appendChild(el('line', {\n                    x1: this.config.padding.left,\n                    y1: y,\n                    x2: this.config.padding.left + this.svgChart.chartWidth + (this.config.xAxisGridPadding * 2),\n                    y2: y,\n                    className: prefixed('y-axis-grid-line'),\n                    stroke: this.config.yAxisGridLineColor || '',\n                    strokeWidth: this.config.yAxisGridLineWidth || '',\n                    strokeDasharray: this.config.yAxisGridLineDashArray || '',\n                }));\n            }\n            currentYAxisValue += this.config.yAxisStep;\n            if (this.config.yAxisLabels && currentYAxisLabelValue <= this.config.maxValue) {\n                let y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - ((currentYAxisLabelValue + absMinValue) * this.svgChart.lineAndBarValueHeight);\n                gYAxis.appendChild(el('text', {\n                    direction: SvgChartConfig.getDirection(this.config),\n                    x: this.config.ltr ? (this.config.padding.left - 10) : (this.config.padding.left + this.svgChart.chartWidth + 10),\n                    y: y,\n                    textAnchor: 'end',\n                    dominantBaseline: 'middle',\n                    fontFamily: this.config.fontFamily || '',\n                    fontSize: this.config.axisLabelFontSize || '',\n                    className: prefixed('y-axis-label'),\n                    fill: this.config.yAxisLabelColor || ''\n                }, document.createTextNode(currentYAxisLabelValue.toString())));\n            }\n            currentYAxisLabelValue += this.config.yAxisLabelStep;\n        }\n        this.svgChart.svg.appendChild(gYAxis);\n    }\n\n    /**\n     * Add X axis grid lines and labels.\n     * \n     * @param columnWidth - Width of each column.\n     */\n    addXAxisGridAndLabels(columnWidth: number) {\n        // Draw xAxis lines\n        var currentXAxisGroupElement = el('g');\n\n        var currentXAxisLabelsGroupElement = el('g', {\n            className: prefixed('x-axis-label-group-current')\n        });\n\n        var currentXAxisGridColumnsSelectableGroupElement = (this.config.xAxisGridColumnsSelectable) ? el('g') : null;\n        directionForEach(this, this.svgChart.data.xAxis.columns, this.config.ltr, (colValue: number, colIndex: number) => {\n            if (this.config.xAxisGrid) {\n                const x = this.config.padding.left + this.config.xAxisGridPadding + (colIndex * columnWidth);\n                if (colIndex === 0 || ((colIndex + 0) % this.config.xAxisStep === 0)) {\n                    this.#addXAxisLine(currentXAxisGroupElement, x);\n                }\n                if (this.config.xAxisGridColumnsSelectable) {\n                    currentXAxisGridColumnsSelectableGroupElement.appendChild(el('rect', {\n                        x: x,\n                        y: this.config.padding.top + this.config.yAxisGridPadding,\n                        width: columnWidth,\n                        height: this.svgChart.chartHeight,\n                        className: prefixed('x-axis-grid-column-selectable'),\n                        fillOpacity: 0,\n                        fill: this.config.xAxisGridColumnsSelectableColor\n                    }));\n                }\n            }\n            if (this.config.xAxisLabels && ((colIndex + 0) % this.config.xAxisLabelStep === 0)) {\n                var xlg = el('g', {\n                    transform: `translate(${this.config.padding.left + this.config.xAxisGridPadding + (colIndex * columnWidth) + (this.config.xAxisGridColumns ? (columnWidth / 2) : 0)} ${this.svgChart.chartHeight + this.config.padding.top + (this.config.yAxisGridPadding * 2) + this.config.xAxisLabelTop})`\n                });\n                xlg.appendChild(el('text', {\n                    direction: SvgChartConfig.getDirection(this.config),\n                    textAnchor: this.config.textAnchorXAxisLabels || 'middle',\n                    dominantBaseline: 'hanging',\n                    fontFamily: this.config.fontFamily || '',\n                    fontSize: this.config.axisLabelFontSize || '',\n                    fontWeight: 'normal',\n                    fill: this.config.xAxisLabelColor || '',\n                    tabindex: this.config.xAxisGridColumnsSelectable ? 0 : null,\n                    className: prefixed('x-axis-label') + ' ' + (this.config.xAxisGridColumnsSelectable ? prefixed('x-axis-grid-column-selectable-label') : ''),\n                    transform: `rotate(${this.config.xAxisLabelRotation})`\n                }, document.createTextNode(colValue.toString())));\n                currentXAxisLabelsGroupElement.appendChild(xlg);\n            }\n        });\n        if (this.config.xAxisGrid && this.config.xAxisGridColumns) {\n            this.#addXAxisLine(currentXAxisGroupElement, this.config.padding.left + this.config.xAxisGridPadding + (this.svgChart.data.xAxis.columns.length * columnWidth));\n        }\n        this.svgChart.xAxisGroupElement.appendChild(currentXAxisGroupElement);\n        this.config.xAxisGridColumnsSelectable && this.svgChart.xAxisGridColumnsSelectableGroupElement.appendChild(currentXAxisGridColumnsSelectableGroupElement);\n        this.svgChart.xAxisLabelsGroupElement.appendChild(currentXAxisLabelsGroupElement);\n    }\n\n    /**\n     * Draws an X axis line.\n     * \n     * @param parent - Parent element where to attach the line to.\n     * @param x X position.\n     */\n    #addXAxisLine(parent: SVGElement, x: number) {\n        parent.appendChild(el('line', {\n            x1: x,\n            y1: this.config.padding.top,\n            x2: x,\n            y2: this.svgChart.chartHeight + this.config.padding.top + (this.config.yAxisGridPadding * 2),\n            className: prefixed('x-axis-grid-line'),\n            stroke: this.config.xAxisGridLineColor || '',\n            strokeWidth: this.config.xAxisGridLineWidth || '',\n            strokeDasharray: this.config.xAxisGridLineDashArray || '',\n        }));\n    }\n\n    /**\n     * Draws the X axis title.\n     */\n    addXAxisTitle() {\n        var x = this.config.ltr ? (this.svgChart.width - this.config.padding.right - this.config.xAxisGridPadding) : (this.config.padding.left);\n        this.svgChart.svg.appendChild(el('text', {\n            direction: SvgChartConfig.getDirection(this.config),\n            x: x,\n            y: this.svgChart.height - (this.config.xAxisTitleBottom !== null ? this.config.xAxisTitleBottom : this.config.paddingDefault),\n            textAnchor: 'end',\n            dominantBaseline: 'auto',\n            fontFamily: this.config.fontFamily || '',\n            fontSize: this.config.axisTitleFontSize || '',\n            fill: this.config.xAxisTitleColor || '',\n            className: prefixed('text-x-axis-title')\n        }, document.createTextNode(this.config.xAxisTitle)));\n    }\n\n    /**\n     * Draws the Y axis title.\n     */\n    addYAxisTitle() {\n        var yAxisTitleG = el('g');\n        var x = 0;\n        if (this.config.ltr) {\n            x = this.config.yAxisTitleStart ? this.config.yAxisTitleStart : this.config.paddingDefault;\n        } else {\n            x = this.config.yAxisTitleStart ? (this.svgChart.width - this.config.yAxisTitleStart) : (this.svgChart.width - this.config.paddingDefault);\n        }\n        yAxisTitleG.setAttribute('transform', 'translate(' + x + ', ' + (this.config.padding.top + this.config.yAxisGridPadding) + ')');\n        var yAxisTitleEl = el('text', {\n            direction: SvgChartConfig.getDirection(this.config),\n            textAnchor: 'end',\n            dominantBaseline: 'hanging',\n            fontFamily: this.config.fontFamily || '',\n            fontSize: this.config.axisTitleFontSize || '',\n            fill: this.config.yAxisTitleColor || '',\n            className: prefixed('text-y-axis-title')\n        }, document.createTextNode(this.config.yAxisTitle));\n        yAxisTitleEl.setAttribute('transform', this.config.ltr ? 'rotate(-90)' : 'rotate(90)');\n        yAxisTitleG.appendChild(yAxisTitleEl);\n        this.svgChart.svg.appendChild(yAxisTitleG);\n    }\n\n    /**\n     * Adds group for x axis labels.\n     */\n    addXAxisLabelsGroup() {\n        this.svgChart.xAxisLabelsGroupElement = el('g', {\n            className: prefixed('x-axis-label-group')\n        });\n        if (this.config.xAxisGridColumnsSelectable) {\n            if (!this.#onXAxisLabelGroupClickScoped) {\n                this.#onXAxisLabelGroupClickScoped = this.#onXAxisLabelGroupClick.bind(this);\n                this.#onXAxisLabelGroupKeypressScoped = this.#onXAxisLabelGroupKeypress.bind(this);\n            }\n            this.svgChart.addEventListener(this.svgChart.xAxisLabelsGroupElement, 'click', this.#onXAxisLabelGroupClickScoped, false);\n            this.svgChart.addEventListener(this.svgChart.xAxisLabelsGroupElement, 'keydown', this.#onXAxisLabelGroupKeypressScoped, false);\n            // Group element that wraps the rects that indicates a selected column for line and bar charts.\n            this.svgChart.xAxisGridColumnsSelectableGroupElement = this.svgChart.svg.appendChild(el('g', {\n                className: prefixed('x-axis-columns-selectable-group')\n            }));\n        }\n        this.svgChart.svg.appendChild(this.svgChart.xAxisLabelsGroupElement);\n    }\n\n    /**\n     * When a label on the x axis receives a click when focussed.\n     * \n     * @param e Event object.\n     */\n    #onXAxisLabelGroupClick(e: Event) {\n        this.#onXAxisLabelGroupSelect(e.target as SVGElement);\n    }\n\n    /**\n     * Display the selected column indicator and fires the onXAxisLabelGroupSelect callback (if defined).\n     * \n     * @param label - Node (x axis label) that is selected.\n     */\n    #onXAxisLabelGroupSelect(label: SVGElement) {\n        var textNodes = this.svgChart.xAxisLabelsGroupElement.querySelectorAll('text.' + prefixed('x-axis-grid-column-selectable-label'));\n        var rects = this.svgChart.xAxisGridColumnsSelectableGroupElement.querySelectorAll('rect.' + prefixed('x-axis-grid-column-selectable'));\n        for (var i = 0; i < textNodes.length; i++) {\n            if (textNodes[i] === label) {\n                this.svgChart.lineAndBarSelectedColumnIndex = i;\n                textNodes[i].classList.add(prefixed('selected'));\n                textNodes[i].setAttribute('font-weight', 'bold');\n                rects[i].classList.add(prefixed('selected'));\n                rects[i].setAttribute('fill-opacity', this.svgChart.config.xAxisGridSelectedColumnOpacity.toString());\n                if (this.config.onXAxisLabelGroupSelect) {\n                    this.config.onXAxisLabelGroupSelect(this.svgChart, this.svgChart.lineAndBarSelectedColumnIndex);\n                }\n            } else {\n                textNodes[i].classList.remove(prefixed('selected'));\n                rects[i].classList.remove(prefixed('selected'));\n                rects[i].setAttribute('fill-opacity', '0');\n                textNodes[i].setAttribute('font-weight', 'normal');\n            }\n        }\n    }\n\n    /**\n     * When a X axis label receives a ENTER key event.\n     * \n     * @param e Keyboard event.\n     */\n    #onXAxisLabelGroupKeypress(e: KeyboardEvent) {\n        if (e.key === 'Enter') {\n            this.#onXAxisLabelGroupSelect(e.target as SVGElement);\n        }\n    }\n\n}\n\nexport { AxisController };", "import { AxisController } from \"../axis\";\nimport { SvgChart } from \"../svg\";\nimport { el, prefixed } from \"../utils\";\n\n/**\n     * Do things at the start of the draw for this chart.\n     * @param {SvgChart} svgChart SvgChart instance.\n     * @param {AxisController} axisController AxisController instance.\n     * @param {SVGElement} currentSerieGroupElement DOM group element.\n     */\nfunction onDrawStartBarAndLine(svgChart: SvgChart, axisController: AxisController, currentSerieGroupElement: SVGElement) {\n    if (svgChart.xAxisGroupElement.firstChild) {\n        svgChart.xAxisGroupElement.removeChild(svgChart.xAxisGroupElement.firstChild);\n    }\n\n    if (svgChart.config.xAxisGridColumnsSelectable) {\n        if (svgChart.xAxisGridColumnsSelectableGroupElement.firstChild) {\n            svgChart.xAxisGridColumnsSelectableGroupElement.firstChild.remove();\n        }\n    }\n\n    if (svgChart.xAxisLabelsGroupElement.firstChild) {\n        svgChart.xAxisLabelsGroupElement.removeChild(svgChart.xAxisLabelsGroupElement.firstChild);\n    }\n\n    // Note that for bar charts to display correctly, this.config.xAxisGridColumns MUST be true!\n    const columnWidth = svgChart.config.xAxisGridColumns\n        ? (svgChart.chartWidth / (svgChart.data.xAxis.columns.length))\n        : (svgChart.chartWidth / (svgChart.data.xAxis.columns.length - 1));\n    \n    svgChart.columnWidth = columnWidth;\n    \n    axisController.addXAxisGridAndLabels(columnWidth);\n}\n\n/**\n * Execute config things before global config things are done, like adding the axis lines and labels.\n * @param {SvgChart} svgChart SvgChart instance.\n * @param {AxisController} axisController AxisController instance.\n */\nfunction onConfigBeforeBarAndLine(svgChart: SvgChart, axisController: AxisController) {\n\n    svgChart.lineAndBarSelectedColumnIndex = null;\n    svgChart.lineAndBarValueHeight = svgChart.chartHeight / (Math.abs(svgChart.config.minValue) + svgChart.config.maxValue);\n    svgChart.barCountPerColumn = svgChart.config.barStacked ? 1 : 0;\n\n    if (svgChart.config.yAxisGrid) {\n        axisController.addYAxisGridAndLabels();\n    }\n\n    if (svgChart.config.xAxisTitle) {\n        axisController.addXAxisTitle();\n    }\n\n    if (svgChart.config.yAxisTitle) {\n        axisController.addYAxisTitle();\n    }\n\n    if (svgChart.config.xAxisLabels) {\n        axisController.addXAxisLabelsGroup();\n    }\n\n    svgChart.xAxisGroupElement = svgChart.svg.appendChild(el('g', {\n        className: prefixed('x-axis-group')\n    }));\n}\n\nexport { onDrawStartBarAndLine, onConfigBeforeBarAndLine };", "import { prefixed, directionForEach, el } from \"../utils\";\nimport { Controller } from \"./controller\";\nimport { SvgChart } from \"../svg\";\nimport { AxisController } from \"../axis\";\nimport { onConfigBeforeBarAndLine, onDrawStartBarAndLine } from \"./bar_and_line_utils\";\nimport { ChartConfigSerie, ChartPoint } from \"../types\";\n\n/**\n * Controller class for bar and line charts.\n */\nclass LineController extends Controller {\n\n    #axisController: AxisController;\n\n    /**\n     * @param svgChart - SvgChart instance.\n     */\n    constructor(svgChart: SvgChart) {\n        super(svgChart);\n        this.#axisController = new AxisController(svgChart);\n    }\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup. Overrides base class method.\n     * \n     * @override\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @param serieGroup - DOM group element for this serie.\n     */\n    onDrawSerie(serie: ChartConfigSerie, serieIndex: number, serieGroup: SVGElement) {\n        var nonNullPoints = [[]]; // Array of arrays, each array consists only of NON NULL points, used for smoot lines when not connecting NULL values and for filled lines charts when not connecting null points\n        var flatNonNullPoints = [];\n        const absMinValue = Math.abs(this.config.minValue);\n\n        directionForEach(this, this.svgChart.data.series[serie.id], this.config.ltr, (value: number, valueIndex: number, values: Array<number>) => {\n            var x = this.config.padding.left + this.config.xAxisGridPadding + (valueIndex * this.svgChart.columnWidth) + (this.config.xAxisGridColumns ? (this.svgChart.columnWidth / 2) : 0);\n            var y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - ((value + absMinValue) * this.svgChart.lineAndBarValueHeight);\n\n            if (value === null) {\n                if (nonNullPoints[nonNullPoints.length - 1].length > 0 && valueIndex + 1 < values.length) {\n                    nonNullPoints.push([]);\n                }\n            } else {\n                nonNullPoints[nonNullPoints.length - 1].push({ x: x, y: y, value: value });\n                flatNonNullPoints.push({ x: x, y: y, value: value });\n            }\n        });\n\n        var paths = [];\n\n        if (this.config.connectNullValues) {\n\n            // Loop through flatNonNullPoints\n\n            let path = this.config.lineCurved ? this.#getCurvedPathFromPoints(flatNonNullPoints) : this.#getStraightPathFromPoints(flatNonNullPoints);\n            if (path.length > 0) {\n                paths.push(path);\n            }\n\n        } else {\n\n            // Loop through nonNullPoints\n\n            nonNullPoints.forEach((currentNonNullPoints) => {\n                if (currentNonNullPoints.length > 0) {\n                    let path = this.config.lineCurved ? this.#getCurvedPathFromPoints(currentNonNullPoints) : this.#getStraightPathFromPoints(currentNonNullPoints);\n                    if (path.length > 0) {\n                        paths.push(path);\n                    }\n                }\n            });\n\n        }\n\n        paths.forEach((path) => {\n            serieGroup.appendChild(el('path', {\n                d: path.join(' '),\n                fill: this.config.lineChartFilled ? this.svgChart.getSerieFill(serie, serieIndex) : 'none',\n                fillOpacity: 0.4,\n                stroke: this.svgChart.getSerieStrokeColor(serie, serieIndex),\n                strokeWidth: this.config.lineWidth || '',\n                className: prefixed('line')\n            }));\n        });\n\n        if (this.config.points) {\n            flatNonNullPoints.forEach((point) => {\n                serieGroup.appendChild(el('circle', {\n                    cx: point.x,\n                    cy: point.y,\n                    r: this.config.pointRadius,\n                    zIndex: 1,\n                    fill: this.svgChart.getSeriePointColor(serie, serieIndex),\n                    stroke: this.svgChart.getSeriePointColor(serie, serieIndex),\n                    dataValue: point.value,\n                    className: prefixed('line-point'),\n                    tabindex: this.config.focusedValueShow ? 0 : null\n                }));\n            });\n        }\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * \n     * @override\n     * \n     * @param currentSerieGroupElement - DOM group element.\n     */\n    onDrawStart(currentSerieGroupElement: SVGElement) {\n        onDrawStartBarAndLine(this.svgChart, this.#axisController, currentSerieGroupElement);\n    }\n\n    /**\n     * Helper function to get a curved path from an array of points.\n     * \n     * @param points - Array of points.\n     * @returns Array of curved path coordinates.\n     */\n    #getCurvedPathFromPoints(points: Array<ChartPoint>): Array<any> {\n        let path = ['M ' + points[0].x + ' ' + points[0].y];\n        for (var i = 0; i < points.length - 1; i++) {\n            var x_mid = (points[i].x + points[i + 1].x) / 2;\n            var y_mid = (points[i].y + points[i + 1].y) / 2;\n            var cp_x1 = (x_mid + points[i].x) / 2;\n            var cp_x2 = (x_mid + points[i + 1].x) / 2;\n            path.push(`Q ${cp_x1} ${points[i].y}, ${x_mid} ${y_mid}`);\n            path.push(`Q ${cp_x2} ${points[i + 1].y} ${points[i + 1].x} ${points[i + 1].y}`);\n        }\n        this.#closePath(path, points);\n        return path;\n    }\n\n    /**\n     * Closes path for filled line charts.\n     * \n     * @param path - Array of path coordinates\n     * @param points - Array of points\n     */\n    #closePath(path: Array<any>, points: Array<ChartPoint>) {\n        if (this.config.lineChartFilled && points.length > 1) {\n            path.push(`L ${points[points.length - 1].x} ${this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight}`);\n            path.push(`L ${points[0].x} ${this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight}`);\n            path.push(`L ${points[0].x} ${points[0].y}`);\n            path.push('Z');\n        }\n\n\n    }\n\n    /**\n     * Helper function to get a straight path for line charts.\n     * \n     * @param points - Array of points.\n     * @returns Array of path coordinates.\n     */\n    #getStraightPathFromPoints(points: Array<ChartPoint>): Array<any> {\n        let path = [];\n        points.forEach((point, pointIndex) => {\n            if (pointIndex === 0) {\n                path.push(`M ${point.x} ${point.y}`);\n            } else {\n                path.push(`L ${point.x} ${point.y}`);\n            }\n        });\n        this.#closePath(path, points);\n        return path;\n    }\n\n    /**\n     * Execute config things before global config things are done.\n     * \n     * @override\n     */\n    onConfigBefore() {\n        super.onConfigBefore();\n        onConfigBeforeBarAndLine(this.svgChart, this.#axisController);\n    }\n\n}\n\nexport { LineController };\n\n\n\n\n\n\n", "/**\n * Function that are scoped to a specific `this` object and that is called when an event happens.\n */\ntype ScopedEventCallback = (e: Event) => void;\n\n/**\n * Serie object that is used in the config phase.\n */\ntype ChartConfigSerie = {\n    id: string;\n    title: string;\n    type?: ChartType;\n    fillGradient?: string;\n}\n\n/**\n * Possible type of charts.\n */\nenum ChartType {\n    Line,\n    Bar,\n    LineAndBar,\n    Pie,\n    Donut\n}\n\n/**\n * Data object with series data and columns.\n */\ninterface ChartData {\n    series: { string: number[] };\n    xAxis: { columns: string[] };\n};\n\n/**\n * Data point with x and y values.\n */\ninterface ChartPoint {\n    x: number;\n    y: number;\n}\n\n/**\n * Object with information about an event for a specific node.\n */\ninterface ChartEventInfo {\n    node: Node;\n    eventName: string;\n    callback: EventListenerOrEventListenerObject;\n    capture: boolean;\n}\n\n/**\n * Hash with string as key and boolean as value.\n */\ntype StringBooleanHash = {\n    [index: string]: boolean;\n}\n\nexport { ScopedEventCallback, ChartConfigSerie, ChartType, ChartData, ChartPoint, ChartEventInfo, StringBooleanHash };", "import { prefixed, directionForEach, el } from \"../utils\";\nimport { Controller } from \"./controller\";\nimport { SvgChart } from \"../svg\";\nimport { AxisController } from \"../axis\";\nimport { onDrawStartBarAndLine, onConfigBeforeBarAndLine } from \"./bar_and_line_utils\";\nimport { ChartConfigSerie, ChartType } from \"../types\";\n\n/**\n * Controller class for bar and line charts.\n */\nclass BarController extends Controller {\n\n    svgChart: SvgChart;\n    currentBarIndex: number;\n    stackedBarValues: object;\n    barWidth: number;\n\n    #axisController: AxisController;\n\n    /**\n     * @param svgChart - SvgChart instance.\n     */\n    constructor(svgChart: SvgChart) {\n        super(svgChart);\n        this.#axisController = new AxisController(svgChart);\n    }\n\n    /** @override */\n    static requiredConfigWithValue = {\n        xAxisGridColumns: true\n    };\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup.\n     * \n     * @override\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @param serieGroup - DOM group element for this serie.\n     */\n    onDrawSerie(serie: ChartConfigSerie, serieIndex: number, serieGroup: SVGElement) {\n        directionForEach(this, this.svgChart.data.series[serie.id], this.config.ltr, (value: number, valueIndex: number) => {\n\n            var x = null;\n            var y = null;\n            var height = null;\n            if (this.config.barStacked) {\n                if (!this.stackedBarValues[valueIndex]) {\n                    this.stackedBarValues[valueIndex] = this.config.minValue\n                };\n                x = this.config.padding.left + this.config.xAxisGridPadding + (valueIndex * this.svgChart.columnWidth) + this.config.barSpacing;\n                y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (value * this.svgChart.lineAndBarValueHeight) - (this.stackedBarValues[valueIndex] * this.svgChart.lineAndBarValueHeight);\n                height = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (value * this.svgChart.lineAndBarValueHeight);\n                this.stackedBarValues[valueIndex] = this.stackedBarValues[valueIndex] += value;\n            } else {\n                x = this.config.padding.left + this.config.xAxisGridPadding + (valueIndex * this.svgChart.columnWidth) + (this.barWidth * this.currentBarIndex) + (this.config.barSpacing * (this.currentBarIndex + 1));\n                if (isNaN(x)) {\n                    console.log(this.currentBarIndex);\n                }\n                height = y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (value * this.svgChart.lineAndBarValueHeight);\n            }\n\n            serieGroup.appendChild(el('rect', {\n                x: x,\n                y: y,\n                width: this.barWidth,\n                height: this.svgChart.chartHeight + this.config.padding.top + this.config.yAxisGridPadding - height,\n                fill: this.svgChart.getSerieFill(serie, serieIndex),\n                className: prefixed('bar'),\n                fillOpacity: this.config.barFillOpacity || '',\n                strokeWidth: this.config.barStrokeWidth || 0,\n                stroke: this.svgChart.getSerieStrokeColor(serie, serieIndex),\n                dataValue: value,\n                tabindex: this.config.focusedValueShow ? 0 : null\n            }));\n\n        });\n\n        this.currentBarIndex += 1;\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * \n     * @override\n     * \n     * @param currentSerieGroupElement - DOM group element.\n     */\n    onDrawStart(currentSerieGroupElement: SVGElement) {\n\n        onDrawStartBarAndLine(this.svgChart, this.#axisController, currentSerieGroupElement);\n        const barWidth = (this.svgChart.columnWidth - (this.config.barSpacing * (this.svgChart.barCountPerColumn + 1))) / (this.svgChart.barCountPerColumn || 1);\n\n        this.barWidth = barWidth;\n\n        this.currentBarIndex = 0;\n        this.stackedBarValues = {}; // value index => current value (steeds optellen)\n    }\n\n    /**\n     * Execute config things before global config things are done.\n     * \n     * @override\n     */\n    onConfigBefore() {\n        super.onConfigBefore();\n        onConfigBeforeBarAndLine(this.svgChart, this.#axisController);\n    }\n\n    /**\n     * Execute serie config things before global config serie things are done.\n     * \n     * @override\n     * \n     * @param serie - Serie object\n     */\n    onConfigSerieBefore(serie: ChartConfigSerie) {\n        super.onConfigSerieBefore(serie);\n        if (!this.config.barStacked && (serie.type === ChartType.Bar || this.config.chartType === ChartType.Bar)) {\n            this.svgChart.barCountPerColumn += 1;\n        }\n    }\n\n}\n\nexport { BarController };\n\n\n\n\n\n\n", "import { Controller } from \"./controller\";\nimport { LineController } from \"./line_chart_controller\";\nimport { BarController } from \"./bar_chart_controller\";\nimport { SvgChart } from \"../svg\";\nimport { ChartConfigSerie, ChartType } from \"../types\";\n\n/**\n * Controller class for bar and line charts.\n */\nclass BarAndLineController extends Controller {\n\n    #lineChartController: LineController;\n    #barChartController: BarController;\n\n    /**\n     * @param svgChart - SvgChart instance.\n     */\n    constructor(svgChart: SvgChart) {\n        super(svgChart);\n        this.#barChartController = new BarController(svgChart);\n        this.#lineChartController = new LineController(svgChart);\n    }\n\n    /** @override */\n    static requiredConfigWithValue = {\n        xAxisGridColumns: true\n    };\n\n    /** @override */\n    onDrawSerie(serie: ChartConfigSerie, serieIndex: number, serieGroup: SVGElement) {\n        const serieType = serie.type || (this.config.chartType === ChartType.LineAndBar ? ChartType.Line : this.config.chartType);\n        switch (serieType) {\n            case ChartType.Line:\n                this.#lineChartController.onDrawSerie(serie, serieIndex, serieGroup);\n                break;\n            case ChartType.Bar:\n                this.#barChartController.onDrawSerie(serie, serieIndex, serieGroup);\n                break;\n        }\n    }\n\n    /** @override */\n    onDrawStart(currentSerieGroupElement: SVGElement) {\n        this.#barChartController.onDrawStart(currentSerieGroupElement);\n    }\n\n    /** @override */\n    onConfigBefore() {\n        this.#barChartController.onConfigBefore();\n    }\n\n    /** @override */\n    onConfigSerieBefore(serie) {\n        this.#barChartController.onConfigSerieBefore(serie);\n    }\n\n}\n\nexport { BarAndLineController };\n\n\n\n\n\n\n", "import { el, prefixed } from \"../utils\";\nimport { SvgChart } from \"../svg\";\nimport { DonutController } from \"./donut_chart_controller\";\nimport { PieController } from \"./pie_chart_controller\";\nimport { ChartType } from \"../types\";\n\n/**\n * Function that is called from within the {@link drawPieOrDonut} function.\n */\ntype ArcCallback = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    startAngle: number,\n    endAngle: number\n) => Array<string | number>;\n\n/**\n * Shared functions that draws a pie or donut chart. Called from {@link DonutController} and {@link PieController}.\n * \n * @param svgChart - SvgChart instance.\n * @param currentSerieGroupElement - Group node.\n * @param describeArcCallback - Callback for gettting the path of the pie or donut.\n */\nfunction drawPieOrDonut(svgChart: SvgChart, currentSerieGroupElement: SVGElement, describeArcCallback: ArcCallback) {\n\n    var radius = svgChart.chartHeight / 2;\n    var centerX = svgChart.width / 2;\n    var centerY = svgChart.chartHeight / 2 + svgChart.config.padding.top;\n\n    var total = 0;\n    for (let key in svgChart.data.series) {\n        total += svgChart.data.series[key];\n    }\n\n    var totalToDegree = 360 / total;\n    var currentTotal = 0;\n\n    svgChart.config.series.forEach((serie, serieIndex) => {\n        var serieGroup = el('g', {\n            dataSerie: serie.id,\n            className: svgChart.unselectedSeries[serie.id] ? prefixed('unselected') : ''\n        });\n\n        const value = svgChart.data.series[serie.id];\n\n        var startAngle = currentTotal * totalToDegree;\n        currentTotal += value;\n        var endAngle = currentTotal * totalToDegree;\n        var path = describeArcCallback(centerX, centerY, radius, startAngle, endAngle);\n        serieGroup.appendChild(el('path', {\n            d: path.join(' '),\n            fill: svgChart.getSerieFill(serie, serieIndex),\n            fillOpacity: svgChart.config.pieFillOpacity || 1,\n            className: prefixed('pie-piece'),\n            tabindex: 0,\n            stroke: svgChart.config[ChartType[svgChart.config.chartType].toLowerCase() + 'Stroke'],\n            strokeWidth: svgChart.config[ChartType[svgChart.config.chartType].toLowerCase() + 'StrokeWidth'],\n            dataValue: value\n        }));\n\n        currentSerieGroupElement.appendChild(serieGroup);\n\n    });\n\n}\n\nexport { drawPieOrDonut, ArcCallback };", "import { polarToCartesian } from \"../utils\";\nimport { Controller } from \"./controller\";\nimport { drawPieOrDonut } from \"./donut_or_pie_utils\";\n\n/**\n * Class for displaying pie and donut charts.\n * @extends Controller\n */\nclass DonutController extends Controller {\n\n    /**\n     * Draw donut chart.\n     * \n     * @override\n     * \n     * @param currentSerieGroupElement - Current serie group element.\n     */\n    onDraw(currentSerieGroupElement: SVGElement) {\n        const donutWidth = this.config.donutWidth || this.svgChart.chartHeight / 4;\n        drawPieOrDonut(this.svgChart, currentSerieGroupElement, (centerX: number, centerY: number, radius: number, startAngle: number, endAngle: number) => {\n            return describeArcDonut(centerX, centerY, radius - donutWidth, donutWidth, startAngle, endAngle);\n        });\n    }\n\n}\n\n/**\n * Get path for donut.\n * \n * @param x - X point.\n * @param y - Y point.\n * @param radius - Radius of arc.\n * @param spread - Spread of the donut.\n * @param startAngle - Start angle.\n * @param endAngle - End angle.\n * @returns Array of path coordinates.\n */\nfunction describeArcDonut(x: number, y: number, radius: number, spread: number, startAngle: number, endAngle: number): Array<string | number> {\n    var innerStart = polarToCartesian(x, y, radius, endAngle);\n    var innerEnd = polarToCartesian(x, y, radius, startAngle);\n    var outerStart = polarToCartesian(x, y, radius + spread, endAngle);\n    var outerEnd = polarToCartesian(x, y, radius + spread, startAngle);\n\n    var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n    var d = [\n        \"M\", outerStart.x, outerStart.y,\n        \"A\", radius + spread, radius + spread, 0, largeArcFlag, 0, outerEnd.x, outerEnd.y,\n        \"L\", innerEnd.x, innerEnd.y,\n        \"A\", radius, radius, 0, largeArcFlag, 1, innerStart.x, innerStart.y,\n        \"L\", outerStart.x, outerStart.y, \"Z\"\n    ];\n\n    return d;\n}\n\nexport { DonutController }; ", "import { polarToCartesian } from \"../utils\";\nimport { Controller } from \"./controller\";\nimport { drawPieOrDonut } from \"./donut_or_pie_utils\";\n\n/**\n * Class for displaying pie and donut charts.\n * @extends Controller\n */\nclass PieController extends Controller {\n\n    /**\n     * Draws pie chart.\n     * \n     * @override\n     * \n     * @param currentSerieGroupElement - Current serie group element.\n     */\n    onDraw(currentSerieGroupElement: SVGElement) {\n        drawPieOrDonut(this.svgChart, currentSerieGroupElement, (centerX: number, centerY: number, radius: number, startAngle: number, endAngle: number) => {\n            return describeArcPie(centerX, centerY, radius, startAngle, endAngle);\n        });\n    }\n\n}\n\n/**\n * Get path for pie.\n * \n * @param x - X point.\n * @param y - Y point.\n * @param radius - Radius of arc.\n * @param startAngle - Start angle.\n * @param endAngle - End angle.\n * @returns Array of path coordinates.\n */\nfunction describeArcPie(x: number, y: number, radius: number, startAngle: number, endAngle: number): Array<string | number> {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n\n    var arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n    var d = [\n        \"M\", start.x, start.y,\n        \"A\", radius, radius, 0, arcSweep, 0, end.x, end.y,\n        \"L\", x, y,\n        \"L\", start.x, start.y\n    ];\n\n    return d;\n}\n\nexport { PieController }; ", "import { el, parent, prefixed } from \"./utils\";\nimport { colors } from \"./colors\";\nimport { LineController } from \"./charts/line_chart_controller\";\nimport { BarController } from \"./charts/bar_chart_controller\";\nimport { BarAndLineController } from \"./charts/bar_and_line_chart_controller\";\nimport { DonutController } from \"./charts/donut_chart_controller\";\nimport { PieController } from \"./charts/pie_chart_controller\";\nimport { SvgChartConfig } from \"./config\";\nimport { Controller } from \"./charts/controller\";\nimport { ChartData, ChartEventInfo, ChartType, StringBooleanHash } from \"./types\";\n\n/**\n * SvgChart class.\n */\nclass SvgChart {\n\n    static #chartTypeControllers = { ChartType: Controller };\n    static colorPalettes = colors;\n\n    static #cssAdded = false;\n    static #activeColorPalette = colors.dutchFieldColorPalette;\n\n    static {\n        SvgChart.#chartTypeControllers[ChartType.Line] = LineController;\n        SvgChart.#chartTypeControllers[ChartType.Bar] = BarController;\n        SvgChart.#chartTypeControllers[ChartType.LineAndBar] = BarAndLineController;\n        SvgChart.#chartTypeControllers[ChartType.Pie] = PieController;\n        SvgChart.#chartTypeControllers[ChartType.Donut] = DonutController;\n    }\n\n    /**\n     * Width of parent element.\n     */\n    width: number;\n\n    /**\n     * Height of parent element.\n     */\n    height: number;\n\n    /**\n     * Width of chart without paddings.\n     */\n    chartWidth: number;\n\n    /**\n     * Height of chart without paddings.s\n     */\n    chartHeight: number;\n\n    /**\n     * The generated root SVG element.\n     */\n    svg: SVGElement;\n\n    /**\n     * Config object that is created in the constrructor or setConfig() methiod.\n     */\n    config: SvgChartConfig;\n\n    /**\n     * Controller that is in charge of drawing the chart.\n     */\n    controller: Controller;\n\n    /**\n     * Hash where key = serie and value = whether it is selected or nor not.\n     */\n    unselectedSeries: StringBooleanHash;\n\n    /**\n     * Chart data object. Set during the chart() method.\n     */\n    data: ChartData;\n\n    /**\n     * Element that contains definitions, for example for gradients.\n     */\n    #defsElement: SVGElement;\n\n    /**\n     * Element where the config.drawOnConfig method will paint in. Only created when config.drawOnConfig is specified.\n     */\n    #drawOnConfigGroup: SVGElement;\n\n    /**\n     * Element where the config.drawOnDarta method will paint in. Only created when config.drawOnData is specified.\n     */\n    #drawOnDataGroup: SVGElement;\n    serieGroupElement: SVGElement;\n    valueElGroup: SVGElement;\n    valueElRect: SVGElement;\n    valueElText: SVGGraphicsElement;\n    el: Function;\n    lineAndBarValueHeight: number;\n    xAxisGroupElement: SVGElement;\n    xAxisLabelsGroupElement: SVGElement;\n    xAxisGridColumnsSelectableGroupElement: SVGElement;\n    lineAndBarSelectedColumnIndex: number;\n    columnWidth: number;\n    barCountPerColumn: number;\n\n\n\n    #onLegendClickScoped = null;\n    #onLegendKeypressScoped = null;\n    #onSerieGroupTransitionendScoped = null;\n    #onSerieGroupFocusScoped = null;\n    #onSerieGroupBlurScoped = null;\n    #listenersToRemoveAfterConfigChange: Array<ChartEventInfo>;\n\n    /**\n     * Set a color palette for all chart instances.\n     * @param {Array<string>} colors Array of colors.\n     */\n    static setActiveColorPalette(colors: Array<string>) {\n        SvgChart.#activeColorPalette = colors;\n    }\n\n    /**\n     * Constructor - create a new chart instance.\n     * @param {HTMLElement} parent Parent DOM node the SVG element will be attached to.\n     * @param {SvgChartConfig} config Configuration object.\n     */\n    constructor(parent: HTMLElement, config: SvgChartConfig) {\n\n        if (!SvgChart.#cssAdded) {\n            SvgChart.#cssAdded = true;\n            // TODO: split between chart types.\n            const cssRules = [\n                '.' + prefixed('line-point') + ', g.' + prefixed('legend-group') + ' g, .' + prefixed('x-axis-grid-column-selectable-label') + ' { cursor: pointer; }',\n                '.' + prefixed('line-point') + ':hover, circle.' + prefixed('line-point') + ':focus { stroke-width: 6; outline: none; }',\n                '#' + prefixed('serie-group') + ' g { transition: opacity 0.6s; }',\n                '#' + prefixed('serie-group') + ' g.' + prefixed('unselected') + ' { opacity: 0; }',\n                '#' + prefixed('serie-group-current') + ' { transition: opacity 1s; opacity: 1; }',\n                '#' + prefixed('serie-group-current') + '.' + prefixed('unattached') + ' { opacity: 0; }',\n                'g.' + prefixed('legend-group') + ' g.' + prefixed('unselected') + ' { opacity: 0.4; }',\n                'rect.' + prefixed('bar') + ':hover, path.' + prefixed('pie-piece') + ':hover { fill-opacity: 0.7; }',\n                //'path.' + prefixed('pie-piece') + ':focus, rect.' + prefixed('bar') + ':focus { outline: none; stroke-width:1; stroke:white; fill-opacity:1; }'\n                'path.' + prefixed('pie-piece') + ':focus, rect.' + prefixed('bar') + ':focus { outline: none; fill-opacity:1; }'\n            ];\n            parent.ownerDocument.head.appendChild(document.createElement(\"style\")).innerHTML = cssRules.join(\"\\n\");\n        }\n\n        const parentRect = parent.getBoundingClientRect();\n\n        this.width = parentRect.width;\n        this.height = parentRect.height;\n\n        this.svg = el('svg', {\n            width: this.width,\n            height: this.height\n        });\n        parent.appendChild(this.svg);\n\n        this.setConfig(config);\n    }\n\n    /**\n     * Set the configuration for this chart instance.\n     * @param {Object} config Configuration object.\n     */\n    setConfig(config: SvgChartConfig) {\n\n        const newConfig = new SvgChartConfig();\n\n        this.config = Object.assign({}, newConfig, config);\n        this.config.padding = Object.assign({}, newConfig.padding, this.config.padding);\n\n        this.config = Object.assign(this.config, SvgChart.#chartTypeControllers[this.config.chartType].requiredConfigWithValue);\n\n        if (this.config.ltr) {\n            this.config.padding.left = this.config.padding.start;\n            this.config.padding.right = this.config.padding.end;\n        } else {\n            this.config.padding.left = this.config.padding.end;\n            this.config.padding.right = this.config.padding.start;\n        }\n\n        this.controller = new SvgChart.#chartTypeControllers[config.chartType](this);\n\n        this.svg.setAttribute('direction', SvgChartConfig.getDirection(this.config));\n\n        // First remove event listener from a previous config if they exist.\n        if (this.#listenersToRemoveAfterConfigChange && this.#listenersToRemoveAfterConfigChange.length) {\n            this.#listenersToRemoveAfterConfigChange.forEach((item) => {\n                item.node.removeEventListener(item.eventName, item.callback, item.capture);\n            });\n        }\n        this.#listenersToRemoveAfterConfigChange = [];\n\n        // And then remove child nodes from a previous config if they exist.\n        while (this.svg.childNodes.length) {\n            this.svg.firstChild.remove();\n        }\n\n        this.data = null;\n        this.unselectedSeries = {} as StringBooleanHash;\n\n        this.chartWidth = this.width - this.config.padding.start - this.config.padding.end - (this.config.xAxisGridPadding * 2);\n        this.chartHeight = this.height - this.config.padding.top - this.config.padding.bottom - (this.config.yAxisGridPadding * 2);\n\n        if (this.config.backgroundColor) {\n            this.svg.style.backgroundColor = this.config.backgroundColor;\n        }\n        this.#defsElement = el('defs');\n        this.svg.appendChild(this.#defsElement);\n\n        if (!this.#onSerieGroupTransitionendScoped) {\n            this.#onSerieGroupTransitionendScoped = this.#onSerieGroupTransitionend.bind(this);\n        }\n\n        if (this.config.drawOnConfig) {\n            this.#drawOnConfigGroup = el('g', {\n                className: prefixed('draw-on-config-group')\n            });\n            this.svg.appendChild(this.#drawOnConfigGroup);\n        }\n\n        if (this.config.title) {\n            this.#addTitle();\n        }\n\n        if (this.config.legend) {\n            this.#addLegend();\n        }\n\n        this.controller.onConfigBefore();\n\n        this.config.series.forEach((serie) => {\n\n            this.controller.onConfigSerieBefore(serie);\n\n            if (serie.fillGradient) {\n                var lg = el('linearGradient', {\n                    id: serie.id + '-gradient',\n                    x1: 0,\n                    x2: 0,\n                    y1: 0,\n                    y2: 1\n                });\n                lg.appendChild(el('stop', {\n                    offset: \"0%\",\n                    stopColor: serie.fillGradient[0]\n                }));\n                lg.appendChild(el('stop', {\n                    offset: \"100%\",\n                    stopColor: serie.fillGradient[1]\n                }));\n                this.#defsElement.appendChild(lg);\n            }\n\n            this.controller.onConfigSerieAfter(serie);\n\n        });\n\n        if (this.config.drawOnConfig) {\n            this.config.drawOnConfig(this, this.#drawOnConfigGroup);\n        }\n\n        if (this.config.drawOnData) {\n            this.#drawOnDataGroup = el('g', {\n                className: prefixed('draw-on-data-group')\n            });\n            this.svg.appendChild(this.#drawOnDataGroup);\n        }\n\n        this.#addSerieGroup();\n\n        this.controller.onConfigAfter();\n\n    }\n\n    /**\n     * Writing the charts.\n     * @param {ChartData} data Data object.\n     */\n    chart(data: ChartData = null) {\n\n        if (data !== null) {\n            this.data = data;\n        }\n\n        const currentSerieGroupElement = this.#dataBefore();\n\n        this.controller.onDraw(currentSerieGroupElement);\n\n        this.#dataAfter(currentSerieGroupElement);\n\n        if (this.config.drawOnData) {\n            this.config.drawOnData(this, this.#drawOnDataGroup);\n        }\n\n    }\n\n    // setSelectedIndex(index) {\n    //     var textNodes = this.xAxisLabelsGroupElement.querySelectorAll('text.' + prefixed('x-axis-grid-column-selectable-label'));\n    //     return this.#onXAxisLabelGroupSelect(textNodes.item(index));\n    // }\n\n    /**\n     * Saves chart as PNG file.\n     * @param {String} filename Filename.\n     */\n    saveAsPng(filename: string) {\n        var rect = this.svg.getBoundingClientRect();\n        var canvas = document.createElement('canvas');\n        canvas.setAttribute('width', rect.width.toString());\n        canvas.setAttribute('height', rect.height.toString());\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = this.svg.style.backgroundColor;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        var img = new Image();\n        var data = '<svg xmlns=\"http://www.w3.org/2000/svg\">' + this.svg.innerHTML + '</svg>';\n        var parser = new DOMParser();\n        var result = parser.parseFromString(data, 'text/xml');\n        var inlineSVG = result.getElementsByTagName(\"svg\")[0];\n        inlineSVG.setAttribute('width', rect.width.toString());\n        inlineSVG.setAttribute('height', rect.height.toString());\n        var svg64 = btoa(new XMLSerializer().serializeToString(inlineSVG));\n        var image64 = 'data:image/svg+xml;base64,' + svg64;\n        img.onload = function () {\n            ctx.drawImage(img, 0, 0, rect.width, rect.height);\n            window.URL.revokeObjectURL(image64);\n            var png_img = canvas.toDataURL(\"image/png\");\n            const createEl = document.createElement('a');\n            createEl.href = png_img;\n            createEl.download = filename;\n            createEl.click();\n            createEl.remove();\n        }\n        img.src = image64;\n    }\n\n    #addSerieGroup() {\n        this.serieGroupElement = el('g', {\n            id: prefixed('serie-group')\n        });\n        this.svg.appendChild(this.serieGroupElement);\n        this.addEventListener(this.serieGroupElement, 'transitionend', this.#onSerieGroupTransitionendScoped, false);\n\n        if (this.config.focusedValueShow) {\n            if (!this.#onSerieGroupFocusScoped) {\n                this.#onSerieGroupFocusScoped = this.#onSerieGroupFocus.bind(this);\n                this.#onSerieGroupBlurScoped = this.#onSerieGroupBlur.bind(this);\n            }\n\n            this.addEventListener(this.serieGroupElement, 'focus', this.#onSerieGroupFocusScoped, true);\n            this.addEventListener(this.serieGroupElement, 'blur', this.#onSerieGroupBlurScoped, true);\n\n            this.valueElGroup = el('g', {\n                className: prefixed('value-element-group')\n            });\n            this.valueElRect = el('rect', {\n                fill: this.config.focusedValueFill || 'black'\n            });\n            this.valueElText = el('text', {\n                direction: SvgChartConfig.getDirection(this.config),\n                textAnchor: 'middle',\n                dominantBaseline: 'middle',\n                fontFamily: this.config.fontFamily,\n                fontSize: 'smaller',\n                fill: this.config.focusedValueColor || 'white'\n            }, document.createTextNode('')) as SVGGraphicsElement;\n            this.valueElGroup.appendChild(this.valueElRect);\n            this.valueElGroup.appendChild(this.valueElText);\n        }\n    }\n\n    #addLegend() {\n\n        const gLegend = el('g', {\n            className: prefixed('legend-group')\n        });\n\n        if (this.config.legendSelect) {\n            if (!this.#onLegendClickScoped) {\n                this.#onLegendClickScoped = this.#onLegendClick.bind(this);\n                this.#onLegendKeypressScoped = this.#onLegendKeypress.bind(this);\n            }\n            this.addEventListener(gLegend, 'keydown', this.#onLegendKeypressScoped, false);\n            this.addEventListener(gLegend, 'click', this.#onLegendClickScoped, false);\n        }\n\n        this.config.series.forEach((serie, serieIndex) => {\n\n            const gSerie = el('g', {\n                dataSerie: serie.id,\n                tabindex: this.config.legendSelect ? 0 : null\n            });\n\n            let x = 0, y = 0;\n\n            switch (this.config.legendPosition) {\n                case 'top':\n                    y = this.config.legendTop ? this.config.legendTop : (this.config.padding.top / 2);\n                    break;\n                case 'bottom':\n                    y = this.config.legendBottom ? this.config.legendBottom : (this.height - (this.config.padding.bottom / 2));\n                    break;\n                case 'end':\n                    if (this.config.ltr) {\n                        x = this.config.padding.start + this.chartWidth + (this.config.xAxisGridPadding * 2) + this.config.paddingDefault;\n                        y = this.config.padding.top + this.config.yAxisGridPadding + (serieIndex * this.config.paddingDefault);\n                    } else {\n                        x = (this.config.xAxisGridPadding * 2) + this.config.padding.end - this.config.paddingDefault - this.config.legendWidth;\n                        y = this.config.padding.top + this.config.yAxisGridPadding + (serieIndex * this.config.paddingDefault);\n                    }\n                    break;\n            }\n\n            const rect = el('rect', {\n                x: x,\n                y: y,\n                rx: this.config.legendCircle ? this.config.legendWidth : 0,\n                ry: this.config.legendCircle ? this.config.legendWidth : 0,\n                width: this.config.legendWidth,\n                height: this.config.legendWidth,\n                fill: this.getSerieFill(serie, serieIndex)\n            });\n\n            const text = el('text', {\n                direction: SvgChartConfig.getDirection(this.config),\n                x: this.config.ltr ? (x + (this.config.legendWidth * 2)) : (x - this.config.legendWidth),\n                y: y + (this.config.legendWidth / 2) + 1, // + 1 don't know why\n                textAnchor: 'start',\n                dominantBaseline: 'middle',\n                fontFamily: this.config.fontFamily,\n                fill: this.config.legendColor,\n                fontSize: this.config.legendFontSize,\n            }, document.createTextNode(serie.title));\n\n\n            if (this.config.ltr) {\n                gSerie.appendChild(rect);\n                gSerie.appendChild(text);\n            } else {\n                gSerie.appendChild(text);\n                gSerie.appendChild(rect);\n            }\n            gLegend.appendChild(gSerie);\n        });\n\n        this.svg.appendChild(gLegend);\n\n        if (['top', 'bottom'].indexOf(this.config.legendPosition) > -1) {\n\n            // Measure the text so we can place the rects and texts next to each other\n            // and center the complete legend row.\n\n            let totalLegendWidth = 0;\n            let curX = this.config.ltr ? 0 : (this.width - this.config.legendWidth);\n            gLegend.querySelectorAll('g').forEach((g) => {\n                const box = g.getBBox();\n                g.querySelector('rect').setAttribute('x', curX.toString());\n                g.querySelector('text').setAttribute('x', (this.config.ltr ? (curX + (this.config.legendWidth * 2)) : (curX - 10)).toString());\n                if (this.config.ltr) {\n                    curX += (box.width + this.config.paddingDefault);\n                } else {\n                    curX -= (box.width + this.config.paddingDefault);\n                }\n                totalLegendWidth += (box.width + this.config.paddingDefault);\n            });\n            if (this.config.ltr) {\n                curX -= this.config.paddingDefault;\n                gLegend.setAttribute('transform', 'translate(' + ((this.width / 2) - (curX / 2)) + ', 0)');\n            } else {\n                totalLegendWidth -= this.config.paddingDefault;\n                gLegend.setAttribute('transform', 'translate(-' + ((this.width / 2) - (totalLegendWidth / 2)) + ', 0)');\n            }\n\n        }\n\n    }\n\n    #addTitle() {\n\n        var x: number, y: number, dominantBaseline: string, textAnchor: string = null;\n        switch (this.config.titleHorizontalPosition) {\n            case 'end':\n                x = this.width - this.config.paddingDefault;\n                textAnchor = this.config.ltr ? 'end' : 'start';\n                break;\n            case 'start':\n                x = this.config.paddingDefault;\n                textAnchor = this.config.ltr ? 'start' : 'end';\n                break;\n            default:\n                x = this.width / 2;\n                textAnchor = 'middle';\n                break;\n        }\n        switch (this.config.titleVerticalPosition) {\n            case 'center':\n                y = this.height / 2;\n                dominantBaseline = 'middle';\n                break;\n            case 'bottom':\n                y = this.height - this.config.paddingDefault;\n                dominantBaseline = 'auto';\n                break;\n            default:\n                y = this.config.paddingDefault;\n                dominantBaseline = 'hanging';\n                break;\n        }\n        this.svg.appendChild(el('text', {\n            direction: SvgChartConfig.getDirection(this.config),\n            x: x,\n            y: this.config.paddingDefault,\n            textAnchor: textAnchor,\n            dominantBaseline: dominantBaseline,\n            fontFamily: this.config.fontFamily,\n            fontSize: this.config.titleFontSize,\n            fill: this.config.titleColor,\n            className: prefixed('text-title'),\n        }, document.createTextNode(this.config.title)));\n    }\n\n    /**\n     * Things we need to do for all chart types before we start visualise the data.\n     * @returns {SVGElement} The current serie group element.\n     */\n    #dataBefore(): SVGElement {\n        if (this.serieGroupElement.firstChild) {\n            this.serieGroupElement.firstChild.remove();\n        }\n        var currentSerieGroupElement = el('g', {\n            id: prefixed('serie-group-current'),\n            className: this.config.transition ? prefixed('unattached') : ''\n        });\n        return currentSerieGroupElement;\n    }\n\n    /**\n     * Things we need to do for all chart types after we visualised the data.\n     * @param {SVGElement} currentSerieGroupElement The current serie group element we got from #dataBefore().\n     */\n    #dataAfter(currentSerieGroupElement: SVGElement) {\n        this.serieGroupElement.appendChild(currentSerieGroupElement).getBoundingClientRect(); // getBoundingClientRect causes a reflow, so we don't have to use setTimeout to remove the class.\n        if (this.config.transition) {\n            currentSerieGroupElement.classList.remove(prefixed('unattached'));\n        }\n    }\n\n    getSeriePropertyColor(props: Array<any>, serie: { id: string, color: string }, serieIndex: number) {\n        for (var i = 0; i < props.length; i++) {\n            var key = props[i];\n            if (serie[key]) {\n                return key === 'fillGradient' ? `url(#${serie.id}-gradient)` : serie[key];\n            }\n        }\n        if (serie.color) {\n            return serie.color;\n        }\n        return SvgChart.#activeColorPalette[serieIndex];\n    }\n\n    getSeriePointColor(serie, serieIndex) {\n        return this.getSeriePropertyColor(['pointColor', 'strokeColor'], serie, serieIndex);\n    }\n\n    getSerieStrokeColor(serie, serieIndex) {\n        return this.getSeriePropertyColor(['strokeColor'], serie, serieIndex);\n    }\n\n    getSerieFill(serie, serieIndex) {\n        return this.getSeriePropertyColor(['fillGradient'], serie, serieIndex);\n    }\n\n    /**\n     * Adds an event listener to a node and adds it to the #listenersToRemoveAfterConfigChange array as well, so we can remove them in one place.\n     * @param {Node} node Node to add the listener to.\n     * @param {string} eventName Name of event.\n     * @param {Function} callback Function that needs to be executed.\n     * @param {boolean} capture Capture or not.\n     */\n    addEventListener(node: Node, eventName: string, callback: any, capture: boolean) {\n        node.addEventListener(eventName, callback, capture);\n        this.#listenersToRemoveAfterConfigChange.push({\n            node: node,\n            eventName: eventName,\n            callback: callback,\n            capture: capture\n        });\n    }\n\n\n    /**\n     * When legend gets toggled (selected / deselected).\n     * @param {SVGElement} target Legend node that gets toggled.\n     */\n    #onLegendToggle(target: SVGElement) {\n        var g = parent(target, 'g');\n        if (g && g.dataset.serie) {\n            var sg = this.serieGroupElement.querySelector('g[data-serie=\"' + g.dataset.serie + '\"]');\n            if (this.unselectedSeries[g.dataset.serie]) {\n                if (sg) {\n                    sg.setAttribute('display', 'inline'); // This is the default apparently and MUST be set before we change the unselected class, otherwise the transition won't be started\n                    sg.classList.remove(prefixed('unselected'));\n                }\n                g.classList.remove(prefixed('unselected'));\n                delete this.unselectedSeries[g.dataset.serie];\n            } else {\n                g.classList.add(prefixed('unselected'));\n                if (sg) {\n                    sg.classList.add(prefixed('unselected'));\n                }\n                this.unselectedSeries[g.dataset.serie] = true;\n            }\n        }\n    }\n\n    /**\n     * When a key is pressed on a focussed legend node.\n     * @param {Event} e Event object.\n     */\n    #onLegendKeypress(e: KeyboardEvent) {\n        if (e.key === 'Enter') {\n            this.#onLegendToggle(e.target as SVGElement);\n        }\n    }\n\n    /**\n     * When a focussed legend node is clicked.\n     * @param {Event} e Event object.\n     */\n    #onLegendClick(e: Event) {\n        this.#onLegendToggle(e.target as SVGElement);\n    }\n\n    /**\n     * When the tranisiton of a serie group has ended.\n     * @param {Event} e Event object.\n     */\n    #onSerieGroupTransitionend(e) {\n        // Currently only used to add display none to it when this serie group is unselected.\n        // We have to add display none, so this node doesn't make part of the UI anymore and cannot hide other nodes.\n        if (e.target.classList.contains(prefixed('unselected'))) {\n            e.target.setAttribute('display', 'none');\n        }\n    }\n\n    /**\n     * When a serie group node is blurred (this means loses focus).\n     * @param {Event} e Event object.\n     */\n    #onSerieGroupBlur(e) {\n        var circle = e.target;\n        var g = parent(circle, 'g');\n        var serie = g.dataset.serie;\n        if (serie) {\n            // Remove the current value element.\n            this.serieGroupElement.removeChild(this.valueElGroup);\n        }\n    }\n\n    /**\n     * When a serie group node gets focussed.\n     * @param {Event} e Event object.\n     */\n    #onSerieGroupFocus(e) {\n        var circle = e.target;\n        var g = parent(circle, 'g');\n        var serie = g.dataset.serie;\n        if (serie) {\n            var serieItem = this.config.series.find((item) => item.id === serie);\n            this.valueElText.replaceChild(document.createTextNode(serieItem.title + ': ' + circle.dataset.value), this.valueElText.firstChild);\n            this.serieGroupElement.appendChild(this.valueElGroup);\n            var box = this.valueElText.getBBox();\n            var width = box.width + (this.config.focusedValuePadding * 2);\n            var height = box.height + (this.config.focusedValuePadding * 2);\n            this.valueElRect.setAttribute('width', width.toString());\n            this.valueElRect.setAttribute('height', height.toString());\n            this.valueElText.setAttribute('x', (width / 2).toString());\n            this.valueElText.setAttribute('y', (height / 2).toString());\n\n            var type = serieItem.type || this.config.chartType;\n            var x: number, y: number = null;\n            switch (type) {\n                case ChartType.Line:\n                case ChartType.Bar:\n                case ChartType.LineAndBar:\n                    x = (circle.getAttribute('cx') || (parseFloat(circle.getAttribute('x')) + (circle.getAttribute('width') / 2))) - (width / 2);\n                    y = (circle.getAttribute('cy') || circle.getAttribute('y')) - 10 - height;\n                    break;\n                case ChartType.Pie:\n                case ChartType.Donut:\n                    var d = circle.getAttribute('d').split(' ');\n                    x = d[1].trim();\n                    y = d[2].trim();\n                    break;\n            }\n            this.valueElGroup.setAttribute('transform', 'translate(' + x + ', ' + y + ')');\n        }\n    }\n\n}\n\n// Add el function to chart instance, so we can use it in the calling function, for example\n// to use it in the drawOnConfig or drawOnData callbacks.\nSvgChart.prototype.el = el;\n\nexport { SvgChart };\n", "import { SvgChart } from \"../src/svg.js\";\nimport { SvgChartConfig } from \"../src/config.js\";\nimport { ChartType } from \"../src/types.js\";\n\n//SvgChart.setActiveColorPalette(SvgChart.colorPalettes.springPastelsColorPalette);\n\nfunction getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction getRandomNumbersSummedUpTo(count, maxSum) {\n    let sum = maxSum;\n    const numbers = [];\n    for (let i = 0; i < count - 1; i++) {\n        const randomNumber = Math.floor(Math.random() * sum);\n        sum -= randomNumber < 0 ? 0 : randomNumber;\n        numbers.push(randomNumber < 0 ? 0 : randomNumber);\n    }\n    numbers.push(sum);\n    return numbers;\n}\n\nvar htmlDirIsLtr = document.documentElement.getAttribute('dir') !== 'rtl';\n\nvar chartInfo = {\n    chartBasicLine: {\n        config: {\n            chartType: ChartType.Line,\n            transition: true,\n            ltr: htmlDirIsLtr,\n            title: 'Basic line chart',\n            minValue: 0,\n            maxValue: 100,\n            legendPosition: 'end',\n            xAxisTitle: 'Days',\n            yAxisTitle: 'Count',\n            padding: {\n                end: 100,\n                start: 80,\n                top: 50,\n                bottom: 70\n            },\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                }\n            ]\n        },\n        data: null,\n        chart: null\n    },\n    chartBasicLineDark: {\n        config: {\n            chartType: ChartType.Line,\n            backgroundColor: 'black',\n            titleColor: 'white',\n            xAxisGridLineColor: 'green',\n            yAxisGridLineColor: 'green',\n            xAxisLabelColor: '#C0C0C0',\n            yAxisLabelColor: '#C0C0C0',\n            xAxisTitleColor: 'white',\n            yAxisTitleColor: 'white',\n            focusedValueFill: 'white',\n            focusedValueColor: 'black',\n            lineChartFilled: true,\n            legendColor: 'white',\n            transition: true,\n            ltr: htmlDirIsLtr,\n            title: 'Basic line chart dark',\n            minValue: 0,\n            maxValue: 100,\n            legendPosition: 'end',\n            xAxisTitle: 'Days',\n            yAxisTitle: 'Count',\n            padding: {\n                end: 100,\n                start: 80,\n                top: 50,\n                bottom: 70\n            },\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                }\n            ]\n        },\n        data: {\n            series: {\n                train: Array(7).fill(1).map(item => getRandomIntInclusive(0, 100)),\n                car: Array(7).fill(1).map(item => getRandomIntInclusive(0, 100)),\n            },\n            xAxis: {\n                columns: ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']\n            }\n        },\n        chart: null\n    },\n    chartBasicLineBig: {\n        config: {\n            chartType: ChartType.Line,\n            ltr: htmlDirIsLtr,\n            title: 'Basic line chart with many values',\n            minValue: 0,\n            maxValue: 100,\n            xAxisTitle: 'Days',\n            yAxisStep: 10, // real value step\n            yAxisLabelStep: 20,\n            xAxisStep: 2, // step between colums (so 2 means display each second step from first one on)\n            xAxisLabelStep: 10,\n            lineCurved: false,\n            yAxisTitle: 'Count',\n            points: false,\n            lineWidth: 1,\n            padding: {\n                end: 100,\n                start: 80,\n                top: 100,\n                bottom: 100\n            },\n            series: [\n                {\n                    id: 'car',\n                    title: 'Car',\n                    color: 'blue'\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike',\n                    color: 'green'\n                },\n            ],\n            xAxisLabelRotation: 45,\n            xAxisLabelTop: 30,\n            xAxisGridPadding: 20,\n            yAxisGridPadding: 20,\n            legendPosition: 'top',\n            legendTop: 60\n        },\n        dataFunc: function (id) {\n            const total = 100;\n            var numbers = [];\n            var serieData = {};\n            for (let i = 0; i < total; i++) {\n                numbers.push(getRandomNumbersSummedUpTo(4, 100));\n            };\n            chartInfo[id].config.series.forEach(function (serie) {\n                serieData[serie.id] = [];\n            });\n            numbers.forEach(function (numberArray) {\n                chartInfo[id].config.series.forEach(function (serie, serieIndex) {\n                    serieData[serie.id].push(numberArray[serieIndex]);\n                });\n            });\n            chartInfo[id].data = {\n                series: serieData,\n                xAxis: {\n                    columns: Array(total).fill(1).map(function (value, index) {\n                        return 'Item ' + (index + 1);\n                    })\n                }\n            };\n        },\n        chart: null\n    },\n    chartBasicBar: {\n        config: {\n            chartType: ChartType.Bar,\n            ltr: htmlDirIsLtr,\n            title: 'Basic bar chart',\n            minValue: 0,\n            maxValue: 100,\n            legendPosition: 'top',\n            xAxisTitle: 'Days',\n            yAxisTitle: 'Count',\n            legendTop: 60,\n            padding: {\n                end: 40,\n                start: 80,\n                bottom: 60\n            },\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                }\n            ]\n        },\n        data: null,\n        chart: null\n    },\n    chartStackedBar: {\n        config: {\n            chartType: ChartType.Bar,\n            ltr: htmlDirIsLtr,\n            title: 'Stacked bar chart',\n            legendPosition: 'top',\n            minValue: 0,\n            maxValue: 100,\n            legendTop: 60,\n            barSpacing: 20,\n            barStacked: true,\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike',\n                },\n                {\n                    id: 'feet',\n                    title: 'Feet',\n                }\n            ]\n        },\n        data: null,\n        chart: null,\n        dataFunc: function (id) {\n            var numbers = [];\n            var serieData = {};\n            for (let i = 0; i < 7; i++) {\n                numbers.push(getRandomNumbersSummedUpTo(4, 100));\n            };\n            chartInfo[id].config.series.forEach(function (serie) {\n                serieData[serie.id] = [];\n            });\n            numbers.forEach(function (numberArray) {\n                chartInfo[id].config.series.forEach(function (serie, serieIndex) {\n                    serieData[serie.id].push(numberArray[serieIndex]);\n                });\n            });\n            chartInfo[id].data = {\n                series: serieData,\n                xAxis: {\n                    columns: ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']\n                }\n            };\n        }\n    },\n    chartBasicPie: {\n        config: {\n            chartType: ChartType.Pie,\n            ltr: htmlDirIsLtr,\n            title: 'Basic pie chart',\n            legendPosition: 'top',\n            legendTop: 60,\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train'\n                },\n                {\n                    id: 'car',\n                    title: 'Car'\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike'\n                },\n                {\n                    id: 'feet',\n                    title: 'Feet'\n                }\n            ]\n        },\n        data: null,\n        chart: null\n    },\n    chartBasicDonut: {\n        config: {\n            chartType: ChartType.Donut,\n            ltr: htmlDirIsLtr,\n            title: 'Basic donut chart',\n            legendPosition: 'top',\n            legendTop: 60,\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train'\n                },\n                {\n                    id: 'car',\n                    title: 'Car'\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike'\n                },\n                {\n                    id: 'feet',\n                    title: 'Feet'\n                }\n            ]\n        },\n        data: null,\n        chart: null\n    },\n    chartBarAndLine: {\n        config: {\n            chartType: ChartType.LineAndBar,\n            ltr: htmlDirIsLtr,\n            title: 'Bar and line chart',\n            legendPosition: 'top',\n            legendTop: 60,\n            minValue: 0,\n            maxValue: 100,\n            barSpacing: 10,\n            series: [\n                {\n                    id: 'bike',\n                    title: 'Bike',\n                    type: ChartType.Bar\n                },\n                {\n                    id: 'feet',\n                    title: 'Feet',\n                    type: ChartType.Bar\n                },\n                {\n                    id: 'train',\n                    title: 'Train',\n                    type: ChartType.Line\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                    type: ChartType.Line\n                }\n            ]\n        },\n        data: null,\n        chart: null,\n    },\n    chartCustom: {\n        config: {\n            padding: {\n                bottom: 70,\n                start: 80\n            },\n            chartType: ChartType.Line,\n            ltr: htmlDirIsLtr,\n            title: 'Custom line chart',\n            legendPosition: 'top',\n            legendTop: 60,\n            xAxisTitle: 'Days',\n            yAxisTitle: 'Count',\n            xAxisTitleColor: 'black',\n            yAxisTitleColor: 'black',\n            minValue: 0,\n            maxValue: 100,\n            barSpacing: 10,\n            xAxisGridColumnsSelectable: true,\n            xAxisGridColumnsSelectableColor: 'red',\n            xAxisGridColumns: true,\n            lineCurved: false,\n            onXAxisLabelGroupSelect: function (chart, index) {\n                var serieValues = [];\n                Object.keys(chart.data.series).forEach(function (serie) {\n                    serieValues.push(`${serie} = ${chart.data.series[serie][index]}`);\n                });\n                document.getElementById('chartCustomCodeInfo').innerHTML = `Clicked on '${chart.data.xAxis.columns[index]}' with values: ${serieValues.join(\", \")}`;\n            },\n            drawOnData: function (chart, groupNode) {\n                groupNode.appendChild(chart.el('text', {\n                    x: chart.config.ltr ? (chart.width - chart.config.padding.end - 2) : (chart.config.padding.end + 2),\n                    direction: SvgChartConfig.getDirection(chart.config),\n                    y: chart.config.padding.top + 4,\n                    textAnchor: 'end',\n                    dominantBaseline: 'hanging',\n                    fontWeight: 'bold',\n                    fontSize: '26px'\n                }, document.createTextNode(Date.now())));\n            },\n            drawOnConfig: function (chart, groupNode) {\n                groupNode.appendChild(chart.el('rect', {\n                    x: chart.config.padding.left,\n                    y: chart.config.padding.top,\n                    width: chart.chartWidth,\n                    height: chart.lineAndBarValueHeight * 20,\n                    fill: 'darkgreen',\n                    fillOpacity: 0.2\n                }));\n                groupNode.appendChild(chart.el('rect', {\n                    x: chart.config.padding.left,\n                    y: chart.config.padding.top + (chart.lineAndBarValueHeight * 20),\n                    width: chart.chartWidth,\n                    height: chart.lineAndBarValueHeight * 40,\n                    fill: 'orange',\n                    fillOpacity: 0.2\n                }));\n                groupNode.appendChild(chart.el('rect', {\n                    x: chart.config.padding.left,\n                    y: chart.config.padding.top + (chart.lineAndBarValueHeight * 60),\n                    width: chart.chartWidth,\n                    height: chart.lineAndBarValueHeight * 40,\n                    fill: 'red',\n                    fillOpacity: 0.2\n                }));\n            },\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike',\n                }\n            ]\n        },\n        data: null,\n        chart: null,\n        onNewDataFunc: function () {\n            document.getElementById('chartCustomCodeInfo').innerHTML = 'Click a day to see details! ';\n        }\n    },\n    chartDynamic: {\n        config: {\n            padding: {\n                bottom: 70,\n                start: 80\n            },\n            chartType: ChartType.Line,\n            ltr: htmlDirIsLtr,\n            title: 'Dynamic chart',\n            legendPosition: 'top',\n            legendTop: 60,\n            xAxisTitle: 'Days',\n            yAxisTitle: 'Count',\n            xAxisTitleColor: 'black',\n            yAxisTitleColor: 'black',\n            minValue: 0,\n            maxValue: 100,\n            barSpacing: 10,\n            xAxisGridColumnsSelectable: true,\n            xAxisGridColumnsSelectableColor: 'red',\n            xAxisGridColumns: true,\n            lineCurved: true,\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike',\n                }\n            ]\n        },\n        data: {\n            series: {\n                train: Array(7).fill(1).map(item => getRandomIntInclusive(0, 100)),\n                car: Array(7).fill(1).map(item => getRandomIntInclusive(0, 100)),\n                bike: Array(7).fill(1).map(item => getRandomIntInclusive(0, 100))\n            },\n            xAxis: {\n                columns: ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']\n            }\n        },\n        chart: null\n    }\n};\n\nFunction.prototype.toJSON = function () {\n    return this.toString().replace(/\\n/g, \"<br>\").replace('function(', \"FUNC[\");\n}\n\nfunction setChartData(id) {\n    var isPieOrDonut = [ChartType.Pie, ChartType.Donut].indexOf(chartInfo[id].config.chartType) !== -1;\n    var serieData = {};\n    chartInfo[id].config.series.forEach(function (serie) {\n        serieData[serie.id] = !isPieOrDonut ? Array(7).fill(1).map(item => getRandomIntInclusive(0, 100)) : getRandomIntInclusive(0, 100);\n    });\n    chartInfo[id].data = {\n        series: serieData,\n        xAxis: {\n            columns: isPieOrDonut ? ['mon'] : ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']\n        }\n    };\n}\n\n/**\n * Rewrites CSV to data object.\n * Format: first row: columns (first column is empty)\n * second and next rows: first column id of serie and next columns are values\n * ,mon,tue,wed,thu,fri,sat,sun\n * train,45,98,45,45,56,67,89\n * car,55,4,7,6,8,9,0\n * \n */\nfunction csvToData(csv, id) {\n\n    let data = {\n        series: {},\n        xAxis: {\n            columns: null\n        }\n    };\n\n    const lines = csv.split(\"\\n\");\n\n    lines.forEach(function (line, lineIndex) {\n\n        const columns = line.split(',');\n        const firstColumn = columns.shift();\n\n        if (lineIndex === 0) {\n            data.xAxis.columns = columns;\n            return;\n        }\n\n        data.series[firstColumn] = columns.map((value) => parseInt(value, 10));\n\n    });\n\n    chartInfo[id].data = data;\n}\n\nfunction stringifyObject(ob) {\n    let s = [];\n    Object.keys(ob).forEach(function (key) {\n        const value = ob[key];\n        switch (typeof value) {\n            case 'object':\n                s.push(\"    \" + '\"' + key + '\": ' + JSON.stringify(value));\n                break;\n            case 'number':\n                s.push(\"    \" + '\"' + key + '\": ' + value);\n                break;\n            case 'string':\n                s.push(\"    \" + '\"' + key + '\": \"' + value + '\"');\n                break;\n            case 'function':\n                s.push(\"    \" + '\"' + key + '\": ' + value.toString());\n                break;\n            case 'boolean':\n                s.push(\"    \" + '\"' + key + '\": ' + value);\n                break;\n        }\n    });\n    return \"{\\n\" + s.join(\",\\n\") + \"\\n}\";\n}\n\nfunction doChart(id) {\n    if (chartInfo[id].onNewDataFunc) {\n        chartInfo[id].onNewDataFunc();\n    }\n    //if (!chartInfo[id].data) {\n    var csvArea = document.getElementById(id + 'CodeDataCsv');\n    if (csvArea && csvArea.value) {\n        csvToData(csvArea.value.trim(), id);\n    } else {\n        chartInfo[id].dataFunc ? chartInfo[id].dataFunc(id) : setChartData(id);\n    }\n    //}\n    if (chartInfo[id].chart === null) {\n        chartInfo[id].chart = new SvgChart(document.getElementById(id), chartInfo[id].config);\n        document.getElementById(id + 'RandomDataButton').addEventListener('click', function () {\n            doChart(id);\n        });\n        document.getElementById(id + 'PngButton').addEventListener('click', function () {\n            chartInfo[id].chart.saveAsPng(id + '.png');\n        });\n    } else {\n        chartInfo[id].chart.setConfig(chartInfo[id].config);\n    }\n    chartInfo[id].chart.chart(chartInfo[id].data);\n    var codeConfig = document.getElementById(id + 'CodeConfig').querySelector('code');\n    var codeData = document.getElementById(id + 'CodeData').querySelector('code');\n    codeConfig.innerHTML = stringifyObject(chartInfo[id].config);\n    codeData.innerHTML = JSON.stringify(chartInfo[id].data, null, 2);\n    hljs.highlightElement(codeConfig);\n    hljs.highlightElement(codeData);\n}\n\nfunction dynamicChart() {\n\n    if (!chartInfo['chartDynamic'].chart) {\n        document.getElementById('chartDynamicCodeConfig').value = JSON.stringify(chartInfo['chartDynamic'].config, null, 2);\n        document.getElementById('chartDynamicCodeData').value = JSON.stringify(chartInfo['chartDynamic'].data, null, 2);\n        document.getElementById('chartDynamicExecuteButton').addEventListener('click', dynamicChart);\n        document.getElementById('chartDynamicPngButton').addEventListener('click', function () {\n            chartInfo['chartDynamic'].chart.saveAsPng('chartDynamic.png');\n        });\n    }\n\n    const config = eval(\"(\" + document.getElementById('chartDynamicCodeConfig').value + \")\"); // note that JSON.parse doesn't work with functions as values.\n    const data = eval(\"(\" + document.getElementById('chartDynamicCodeData').value + \")\");\n\n    if (!chartInfo['chartDynamic'].chart) {\n        chartInfo['chartDynamic'].chart = new SvgChart(document.getElementById('chartDynamic'), config);\n    } else {\n        chartInfo['chartDynamic'].chart.setConfig(config);\n    }\n    chartInfo['chartDynamic'].chart.chart(data);\n}\n\ndoChart('chartBasicLine');\n//doChart('chartBasicLineDark');\n//doChart('chartBasicLineBig');\n//doChart('chartBasicBar');\n//doChart('chartStackedBar');\n//doChart('chartBasicPie');\n//doChart('chartBasicDonut');\n//doChart('chartBarAndLine');\n//doChart('chartCustom');\n//dynamicChart();\n//createToc();\n\nfunction createToc() {\n    const toc = [];\n    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(function (h, index) {\n        const level = h.tagName.toLowerCase().substring(1);\n        if (level == 1) {\n            return;\n        }\n        if (!h.id) {\n            h.id = 'my-header-' + index;\n        }\n        toc.push('<div class=\"my-header-level-' + level + '\"><a href=\"#' + h.id + '\">' + h.innerText + '</a></div>');\n    });\n    document.getElementById('toc').innerHTML = toc.join(\"\\n\");\n}\n\nfunction getParent(el, parentTagName) {\n    let parent = el;\n    while (parent && parent.tagName.toLowerCase() !== parentTagName) {\n        parent = parent.parentNode;\n    }\n    return parent;\n}\n\ndocument.documentElement.addEventListener('click', function (e) {\n    const target = e.target;\n    if (target.dataset.toggle) {\n        const targetId = target.dataset.targetId;\n        const csvEl = document.getElementById(targetId + 'CodeDataCsv');\n        const toggle = target.dataset.toggle;\n        switch (toggle) {\n            case 'chart':\n                document.getElementById(targetId).classList.remove('my-hidden');\n                document.getElementById(targetId + 'CodeConfig').classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeData').classList.add('my-hidden');\n                if (csvEl) csvEl.classList.add('my-hidden');\n                break;\n            case 'config':\n                document.getElementById(targetId).classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeConfig').classList.remove('my-hidden');\n                document.getElementById(targetId + 'CodeData').classList.add('my-hidden');\n                if (csvEl) csvEl.classList.add('my-hidden');\n                break;\n            case 'data':\n                document.getElementById(targetId).classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeConfig').classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeData').classList.remove('my-hidden');\n                if (csvEl) csvEl.classList.add('my-hidden');\n                break;\n            case 'data-csv':\n                document.getElementById(targetId).classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeConfig').classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeData').classList.add('my-hidden');\n                if (csvEl) csvEl.classList.remove('my-hidden');\n                break;\n        }\n        document.querySelectorAll('button[data-target-id=\"' + targetId + '\"]').forEach(function (el) {\n            if (el === target) {\n                el.classList.add('my-active-tab');\n            } else {\n                el.classList.remove('my-active-tab');\n            }\n        });\n    } else if (target.classList.contains('my-copy-button')) {\n        var pre = getParent(target, 'pre');\n        navigator.clipboard.writeText(pre.querySelector('code').innerText);\n    }\n});\n\n"],
  "mappings": "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",
  "names": ["el", "config", "parent", "ChartType", "_axisController", "parent", "config", "colors", "data", "data", "el", "parent"]
}
