{
  "version": 3,
  "sources": ["../src/utils.js", "../src/colors.js", "../src/charts/controller.js", "../src/axis.js", "../src/bar_and_line_utils.js", "../src/charts/line_chart_controller.js", "../src/charts/bar_chart_controller.js", "../src/charts/bar_and_line_chart_controller.js", "../src/donut_or_pie_utils.js", "../src/charts/donut_chart_controller.js", "../src/charts/pie_chart_controller.js", "../src/config.js", "../src/svg.js", "app_svg.js"],
  "sourcesContent": ["/**\n * @module\n * @ignore\n */\n\n/**\n * SVG namespace.\n */\nconst ns = 'http://www.w3.org/2000/svg';\n\n/**\n * Regex we use to convert from dash to camelcase.\n */\nconst attributesCamelCaseToDashRegex = /[A-Z]/g;\n\n/**\n * String we use to prefix all class names and ID names.\n */\nconst classNamePrefix = 'svg-chart-';\n\n/**\n * Creates a new HTML element.\n * @param {String} name Tag name for new HTML element.\n * @param {Object} [attributes] Key value pair of attributes to set.\n * @param {HTMLElement} [child] Child node to add to new HTML element.\n * @returns {HTMLElement} The new HTML element.\n */\nfunction el(name, attributes = {}, child = null) {\n    var el = document.createElementNS(ns, name);\n    Object.keys(attributes).forEach(function (key) {\n        if (attributes[key] === null) {\n            return;\n        }\n        switch (key) {\n            case 'className':\n                if (attributes[key]) {\n                    el.classList.add(...attributes[key].trim().split(' '));\n                }\n                break;\n            default:\n                el.setAttribute(key.replaceAll(attributesCamelCaseToDashRegex, \"-$&\").toLowerCase(), attributes[key]);\n                break;\n        }\n    });\n    if (child) {\n        el.appendChild(child);\n    }\n    return el;\n}\n\n/**\n * Searches up from currentElement until an element is found with the parentName. \n * @param {HTMLE} currentElement HTML element to search up from.\n * @param {String} parentName Tag name of element to search for.\n * @returns {HTMLElement|null} Found HTML element or null.\n */\nfunction parent(currentElement, parentName) {\n    var el = currentElement;\n    while (el && el.nodeName.toLowerCase() !== parentName.toLowerCase()) {\n        el = el.parentNode;\n    }\n    return el;\n}\n\n/**\n * Returns the className with prefix.\n * @param {String} className Class name to prefix.\n * @returns {String} Classname with prefix.\n */\nfunction prefixed(className) {\n    return classNamePrefix + className;\n}\n\n/**\n * Loop through items in normal (isRTL = true) or reversed (isRTL = false) order and call the callback for each item.\n * @param {Object} instance Instance of object that will be this in the callback.\n * @param {Array} items Array of items to loop through.\n * @param {Boolean} isRTL Whether it is left-to-right or right-to-left.\n * @param {Function} callback Callback function. Arguments it receives: {Any} item, {Number} index, {Array} items\n */\nfunction directionForEach(instance, items, isRTL, callback) {\n    if (isRTL) {\n        const length = items.length;\n        for (let i = 0; i < length; i++) {\n            callback.call(instance, items[i], i, items);\n        }\n    } else {\n        const maxIndex = items.length - 1;\n        for (let i = maxIndex; i >= 0; i--) {\n            callback.call(instance, items[i], maxIndex - i, items);\n        }\n    }\n}\n\n/**\n * Convert polar to cartesian point.\n * @param {Number} centerX Center x.\n * @param {Number} centerY Center y.\n * @param {Number} radius Radius of arc.\n * @param {Number} angleInDegrees Angle in degrees.\n * @returns {Object} Point.\n */\nfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = (angleInDegrees - 90) * Math.PI / 180;\n    return {\n        x: centerX + (radius * Math.cos(angleInRadians)),\n        y: centerY + (radius * Math.sin(angleInRadians))\n    };\n}\n\nexport { el, parent, prefixed, directionForEach, polarToCartesian };", "export const colors = {\n    dutchFieldColorPalette: [\"#e60049\", \"#0bb4ff\", \"#50e991\", \"#e6d800\", \"#9b19f5\", \"#ffa300\", \"#dc0ab4\", \"#b3d4ff\", \"#00bfa0\"],\n    retroMetroColorPalette: [\"#ea5545\", \"#f46a9b\", \"#ef9b20\", \"#edbf33\", \"#ede15b\", \"#bdcf32\", \"#87bc45\", \"#27aeef\", \"#b33dc6\"],\n    riverNightsColorPalette: [\"#b30000\", \"#7c1158\", \"#4421af\", \"#1a53ff\", \"#0d88e6\", \"#00b7c7\", \"#5ad45a\", \"#8be04e\", \"#ebdc78\"],\n    springPastelsColorPalette: [\"#fd7f6f\", \"#7eb0d5\", \"#b2e061\", \"#bd7ebe\", \"#ffb55a\", \"#ffee65\", \"#beb9db\", \"#fdcce5\", \"#8bd3c7\"]\n};", "import { SvgChart } from \"../svg.js\";\nimport { el, prefixed } from \"../utils.js\";\n\n/**\n * Abstract Controller class. Reponsible for drawing charts for specific chart types.\n */\nclass Controller {\n\n    static requiredConfigWithValue = {};\n\n    /**\n     * Create new Controller class.\n     * @param {SvgChart} svgChart SvgChart instance.\n     */\n    constructor(svgChart) {\n        if (new.target === Controller) {\n            throw new Error('Controller class cannot be directly instanstiated.');\n        }\n        this.svgChart = svgChart;\n        this.config = this.svgChart.config;\n    }\n\n    /**\n     * Draws chart.\n     * @param {HTMLElement} currentSerieGroupElement Group element where the chart can be appended to.\n     */\n    draw(currentSerieGroupElement) {\n        this.drawStart(currentSerieGroupElement);\n        this.config.series.forEach(function (serie, serieIndex) {\n            const serieGroup = el('g', {\n                dataSerie: serie.id,\n                className: this.svgChart.unselectedSeries[serie.id] ? prefixed('unselected') : ''\n            });\n            this.drawSerie(serie, serieIndex, serieGroup);\n            currentSerieGroupElement.appendChild(serieGroup);\n        }, this);\n        this.drawEnd(currentSerieGroupElement);\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * @param {HTMLElement} currentSerieGroupElement DOM group element.\n     */\n    drawStart(currentSerieGroupElement) {\n\n    }\n\n    /**\n     * Do things at the end of the draw for this chart.\n     * @param {HTMLElement} currentSerieGroupElement DOM group element.\n     */\n    drawEnd(currentSerieGroupElement) {\n\n    }\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup.\n     * @param {Object} serie Serie object.\n     * @param {Number} serieIndex Serie index.\n     * @param {HTMLElement} serieGroup DOM group element for this serie.\n     */\n    drawSerie(serie, serieIndex, serieGroup) {\n\n    }\n\n    /**\n     * Execute config things before global config things are done.\n     */\n    configBefore() {\n        //console.log('configBefore');\n    }\n\n    /**\n     * Execute config things after global config things are done.\n     */\n    configAfter() {\n        //console.log('configAfter');\n    }\n\n    /**\n     * Execute serie config things before global config serie things are done.\n     * @param {Object} serie - Serie object\n     */\n    configSerieBefore(serie) {\n        //console.log(`configSerieBefore for serie ${serie.id}`);\n    }\n\n    /**\n     * Execute config things after global config things are done.\n     * @param {Object} serie - Serie object\n     */\n    configSerieAfter(serie) {\n        //console.log(`configSerieAfter for serie ${serie.id}`);\n    }\n\n}\n\nexport { Controller };", "/**\n * @module\n * @ignore\n */\n\nimport { SvgChart } from \"./svg.js\";\nimport { el, prefixed, directionForEach } from \"./utils.js\";\n\n/**\n * @class\n * @ignore\n */\nclass AxisController {\n\n    #onXAxisLabelGroupClickScoped = null;\n    #onXAxisLabelGroupKeypressScoped = null;\n\n    /**\n     * \n     * @param {SvgChart} svgChart SvgChart instance.\n     */\n    constructor(svgChart) {\n        this.svgChart = svgChart;\n        this.config = svgChart.config;\n    }\n\n    addYAxisGrid() {\n        var gYAxis = el('g', {\n            className: prefixed('y-axis-group')\n        });\n        var currentYAxisValue = this.config.minValue;\n        var currentYAxisLabelValue = this.config.minValue;\n        while (currentYAxisValue <= this.config.maxValue || currentYAxisLabelValue <= this.config.maxValue) {\n            if (this.config.yAxisGrid && currentYAxisValue <= this.config.maxValue) {\n                let y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (currentYAxisValue * this.svgChart.lineAndBarValueHeight);\n                gYAxis.appendChild(el('line', {\n                    x1: this.config.padding.left,\n                    y1: y,\n                    x2: this.config.padding.left + this.svgChart.chartWidth + (this.config.xAxisGridPadding * 2),\n                    y2: y,\n                    className: prefixed('y-axis-grid-line'),\n                    stroke: this.config.yAxisGridLineColor || '',\n                    strokeWidth: this.config.yAxisGridLineWidth || '',\n                    strokeDasharray: this.config.yAxisGridLineDashArray || '',\n                }));\n            }\n            currentYAxisValue += this.config.yAxisStep;\n            if (this.config.yAxisLabels && currentYAxisLabelValue <= this.config.maxValue) {\n                let y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (currentYAxisLabelValue * this.svgChart.lineAndBarValueHeight);\n                gYAxis.appendChild(el('text', {\n                    direction: this.config.dir,\n                    x: this.svgChart.isLTR ? (this.config.padding.left - 10) : (this.config.padding.left + this.svgChart.chartWidth + 10),\n                    y: y,\n                    textAnchor: 'end',\n                    dominantBaseline: 'middle',\n                    fontFamily: this.config.fontFamily || '',\n                    fontSize: this.config.axisLabelFontSize || '',\n                    className: prefixed('y-axis-label'),\n                    fill: this.config.yAxisLabelColor || ''\n                }, document.createTextNode(currentYAxisLabelValue)));\n            }\n            currentYAxisLabelValue += this.config.yAxisLabelStep;\n        }\n        this.svgChart.svg.appendChild(gYAxis);\n    }\n\n    addXAxisLabels(columnWidth) {\n        // Draw xAxis lines\n        var currentXAxisGroupElement = el('g');\n\n        var currentXAxisLabelsGroupElement = el('g', {\n            className: prefixed('x-axis-label-group-current')\n        });\n\n        var currentXAxisGridColumnsSelectableGroupElement = (this.config.xAxisGridColumnsSelectable) ? el('g') : null;\n        directionForEach(this, this.svgChart.data.xAxis.columns, this.svgChart.isLTR, function (colValue, colIndex) {\n            if (this.config.xAxisGrid) {\n                const x = this.config.padding.left + this.config.xAxisGridPadding + (colIndex * columnWidth);\n                if (colIndex === 0 || ((colIndex + 0) % this.config.xAxisStep === 0)) {\n                    this.#addXAxisLine(currentXAxisGroupElement, x);\n                }\n                if (this.config.xAxisGridColumnsSelectable) {\n                    currentXAxisGridColumnsSelectableGroupElement.appendChild(el('rect', {\n                        x: x,\n                        y: this.config.padding.top + this.config.yAxisGridPadding,\n                        width: columnWidth,\n                        height: this.svgChart.chartHeight,\n                        className: prefixed('x-axis-grid-column-selectable'),\n                        fillOpacity: 0,\n                        fill: this.config.xAxisGridColumnsSelectableColor\n                    }));\n                }\n            }\n            if (this.config.xAxisLabels && ((colIndex + 0) % this.config.xAxisLabelStep === 0)) {\n                var xlg = el('g', {\n                    transform: `translate(${this.config.padding.left + this.config.xAxisGridPadding + (colIndex * columnWidth) + (this.config.xAxisGridColumns ? (columnWidth / 2) : 0)} ${this.svgChart.chartHeight + this.config.padding.top + (this.config.yAxisGridPadding * 2) + this.config.xAxisLabelTop})`\n                });\n                xlg.appendChild(el('text', {\n                    direction: this.config.dir,\n                    textAnchor: this.config.textAnchorXAxisLabels || 'middle',\n                    dominantBaseline: 'hanging',\n                    fontFamily: this.config.fontFamily || '',\n                    fontSize: this.config.axisLabelFontSize || '',\n                    fontWeight: 'normal',\n                    fill: this.config.xAxisLabelColor || '',\n                    tabindex: this.config.xAxisGridColumnsSelectable ? 0 : null,\n                    className: prefixed('x-axis-label') + ' ' + (this.config.xAxisGridColumnsSelectable ? prefixed('x-axis-grid-column-selectable-label') : ''),\n                    transform: `rotate(${this.config.xAxisLabelRotation})`\n                }, document.createTextNode(colValue)));\n                currentXAxisLabelsGroupElement.appendChild(xlg);\n            }\n        });\n        if (this.config.xAxisGrid && this.config.xAxisGridColumns) {\n            this.#addXAxisLine(currentXAxisGroupElement, this.config.padding.left + this.config.xAxisGridPadding + (this.svgChart.data.xAxis.columns.length * columnWidth));\n        }\n        this.svgChart.xAxisGroupElement.appendChild(currentXAxisGroupElement);\n        this.config.xAxisGridColumnsSelectable && this.svgChart.xAxisGridColumnsSelectableGroupElement.appendChild(currentXAxisGridColumnsSelectableGroupElement);\n        this.svgChart.xAxisLabelsGroupElement.appendChild(currentXAxisLabelsGroupElement);\n    }\n\n    #addXAxisLine(parent, x) {\n        parent.appendChild(el('line', {\n            x1: x,\n            y1: this.config.padding.top,\n            x2: x,\n            y2: this.svgChart.chartHeight + this.config.padding.top + (this.config.yAxisGridPadding * 2),\n            className: prefixed('x-axis-grid-line'),\n            stroke: this.config.xAxisGridLineColor || '',\n            strokeWidth: this.config.xAxisGridLineWidth || '',\n            strokeDasharray: this.config.xAxisGridLineDashArray || '',\n        }));\n    }\n\n    addXAxisTitle() {\n        var x = this.svgChart.isLTR ? (this.svgChart.width - this.config.padding.right - this.config.xAxisGridPadding) : (this.config.padding.left);\n        this.svgChart.svg.appendChild(el('text', {\n            direction: this.config.dir,\n            x: x,\n            y: this.svgChart.height - (this.config.xAxisTitleBottom !== null ? this.config.xAxisTitleBottom : this.config.paddingDefault),\n            textAnchor: 'end',\n            dominantBaseline: 'auto',\n            fontFamily: this.config.fontFamily || '',\n            fontSize: this.config.axisTitleFontSize || '',\n            fill: this.config.xAxisTitleColor || '',\n            className: prefixed('text-x-axis-title')\n        }, document.createTextNode(this.config.xAxisTitle)));\n    }\n\n    addYAxisTitle() {\n        var yAxisTitleG = el('g');\n        var x = 0;\n        if (this.svgChart.isLTR) {\n            x = this.config.yAxisTitleStart ? this.config.yAxisTitleStart : this.config.paddingDefault;\n        } else {\n            x = this.config.yAxisTitleStart ? (this.svgChart.width - this.config.yAxisTitleStart) : (this.svgChart.width - this.config.paddingDefault);\n        }\n        yAxisTitleG.setAttribute('transform', 'translate(' + x + ', ' + (this.config.padding.top + this.config.yAxisGridPadding) + ')');\n        var yAxisTitleEl = el('text', {\n            direction: this.config.dir,\n            textAnchor: 'end',\n            dominantBaseline: 'hanging',\n            fontFamily: this.config.fontFamily || '',\n            fontSize: this.config.axisTitleFontSize || '',\n            fill: this.config.yAxisTitleColor || '',\n            className: prefixed('text-y-axis-title')\n        }, document.createTextNode(this.config.yAxisTitle));\n        yAxisTitleEl.setAttribute('transform', this.svgChart.isLTR ? 'rotate(-90)' : 'rotate(90)');\n        yAxisTitleG.appendChild(yAxisTitleEl);\n        this.svgChart.svg.appendChild(yAxisTitleG);\n    }\n\n    /**\n     * Adds group for x axis labels.\n     */\n    addXAxisLabelsGroup() {\n        this.svgChart.xAxisLabelsGroupElement = el('g', {\n            className: prefixed('x-axis-label-group')\n        });\n        if (this.config.xAxisGridColumnsSelectable) {\n            if (!this.#onXAxisLabelGroupClickScoped) {\n                this.#onXAxisLabelGroupClickScoped = this.#onXAxisLabelGroupClick.bind(this);\n                this.#onXAxisLabelGroupKeypressScoped = this.#onXAxisLabelGroupKeypress.bind(this);\n            }\n            this.svgChart.addEventListener(this.svgChart.xAxisLabelsGroupElement, 'click', this.#onXAxisLabelGroupClickScoped, false);\n            this.svgChart.addEventListener(this.svgChart.xAxisLabelsGroupElement, 'keypress', this.#onXAxisLabelGroupKeypressScoped, false);\n            // Group element that wraps the rects that indicates a selected column for line and bar charts.\n            this.svgChart.xAxisGridColumnsSelectableGroupElement = this.svgChart.svg.appendChild(el('g', {\n                className: prefixed('x-axis-columns-selectable-group')\n            }));\n        }\n        this.svgChart.svg.appendChild(this.svgChart.xAxisLabelsGroupElement);\n    }\n\n    /**\n     * When a label on the x axis receives a click when focussed.\n     * @param {Event} e Event object.\n     */\n    #onXAxisLabelGroupClick(e) {\n        this.#onXAxisLabelGroupSelect(e.target);\n    }\n\n    /**\n     * Display the selected column indicator and fires the onXAxisLabelGroupSelect callback (if defined).\n     * @param {HTMLElement} label Node (x axis label) that is selected.\n     */\n    #onXAxisLabelGroupSelect(label) {\n        var textNodes = this.svgChart.xAxisLabelsGroupElement.querySelectorAll('text.' + prefixed('x-axis-grid-column-selectable-label'));\n        var rects = this.svgChart.xAxisGridColumnsSelectableGroupElement.querySelectorAll('rect.' + prefixed('x-axis-grid-column-selectable'));\n        for (var i = 0; i < textNodes.length; i++) {\n            if (textNodes[i] === label) {\n                this.svgChart.lineAndBarSelectedColumnIndex = i;\n                textNodes[i].classList.add(prefixed('selected'));\n                textNodes[i].setAttribute('font-weight', 'bold');\n                rects[i].classList.add(prefixed('selected'));\n                rects[i].setAttribute('fill-opacity', this.svgChart.config.xAxisGridSelectedColumnOpacity);\n                if (this.config.onXAxisLabelGroupSelect) {\n                    this.config.onXAxisLabelGroupSelect(this.svgChart, this.svgChart.lineAndBarSelectedColumnIndex);\n                }\n            } else {\n                textNodes[i].classList.remove(prefixed('selected'));\n                rects[i].classList.remove(prefixed('selected'));\n                rects[i].setAttribute('fill-opacity', 0);\n                textNodes[i].setAttribute('font-weight', 'normal');\n            }\n        }\n    }\n\n    #onXAxisLabelGroupKeypress(e) {\n        if (e.keyCode === 13) {\n            this.#onXAxisLabelGroupSelect(e.target);\n        }\n    }\n\n}\n\nexport { AxisController };", "/**\n * @module\n * @ignore\n */\n\nimport { AxisController } from \"./axis.js\";\nimport { SvgChart } from \"./svg.js\";\nimport { el, prefixed } from \"./utils.js\";\n\n/**\n     * Do things at the start of the draw for this chart.\n     * @param {SvgChart} svgChart SvgChart instance.\n     * @param {AxisController} axisController AxisController instance.\n     * @param {HTMLElement} currentSerieGroupElement DOM group element.\n     */\nfunction drawStart(svgChart, axisController, currentSerieGroupElement) {\n    if (svgChart.xAxisGroupElement.firstChild) {\n        svgChart.xAxisGroupElement.removeChild(svgChart.xAxisGroupElement.firstChild);\n    }\n\n    if (svgChart.config.xAxisGridColumnsSelectable) {\n        if (svgChart.xAxisGridColumnsSelectableGroupElement.firstChild) {\n            svgChart.xAxisGridColumnsSelectableGroupElement.firstChild.remove();\n        }\n    }\n\n    if (svgChart.xAxisLabelsGroupElement.firstChild) {\n        svgChart.xAxisLabelsGroupElement.removeChild(svgChart.xAxisLabelsGroupElement.firstChild);\n    }\n\n    // Note that for bar charts to display correctly, this.config.xAxisGridColumns MUST be true!\n    const columnWidth = svgChart.config.xAxisGridColumns\n        ? (svgChart.chartWidth / (svgChart.data.xAxis.columns.length))\n        : (svgChart.chartWidth / (svgChart.data.xAxis.columns.length - 1));\n    \n    svgChart.columnWidth = columnWidth;\n    \n    axisController.addXAxisLabels(columnWidth);\n}\n\n/**\n * Execute config things before global config things are done, like adding the axis lines and labels.\n * @param {SvgChart} svgChart SvgChart instance.\n * @param {AxisController} axisController AxisController instance.\n */\nfunction configBefore(svgChart, axisController) {\n\n    svgChart.lineAndBarSelectedColumnIndex = null;\n    svgChart.lineAndBarValueHeight = svgChart.chartHeight / svgChart.config.maxValue;\n    svgChart.barCountPerColumn = svgChart.config.barStacked ? 1 : 0;\n\n    if (svgChart.config.yAxisGrid) {\n        axisController.addYAxisGrid();\n    }\n\n    if (svgChart.config.xAxisTitle) {\n        axisController.addXAxisTitle();\n    }\n\n    if (svgChart.config.yAxisTitle) {\n        axisController.addYAxisTitle();\n    }\n\n    if (svgChart.config.xAxisLabels) {\n        axisController.addXAxisLabelsGroup();\n    }\n\n    svgChart.xAxisGroupElement = svgChart.svg.appendChild(el('g', {\n        className: prefixed('x-axis-group')\n    }));\n}\n\nexport { drawStart, configBefore };", "import { prefixed, directionForEach, el } from \"../utils.js\";\nimport { Controller } from \"./controller.js\";\nimport { SvgChart } from \"../svg.js\";\nimport { AxisController } from \"../axis.js\";\nimport { configBefore as barAndLineConfigBefore, drawStart as barAndLineDrawStart } from \"../bar_and_line_utils.js\";\n\n/**\n * Controller class for bar and line charts.\n * @extends Controller\n */\nclass LineController extends Controller {\n\n    #axisController = null;\n\n    /**\n     * @param {SvgChart} svgChart SvgChart instance.\n     */\n    constructor(svgChart) {\n        super(svgChart);\n        this.#axisController = new AxisController(svgChart);\n    }\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup. Overrides base class method.\n     * @param {Object} serie Serie object.\n     * @param {Number} serieIndex Serie index.\n     * @param {HTMLElement} serieGroup DOM group element for this serie.\n     */\n    drawSerie(serie, serieIndex, serieGroup) {\n        var nonNullPoints = [[]]; // Array of arrays, each array consists only of NON NULL points, used for smoot lines when not connecting NULL values and for filled lines charts when not connecting null points\n        var flatNonNullPoints = [];\n\n        directionForEach(this, this.svgChart.data.series[serie.id], this.svgChart.isLTR, function (value, valueIndex, values) {\n            var x = this.config.padding.left + this.config.xAxisGridPadding + (valueIndex * this.svgChart.columnWidth) + (this.config.xAxisGridColumns ? (this.svgChart.columnWidth / 2) : 0);\n            var y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (value * this.svgChart.lineAndBarValueHeight);\n\n            if (value === null) {\n                if (nonNullPoints[nonNullPoints.length - 1].length > 0 && valueIndex + 1 < values.length) {\n                    nonNullPoints.push([]);\n                }\n            } else {\n                nonNullPoints[nonNullPoints.length - 1].push({ x: x, y: y, value: value });\n                flatNonNullPoints.push({ x: x, y: y, value: value });\n            }\n        });\n\n        var paths = [];\n\n        if (this.config.connectNullValues) {\n\n            // Loop through flatNonNullPoints\n\n            let path = this.config.lineCurved ? this.#getCurvedPathFromPoints(flatNonNullPoints) : this.#getStraightPathFromPoints(flatNonNullPoints);\n            if (path.length > 0) {\n                paths.push(path);\n            }\n\n        } else {\n\n            // Loop through nonNullPoints\n\n            nonNullPoints.forEach(function (currentNonNullPoints) {\n                if (currentNonNullPoints.length > 0) {\n                    let path = this.config.lineCurved ? this.#getCurvedPathFromPoints(currentNonNullPoints) : this.#getStraightPathFromPoints(currentNonNullPoints);\n                    if (path.length > 0) {\n                        paths.push(path);\n                    }\n                }\n            }, this);\n\n        }\n\n        paths.forEach(function (path) {\n            serieGroup.appendChild(el('path', {\n                d: path.join(' '),\n                fill: this.config.lineChartFilled ? this.svgChart.getSerieFill(serie, serieIndex) : 'none',\n                fillOpacity: 0.4,\n                stroke: this.svgChart.getSerieStrokeColor(serie, serieIndex),\n                strokeWidth: this.config.lineWidth || '',\n                className: prefixed('line')\n            }));\n        }, this);\n\n        if (this.config.points) {\n            flatNonNullPoints.forEach(function (point) {\n                serieGroup.appendChild(el('circle', {\n                    cx: point.x,\n                    cy: point.y,\n                    r: this.config.pointRadius,\n                    zIndex: 1,\n                    fill: this.svgChart.getSeriePointColor(serie, serieIndex),\n                    stroke: this.svgChart.getSeriePointColor(serie, serieIndex),\n                    dataValue: point.value,\n                    className: prefixed('line-point'),\n                    tabindex: this.config.focusedValueShow ? 0 : null\n                }));\n            }, this);\n        }\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * @param {HTMLElement} currentSerieGroupElement DOM group element.\n     */\n    drawStart(currentSerieGroupElement) {\n        barAndLineDrawStart(this.svgChart, this.#axisController, currentSerieGroupElement);\n    }\n\n    /**\n     * Helper function to get a curved path from an array of points.\n     * @param {Array} points Array of points.\n     * @returns Array of curved path coordinates.\n     */\n    #getCurvedPathFromPoints(points) {\n        let path = ['M ' + points[0].x + ' ' + points[0].y];\n        for (var i = 0; i < points.length - 1; i++) {\n            var x_mid = (points[i].x + points[i + 1].x) / 2;\n            var y_mid = (points[i].y + points[i + 1].y) / 2;\n            var cp_x1 = (x_mid + points[i].x) / 2;\n            var cp_x2 = (x_mid + points[i + 1].x) / 2;\n            path.push(`Q ${cp_x1} ${points[i].y}, ${x_mid} ${y_mid}`);\n            path.push(`Q ${cp_x2} ${points[i + 1].y} ${points[i + 1].x} ${points[i + 1].y}`);\n        }\n        this.#closePath(path, points);\n        return path;\n    }\n\n    /**\n     * Closes path for filled line charts.\n     * @param {Array} path Array of path coordinates\n     * @param {Array} points Array of points\n     */\n    #closePath(path, points) {\n        if (this.config.lineChartFilled && points.length > 1) {\n            path.push(`L ${points[points.length - 1].x} ${this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight}`);\n            path.push(`L ${points[0].x} ${this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight}`);\n            path.push(`L ${points[0].x} ${points[0].y}`);\n            path.push('Z');\n        }\n\n\n    }\n\n    /**\n     * Helper function to get a straight path for line charts.\n     * @param {Array} points Array of points.\n     * @returns Array of path coordinates.\n     */\n    #getStraightPathFromPoints(points) {\n        let path = [];\n        points.forEach(function (point, pointIndex) {\n            if (pointIndex === 0) {\n                path.push(`M ${point.x} ${point.y}`);\n            } else {\n                path.push(`L ${point.x} ${point.y}`);\n            }\n        });\n        this.#closePath(path, points);\n        return path;\n    }\n\n    /**\n     * Execute config things before global config things are done.\n     */\n    configBefore() {\n        super.configBefore();\n        barAndLineConfigBefore(this.svgChart, this.#axisController);\n    }\n\n}\n\nexport { LineController };\n\n\n\n\n\n\n", "import { prefixed, directionForEach, el } from \"../utils.js\";\nimport { Controller } from \"./controller.js\";\nimport { SvgChart } from \"../svg.js\";\nimport { AxisController } from \"../axis.js\";\nimport { configBefore as barAndLineConfigBefore, drawStart as barAndLineDrawStart } from \"../bar_and_line_utils.js\";\n\n/**\n * Controller class for bar and line charts.\n * @extends Controller\n */\nclass BarController extends Controller {\n\n    #axisController = null;\n\n    /**\n     * @param {SvgChart} svgChart SvgChart instance.\n     */\n    constructor(svgChart) {\n        super(svgChart);\n        this.#axisController = new AxisController(svgChart);\n    }\n\n    /**\n     * Required config property values for this type of chart.\n     */\n    static requiredConfigWithValue = {\n        xAxisGridColumns: true\n    };\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup.\n     * @param {Object} serie Serie object.\n     * @param {Number} serieIndex Serie index.\n     * @param {HTMLElement} serieGroup DOM group element for this serie.\n     */\n    drawSerie(serie, serieIndex, serieGroup) {\n        directionForEach(this, this.svgChart.data.series[serie.id], this.svgChart.isLTR, function (value, valueIndex) {\n\n            var x = null;\n            var y = null;\n            var height = null;\n            if (this.config.barStacked) {\n                if (!this.stackedBarValues[valueIndex]) {\n                    this.stackedBarValues[valueIndex] = this.config.minValue\n                };\n                x = this.config.padding.left + this.config.xAxisGridPadding + (valueIndex * this.svgChart.columnWidth) + this.config.barSpacing;\n                y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (value * this.svgChart.lineAndBarValueHeight) - (this.stackedBarValues[valueIndex] * this.svgChart.lineAndBarValueHeight);\n                height = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (value * this.svgChart.lineAndBarValueHeight);\n                this.stackedBarValues[valueIndex] = this.stackedBarValues[valueIndex] += value;\n            } else {\n                x = this.config.padding.left + this.config.xAxisGridPadding + (valueIndex * this.svgChart.columnWidth) + (this.svgChart.barWidth * this.currentBarIndex) + (this.config.barSpacing * (this.currentBarIndex + 1));\n                if (isNaN(x)) {\n                    console.log(this.currentBarIndex);\n                }\n                height = y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (value * this.svgChart.lineAndBarValueHeight);\n            }\n\n            serieGroup.appendChild(el('rect', {\n                x: x,\n                y: y,\n                width: this.svgChart.barWidth,\n                height: this.svgChart.chartHeight + this.config.padding.top + this.config.yAxisGridPadding - height,\n                fill: this.svgChart.getSerieFill(serie, serieIndex),\n                className: prefixed('bar'),\n                fillOpacity: this.config.barFillOpacity || '',\n                strokeWidth: this.config.barStrokeWidth || 0,\n                stroke: this.svgChart.getSerieStrokeColor(serie, serieIndex),\n                dataValue: value,\n                tabindex: this.config.focusedValueShow ? 0 : null\n            }));\n\n        });\n\n        this.currentBarIndex += 1;\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * @param {HTMLElement} currentSerieGroupElement DOM group element.\n     */\n    drawStart(currentSerieGroupElement) {\n        \n        barAndLineDrawStart(this.svgChart, this.#axisController, currentSerieGroupElement);\n        const barWidth = (this.svgChart.columnWidth - (this.config.barSpacing * (this.svgChart.barCountPerColumn + 1))) / (this.svgChart.barCountPerColumn || 1);\n\n        this.svgChart.barWidth = barWidth;\n\n        this.currentBarIndex = 0;\n        this.stackedBarValues = []; // value index => current value (steeds optellen)\n    }\n\n    /**\n     * Execute config things before global config things are done.\n     */\n    configBefore() {\n        super.configBefore();\n        barAndLineConfigBefore(this.svgChart, this.#axisController);\n    }\n\n    /**\n     * Execute serie config things before global config serie things are done.\n     * @param {Object} serie - Serie object\n     */\n    configSerieBefore(serie) {\n        super.configSerieBefore(serie);\n        if (!this.config.barStacked && (serie.type === SvgChart.chartTypes.bar || this.config.chartType === SvgChart.chartTypes.bar)) {\n            this.svgChart.barCountPerColumn += 1;\n        }\n    }\n\n}\n\nexport { BarController };\n\n\n\n\n\n\n", "import { Controller } from \"./controller.js\";\nimport { LineController } from \"./line_chart_controller.js\";\nimport { BarController } from \"./bar_chart_controller.js\";\nimport { SvgChart } from \"../svg.js\";\n\n/**\n * Controller class for bar and line charts.\n * @extends Controller\n */\nclass BarAndLineController extends Controller {\n\n    #lineChartController = null;\n    #barChartController = null;\n\n    /**\n     * @param {SvgChart} svgChart SvgChart instance.\n     */\n    constructor(svgChart) {\n        super(svgChart);\n        this.#barChartController = new BarController(svgChart);\n        this.#lineChartController = new LineController(svgChart);\n    }\n\n    static requiredConfigWithValue = {\n        xAxisGridColumns: true\n    };\n\n    drawSerie(serie, serieIndex, serieGroup) {\n        const serieType = serie.type || (this.config.chartType === SvgChart.chartTypes.lineAndBar ? SvgChart.chartTypes.line : this.config.chartType);\n        switch (serieType) {\n            case SvgChart.chartTypes.line:\n                this.#lineChartController.drawSerie(serie, serieIndex, serieGroup);\n                break;\n            case SvgChart.chartTypes.bar:\n                this.#barChartController.drawSerie(serie, serieIndex, serieGroup);\n                break;\n        }\n    }\n\n    drawStart(currentSerieGroupElement) {\n        this.#barChartController.drawStart(currentSerieGroupElement);\n    }\n\n    configBefore() {\n        this.#barChartController.configBefore();\n    }\n\n    configSerieBefore(serie) {\n        this.#barChartController.configSerieBefore(serie);\n    }\n\n}\n\nexport { BarAndLineController };\n\n\n\n\n\n\n", "/**\n * @module\n * @ignore\n */\n\nimport { el, prefixed } from \"./utils.js\";\nimport { SvgChart } from \"./svg.js\";\n\n/**\n * \n * @param {SvgChart} svgChart SvgChart instance.\n * @param {HTMLElement} currentSerieGroupElement Group node.\n * @param {Function} describeArcCallback Callback for gettting the path of the pie or donut.\n */\nfunction draw(svgChart, currentSerieGroupElement, describeArcCallback) {\n\n    var radius = svgChart.chartHeight / 2;\n    var centerX = svgChart.width / 2;\n    var centerY = svgChart.chartHeight / 2 + svgChart.config.padding.top;\n\n    var total = 0;\n    for (let key in svgChart.data.series) {\n        total += svgChart.data.series[key];\n    }\n\n    var totalToDegree = 360 / total;\n    var currentTotal = 0;\n\n    svgChart.config.series.forEach(function (serie, serieIndex) {\n        var serieGroup = el('g', {\n            dataSerie: serie.id,\n            className: svgChart.unselectedSeries[serie.id] ? prefixed('unselected') : ''\n        });\n\n        const value = svgChart.data.series[serie.id];\n\n        var startAngle = currentTotal * totalToDegree;\n        currentTotal += value;\n        var endAngle = currentTotal * totalToDegree;\n        var path = describeArcCallback(centerX, centerY, radius, startAngle, endAngle);\n        serieGroup.appendChild(el('path', {\n            d: path.join(' '),\n            fill: svgChart.getSerieFill(serie, serieIndex),\n            fillOpacity: svgChart.config.pieFillOpacity || 1,\n            className: prefixed('pie-piece'),\n            tabindex: 0,\n            stroke: svgChart.config[svgChart.config.chartType + 'Stroke'],\n            strokeWidth: svgChart.config[svgChart.config.chartType + 'StrokeWidth'],\n            dataValue: value\n        }));\n\n        currentSerieGroupElement.appendChild(serieGroup);\n\n    });\n\n}\n\nexport { draw };", "import { polarToCartesian } from \"../utils.js\";\nimport { Controller } from \"./controller.js\";\nimport { draw as drawPieOrDonut } from \"../donut_or_pie_utils.js\";\n\n/**\n * Class for displaying pie and donut charts.\n * @extends Controller\n */\nclass DonutController extends Controller {\n\n    /**\n     * \n     * @param {HTMLElement} currentSerieGroupElement Current serie group element.\n     */\n    draw(currentSerieGroupElement) {\n        const donutWidth = this.config.donutWidth || this.svgChart.chartHeight / 4;\n        drawPieOrDonut(this.svgChart, currentSerieGroupElement, function(centerX, centerY, radius, startAngle, endAngle) {\n            return describeArcDonut(centerX, centerY, radius - donutWidth, donutWidth, startAngle, endAngle);\n        });\n    }\n}\n\n/**\n * Get path for donut.\n * @param {Number} x X point.\n * @param {Number} y Y point.\n * @param {Number} radius Radius of arc.\n * @param {Number} spread Spread of the donut.\n * @param {Number} startAngle Start angle.\n * @param {Number} endAngle End angle.\n * @returns {Array} Array of path coordinates.\n */\nfunction describeArcDonut(x, y, radius, spread, startAngle, endAngle) {\n    var innerStart = polarToCartesian(x, y, radius, endAngle);\n    var innerEnd = polarToCartesian(x, y, radius, startAngle);\n    var outerStart = polarToCartesian(x, y, radius + spread, endAngle);\n    var outerEnd = polarToCartesian(x, y, radius + spread, startAngle);\n\n    var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n    var d = [\n        \"M\", outerStart.x, outerStart.y,\n        \"A\", radius + spread, radius + spread, 0, largeArcFlag, 0, outerEnd.x, outerEnd.y,\n        \"L\", innerEnd.x, innerEnd.y,\n        \"A\", radius, radius, 0, largeArcFlag, 1, innerStart.x, innerStart.y,\n        \"L\", outerStart.x, outerStart.y, \"Z\"\n    ];\n\n    return d;\n}\n\nexport { DonutController }; ", "import { polarToCartesian } from \"../utils.js\";\nimport { Controller } from \"./controller.js\";\nimport { draw as drawPieOrDonut } from \"../donut_or_pie_utils.js\";\n\n/**\n * Class for displaying pie and donut charts.\n * @extends Controller\n */\nclass PieController extends Controller {\n\n    /**\n     * Draws chart.\n     * @param {HTMLElement} currentSerieGroupElement Current serie group element.\n     */\n    draw(currentSerieGroupElement) {\n        drawPieOrDonut(this.svgChart, currentSerieGroupElement, function(centerX, centerY, radius, startAngle, endAngle) {\n            return describeArcPie(centerX, centerY, radius, startAngle, endAngle);\n        });\n    }\n}\n\n/**\n * Get path for pie.\n * @param {Number} x X point.\n * @param {Number} y Y point.\n * @param {Number} radius Radius of arc.\n * @param {Number} startAngle Start angle.\n * @param {Number} endAngle End angle.\n * @returns {Array} Array of path coordinates.\n */\nfunction describeArcPie(x, y, radius, startAngle, endAngle) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n\n    var arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n    var d = [\n        \"M\", start.x, start.y,\n        \"A\", radius, radius, 0, arcSweep, 0, end.x, end.y,\n        \"L\", x, y,\n        \"L\", start.x, start.y\n    ];\n\n    return d;\n}\n\nexport { PieController }; ", "/**\n * SvgChart config class.\n */\nclass SvgChartConfig {\n\n    /**\n     * @prop {String} dir - Language direction.\n     * @default ltr\n     */\n    dir = 'ltr';\n\n    /**\n     * @prop {String} chartType - Chart type. Required. Possible values: line, bar, lineAndBar, pie, donut.\n     */\n    chartType = null;\n\n    /**\n     * @prop {Object} padding - Padding object.\n     * @example {start: 40, end: 20, top: 100, bottom: 40}\n     */\n    padding = {\n        start: 40,\n        end: 20,\n        top: 100,\n        bottom: 40\n    };\n\n    /**\n     * @prop {Number} paddingDefault - Default padding for space between elements.\n     * @default 20\n     */\n    paddingDefault = 20;\n\n    /**\n     * @prop {Number} legendWidth - Width of legend squares or circles.\n     * @default 10\n     */\n    legendWidth = 10;\n\n    /**\n     * @prop {Boolean} focusedValueShow - Whether the value box should be displayed when an element has focus.\n     * @default true\n     */\n    focusedValueShow = true;\n\n    /**\n     * @prop {String} focusedValueFill - Fill color of focused value box.\n     * @default black\n     */\n    focusedValueFill = 'black';\n\n    /**\n     * @prop {String} focusedValueColor - Font color of focused value box.\n     * @default white\n     */\n    focusedValueColor = 'white';\n\n    /**\n     * @prop {Number} focusedValuePadding - Padding of focused value box.\n     * @default 6\n     */\n    focusedValuePadding = 6;\n\n    /**\n     * @prop {Function} drawOnConfig - Draw function to execute in the config phase. It receives a SvgChart and HTMLElement parameter.\n     * @example function(svgChart, groupNode) {\n     *     groupNode.appendChild(svgChart.el('rect', {\n     *         x: 10,\n     *         y: 10\n     *     }));\n     * }\n     */\n    drawOnConfig = null;\n\n    /**\n     * @prop {Function} drawOnData - Draw function to execute in the chart phase. It receives a SvgChart and HTMLElement parameter.\n     * @example function(svgChart, groupNode) {\n     *     groupNode.appendChild(svgChart.el('rect', {\n     *         x: 10,\n     *         y: 10\n     *     }));\n     * }\n     */\n    drawOnData = null;\n\n    /**\n     * @prop {Boolean} transition - Whether the chart elements should be faded in or nor.\n     * @default true\n     */\n    transition = true;\n\n    /**\n     * @prop {String} backgroundColor - Background color of the SVG element.\n     * @default white\n     */\n    backgroundColor = 'white';\n\n    /**\n     * @prop {String} fontFamily - Font fanily for all text elements.\n     * @default sans-serif\n     */\n    fontFamily = 'sans-serif';\n\n    /**\n     * @prop {String|Number} titleFontSize - Fontsize for the title.\n     * @default normal\n     * \n     */\n    titleFontSize = 'normal';\n\n    /**\n     * @prop {String} titleColor - Font color of title.\n     * @default black\n     */\n    titleColor = 'black';\n\n    /**\n     * @prop {String} titleHorizontalPosition - Horizontal position of title. Can be one of: center, start, end.\n     * @default center\n     */\n    titleHorizontalPosition = 'center'; // center (default); start; end\n\n    /**\n     * @prop {String} titleVerticalPosition - Vertical position of title. Can be one of: top, bottom, center.\n     * @default top\n     */\n    titleVerticalPosition = 'top'; // top (default); bottom; center\n\n    /**\n     * @prop {Number} maxValue - Maximum value. Required for charts with Y-axes.\n     */\n    maxValue = null;\n\n    /**\n     * @prop {Number} minValue - Minumum value of Y axis. Required for charts with Y-axes.\n     */\n    minValue = null;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // X Axis\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @prop {String} axisTitleFontSize - Font size of axes titles.\n     * @default smaller\n     */\n    axisTitleFontSize = 'smaller';\n\n    /**\n     * @prop {String} axisLabelFontSize - Font size of axes labels.\n     * @default small\n     */\n    axisLabelFontSize = 'small';\n\n    // X axis\n    /**\n     * @prop {String} xAxisTitle - X axis title.\n     */\n    xAxisTitle = null;\n\n    /**\n     * @prop {Number} xAxisTitleBottom - If this is a number X, than the x axis title will be positioned X pixels from the bottom.\n     * If this is null, then the title will be positioned paddingDefault pixesl from the bottom.\n     */\n    xAxisTitleBottom = null;\n\n    /**\n     * @prop {Number} xAxisGridLineWidth - Line width of the x axis grid.\n     * @default 1\n     */\n    xAxisGridLineWidth = 1;\n\n    /**\n     * @prop {String} xAxisGridLineColor - Color of x axis grid lines.\n     * @default #C0C0C0\n     */\n    xAxisGridLineColor = '#C0C0C0';\n\n    /**\n     * @prop {String} xAxisGridLineDashArray - Stroke dash array value for the x axis grid lines.\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray}.\n     * @default 1 1\n     */\n    xAxisGridLineDashArray = '1 1';\n\n    /**\n     * @prop {String} xAxisLabelColor - Font color of xaxis labels.\n     * @default #A0A0A0\n     */\n    xAxisLabelColor = '#A0A0A0';\n\n    /**\n     * @prop {String} xAxisTitleColor - Font color of x axis title.\n     * @default #A0A0A0\n     */\n    xAxisTitleColor = '#A0A0A0';\n\n    /**\n     * @prop {Boolean} xAxisGrid - Whether the xaxis grid should be displayed.\n     * @default true\n     */\n    xAxisGrid = true;\n\n    /**\n     * @prop {Number} xAxisGridPadding - Outside padding for x axis grid.\n     * @default 0\n     */\n    xAxisGridPadding = 0;\n\n    /**\n     * @prop {Boolean} xAxisLabels - Whether x axis labels should be displayed.\n     * @default true\n     */\n    xAxisLabels = true;\n\n    /**\n     * @prop {Boolean} xAxisGridColumns - Whether the x axis labels should be below (false)\n     * or between (true) the x axis grid lines. For bar charts this will always be set to true.\n     * @default false\n     */\n    xAxisGridColumns = false;\n\n    /**\n     * @prop {Boolean} xAxisGridColumnsSelectable - Whether xAxisGridColumns should be selectable.\n     * If this is true, the x axis labels can be clicked and selected.\n     * @default false\n     */\n    xAxisGridColumnsSelectable = false;\n\n    /**\n     * @prop {Number} xAxisGridSelectedColumnOpacity - Opacity value for the selected xAxisGridColumn.\n     * @default 0.2\n     */\n    xAxisGridSelectedColumnOpacity = 0.2;\n\n    /**\n     * @prop {String} xAxisGridColumnsSelectableColor - Background color for a selected xAxisGridColumn.\n     * @default black\n     */\n    xAxisGridColumnsSelectableColor = 'black';\n\n    /**\n     * @prop {String} textAnchorXAxisLabels - The text anchor value for x axis labels.\n     * For example if you want vertical labels that should be aligned to the x axis, you can set this to 'start'.\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor}.\n     * @default middle\n     */\n    textAnchorXAxisLabels = 'middle';\n\n    /**\n     * @prop {Number} xAxisLabelTop - Number of pixels that the x axsis labels will be positioned from the bottom x axis grid line.\n     * @default 10\n     */\n    xAxisLabelTop = 10;\n\n    /**\n     * @prop {Number} rotate - degrees for the x axis labels.\n     * @default 0\n     */\n    xAxisLabelRotation = 0;\n\n    /**\n     * @prop {Number} xAxisStep - Steps between x axis grid lines.\n     * @default 1\n     */\n    xAxisStep = 1;\n\n    /**\n     * @prop {Number} xAxisLabelStep - Steps between x axis labels.\n     * @default 1\n     */\n    xAxisLabelStep = 1;\n\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Y Axis\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @prop {String} yAxisTitle - Y axis title.\n     */\n    yAxisTitle = null;\n\n    /**\n     * @prop {Number} yAxisTitleStart - Number of pixels the y axis labels should be positioned from the start. If this is null, this will be defaultPadding pixels.\n     */\n    yAxisTitleStart = null; // if this is <> null; then this will be the X start position of the Y axis title.\n\n    /**\n     * @prop {Number} yAxisGridLineWidth - Line width of the y axis grid.\n     * @default 1\n     */\n    yAxisGridLineWidth = 1;\n\n    /**\n     * @prop {String} yAxisGridLineColor - Color of y axis grid lines.\n     * @default #C0C0C0\n     */\n    yAxisGridLineColor = '#C0C0C0';\n\n    /**\n     * @prop {String} yAxisGridLineDashArray - Stroke dash array value for the y axis grid lines.\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray}.\n     * @default 1 1\n     */\n    yAxisGridLineDashArray = '1 1';\n\n    /**\n     * @prop {String} yAxisLabelColor - Font color of y axis labels.\n     * @default #A0A0A0\n     */\n    yAxisLabelColor = '#A0A0A0';\n\n    /**\n     * @prop {String} yAxisTitleColor - Font color of y axis title.\n     * @default #A0A0A0\n     */\n    yAxisTitleColor = '#A0A0A0';\n\n    /**\n     * @prop {Number} yAxisStep - Steps between y axis grid lines.\n     * @default 10\n     */\n    yAxisStep = 10; // how many steps between y axis grid lines\n\n    /**\n     * @prop {Number} yAxisLabelStep - Steps between y axis labels.\n     * @default 10\n     */\n    yAxisLabelStep = 10; // how many steps between labels y axis\n\n\n    //yAxis = true;\n\n    /**\n     * @prop {Boolean} yAxisGrid - Whether the y axis grid should be displayed.\n     * @default true\n     */\n    yAxisGrid = true;\n\n    /**\n     * @prop {Boolean} yAxisLabels - Whether y axis labels should be displayed.\n     * @default true\n     */\n    yAxisLabels = true;\n\n    /**\n     * @prop {Number} yAxisGridPadding - Outside padding for y axis grid.\n     * @default 0\n     */\n    yAxisGridPadding = 0;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Legend\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @prop {String} legendFontSize - Font size for legend labels.\n     * @default smaller\n     */\n    legendFontSize = 'smaller';\n\n    /**\n     * @prop {String} legendColor - Font color of legend labels.\n     * @default black\n     */\n    legendColor = 'black';\n\n    /**\n     * @prop {Boolean} legendCircle - Whether legends should be squares (false) or circles (true)\n     * @default false\n     */\n    legendCircle = false;\n\n    /**\n     * @prop {Boolean} legend - Whether legends should be displayed.\n     * @default true\n     */\n    legend = true;\n\n    /**\n     * @prop {Boolean} legendSelect - Whether clicking on a legend hides and shows a the serie.\n     * @default true\n     */\n    legendSelect = true;\n\n    /**\n     * @prop {String} legendPosition - Position of legend. Possible values: bottom, top, end.\n     * @default top\n     */\n    legendPosition = 'top';\n\n    /**\n     * @prop {Number} legendBottom - If not null, number of pixels the legend should be positioned from the bottom. Otherwise a default number of pixels will be used.\n     */\n    legendBottom = null;\n\n    /**\n     * @prop {Number} legendTop - If not null, number of pixels the legend should be positioned from the top. Otherwise a default number of pixels will be used.\n     */\n    legendTop = null;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Line charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    /**\n     * @prop {Number} lineWidth - Width of line for line charts.\n     * @default 2\n     */\n    lineWidth = 2;\n\n    /**\n     * @prop {Number} pointRadius - Radius of line points for line charts.\n     * @default 2\n     */\n    pointRadius = 2;\n\n    /**\n     * @prop {Boolean} connectNullValues - Whether null values should be connected or not.\n     * @default false\n     */\n    connectNullValues = false;\n\n    /**\n     * @prop {Boolean} lineCurved - Whether lines should be curved or not.\n     * @default true\n     */\n    lineCurved = true;\n\n    /**\n     * @prop {Boolean} lineChartFilled - Whether line charts should be filled or not.\n     * @default false\n     */\n    lineChartFilled = false;\n\n    /**\n     * @prop {Boolean} points - Whether the lines should display points or not.\n     * @default true\n     */\n    points = true;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Bar charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    \n    /**\n     * @prop {Number} barFillOpacity - Opacity of bars.\n     * @default 0.5\n     */\n    barFillOpacity = 0.5;\n\n    /**\n     * @prop {Number} barSpacing - Spacing in pixels between bars.\n     * @default 4\n     */\n    barSpacing = 4;\n\n    /**\n     * @prop {Number} barStrokeWidth - Width of bar border.\n     * @default 1\n     */\n    barStrokeWidth = 1;\n\n    /**\n     * @prop {Boolean} barStacked - Whether bars should be stacked.\n     * @default false\n     */\n    barStacked = false;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Pie and donut charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @prop {Number} pieFillOpacity - Opacity of pie and donut charts.\n     * @default 0.6\n     */\n    pieFillOpacity = 0.6;\n\n    /**\n     * @prop {Number} donutWidth - With of donuts. Of not given a default value is used.\n     */\n    donutWidth = null;\n\n    /**\n     * @prop {String} pieStroke - Stroke color for pie charts.\n     * @default white\n     */\n    pieStroke = 'white';\n\n    /**\n     * @prop {Number} pieStrokeWidth - Width of stroke for pie charts. If this is 0, no stroke is painted.\n     * @default 2\n     */\n    pieStrokeWidth = 2;\n\n    /**\n     * @prop {String} donutStroke - Stroke color for donut charts.\n     * @default white\n     */\n    donutStroke = 'white';\n\n    /**\n     * @prop {Number} donutStrokeWidth - Width of stroke for donut charts. If this is 0, no stroke is painted.\n     * @default 2\n     */\n    donutStrokeWidth = 2;\n};\n\nexport { SvgChartConfig };", "import { el, parent, prefixed } from \"./utils.js\";\nimport { colors } from \"./colors.js\";\nimport { LineController } from \"./charts/line_chart_controller.js\";\nimport { BarController } from \"./charts/bar_chart_controller.js\";\nimport { BarAndLineController } from \"./charts/bar_and_line_chart_controller.js\";\nimport { DonutController } from \"./charts/donut_chart_controller.js\";\nimport { PieController } from \"./charts/pie_chart_controller.js\";\nimport { SvgChartConfig } from \"./config.js\";\n\n\nclass SvgChart {\n\n    static #cssAdded = false;\n    static colorPalettes = colors;\n    static #activeColorPalette = colors.dutchFieldColorPalette;\n\n    static chartTypes = {\n        line: 'line',\n        bar: 'bar',\n        pie: 'pie',\n        donut: 'donut',\n        lineAndBar: 'lineAndBar'\n    };\n\n    static chartTypeControllers = {\n        line: LineController,\n        bar: BarController,\n        lineAndBar: BarAndLineController,\n        pie: PieController,\n        donut: DonutController\n    };\n\n    #onLegendClickScoped = null;\n    #onLegendKeypressScoped = null;\n    #onSerieGroupTransitionendScoped = null;\n    #onSerieGroupFocusScoped = null;\n    #onSerieGroupBlurScoped = null;\n\n    /**\n     * Set a color palette for all chart instances.\n     * @param {Array} colors Array of colors.\n     */\n    static setActiveColorPalette(colors) {\n        SvgChart.#activeColorPalette = colors;\n    }\n\n    /**\n     * Constructor - create a new chart instance.\n     * @param {HTMLElement} parent Parent DOM node the SVG element will be attached to.\n     * @param {SvgChartConfig} config Configuration object.\n     */\n    constructor(parent, config) {\n\n        if (!SvgChart.#cssAdded) {\n            SvgChart.#cssAdded = true;\n            // TODO: split between chart types.\n            const cssRules = [\n                '.' + prefixed('line-point') + ', g.' + prefixed('legend-group') + ' g, .' + prefixed('x-axis-grid-column-selectable-label') + ' { cursor: pointer; }',\n                '.' + prefixed('line-point') + ':hover, circle.' + prefixed('line-point') + ':focus { stroke-width: 6; outline: none; }',\n                '#' + prefixed('serie-group') + ' g { transition: opacity 0.6s; }',\n                '#' + prefixed('serie-group') + ' g.' + prefixed('unselected') + ' { opacity: 0; }',\n                '#' + prefixed('serie-group-current') + ' { transition: opacity 1s; opacity: 1; }',\n                '#' + prefixed('serie-group-current') + '.' + prefixed('unattached') + ' { opacity: 0; }',\n                'g.' + prefixed('legend-group') + ' g.' + prefixed('unselected') + ' { opacity: 0.4; }',\n                'rect.' + prefixed('bar') + ':hover, path.' + prefixed('pie-piece') + ':hover { fill-opacity: 0.7; }',\n                //'path.' + prefixed('pie-piece') + ':focus, rect.' + prefixed('bar') + ':focus { outline: none; stroke-width:1; stroke:white; fill-opacity:1; }'\n                'path.' + prefixed('pie-piece') + ':focus, rect.' + prefixed('bar') + ':focus { outline: none; fill-opacity:1; }'\n            ];\n            parent.ownerDocument.head.appendChild(document.createElement(\"style\")).innerHTML = cssRules.join(\"\\n\");\n        }\n\n        const parentRect = parent.getBoundingClientRect();\n\n        this.width = parentRect.width;\n        this.height = parentRect.height;\n\n        this.svg = el('svg', {\n            width: this.width,\n            height: this.height\n        });\n        parent.appendChild(this.svg);\n\n        this.setConfig(config);\n    }\n\n    /**\n     * Set the configuration for this chart instance.\n     * @param {Object} config Configuration object.\n     */\n    setConfig(config) {\n\n        const newConfig = new SvgChartConfig();\n\n        this.config = Object.assign({}, newConfig, config);\n        this.config.padding = Object.assign({}, newConfig.padding, this.config.padding);\n\n        this.isLTR = this.config.dir === 'ltr';\n\n        this.config = Object.assign(this.config, SvgChart.chartTypeControllers[this.config.chartType].requiredConfigWithValue);\n\n        if (this.isLTR) {\n            this.config.padding.left = this.config.padding.start;\n            this.config.padding.right = this.config.padding.end;\n        } else {\n            this.config.padding.left = this.config.padding.end;\n            this.config.padding.right = this.config.padding.start;\n        }\n\n        this.controller = new SvgChart.chartTypeControllers[config.chartType](this);\n\n        this.svg.setAttribute('direction', this.config.dir);\n\n        // First remove event listener from a previous config if they exist.\n        if (this._listenersToRemoveAfterConfigChange && this._listenersToRemoveAfterConfigChange.length) {\n            this._listenersToRemoveAfterConfigChange.forEach(function (item) {\n                item[0].removeEventListener(item[1], item[2], item[3]);\n            });\n        }\n        this._listenersToRemoveAfterConfigChange = [];\n\n        // And then remove child nodes from a previous config if they exist.\n        while (this.svg.childNodes.length) {\n            this.svg.firstChild.remove();\n        }\n\n        this.data = null;\n        this.unselectedSeries = {};\n\n        this.chartWidth = this.width - this.config.padding.start - this.config.padding.end - (this.config.xAxisGridPadding * 2);\n        this.chartHeight = this.height - this.config.padding.top - this.config.padding.bottom - (this.config.yAxisGridPadding * 2);\n\n        if (this.config.backgroundColor) {\n            this.svg.style.backgroundColor = this.config.backgroundColor;\n        }\n        this.defsElement = el('defs');\n        this.svg.appendChild(this.defsElement);\n\n        if (!this.#onSerieGroupTransitionendScoped) {\n            this.#onSerieGroupTransitionendScoped = this.#onSerieGroupTransitionend.bind(this);\n        }\n\n        if (this.config.drawOnConfig) {\n            this.drawOnConfigGroup = el('g', {\n                className: prefixed('draw-on-config-group')\n            });\n            this.svg.appendChild(this.drawOnConfigGroup);\n        }\n\n        if (this.config.title) {\n            this.#addTitle();\n        }\n\n        if (this.config.legend) {\n            this.#addLegend();\n        }\n\n        this.controller.configBefore();\n\n        this.config.series.forEach(function (serie) {\n\n            this.controller.configSerieBefore(serie);\n\n            if (serie.fillGradient) {\n                var lg = el('linearGradient', {\n                    id: serie.id + '-gradient',\n                    x1: 0,\n                    x2: 0,\n                    y1: 0,\n                    y2: 1\n                });\n                lg.appendChild(el('stop', {\n                    offset: \"0%\",\n                    stopColor: serie.fillGradient[0]\n                }));\n                lg.appendChild(el('stop', {\n                    offset: \"100%\",\n                    stopColor: serie.fillGradient[1]\n                }));\n                this.defsElement.appendChild(lg);\n            }\n\n            this.controller.configSerieAfter(serie);\n\n        }, this);\n\n        if (this.config.drawOnConfig) {\n            this.config.drawOnConfig(this, this.drawOnConfigGroup);\n        }\n\n        if (this.config.drawOnData) {\n            this.drawOnDataGroup = el('g', {\n                className: prefixed('draw-on-data-group')\n            });\n            this.svg.appendChild(this.drawOnDataGroup);\n        }\n\n        this.#addSerieGroup();\n\n        this.controller.configAfter();\n\n    }\n\n    /**\n     * Writing the charts.\n     * @param {Object} data Data object.\n     */\n    chart(data = null) {\n\n        if (data !== null) {\n            this.data = data;\n        }\n\n        const currentSerieGroupElement = this.#dataBefore();\n\n        this.controller.draw(currentSerieGroupElement);\n\n        this.#dataAfter(currentSerieGroupElement);\n\n        if (this.config.drawOnData) {\n            this.config.drawOnData(this, this.drawOnDataGroup);\n        }\n\n    }\n\n    // setSelectedIndex(index) {\n    //     var textNodes = this.xAxisLabelsGroupElement.querySelectorAll('text.' + prefixed('x-axis-grid-column-selectable-label'));\n    //     return this.#onXAxisLabelGroupSelect(textNodes.item(index));\n    // }\n\n    /**\n     * Saves chart as PNG file.\n     * @param {String} filename Filename.\n     */\n    saveAsPng(filename) {\n        var rect = this.svg.getBoundingClientRect();\n        var canvas = document.createElement('canvas');\n        canvas.setAttribute('width', rect.width);\n        canvas.setAttribute('height', rect.height);\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = this.svg.style.backgroundColor;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        var img = new Image();\n        var data = '<svg xmlns=\"http://www.w3.org/2000/svg\">' + this.svg.innerHTML + '</svg>';\n        var parser = new DOMParser();\n        var result = parser.parseFromString(data, 'text/xml');\n        var inlineSVG = result.getElementsByTagName(\"svg\")[0];\n        inlineSVG.setAttribute('width', rect.width);\n        inlineSVG.setAttribute('height', rect.height);\n        var svg64 = btoa(new XMLSerializer().serializeToString(inlineSVG));\n        var image64 = 'data:image/svg+xml;base64,' + svg64;\n        img.onload = function () {\n            ctx.drawImage(img, 0, 0, rect.width, rect.height);\n            window.URL.revokeObjectURL(image64);\n            var png_img = canvas.toDataURL(\"image/png\");\n            const createEl = document.createElement('a');\n            createEl.href = png_img;\n            createEl.download = filename;\n            createEl.click();\n            createEl.remove();\n        }\n        img.src = image64;\n    }\n\n    #addSerieGroup() {\n        this.serieGroupElement = el('g', {\n            id: prefixed('serie-group')\n        });\n        this.svg.appendChild(this.serieGroupElement);\n        this.addEventListener(this.serieGroupElement, 'transitionend', this.#onSerieGroupTransitionendScoped, false);\n\n        if (this.config.focusedValueShow) {\n            if (!this.#onSerieGroupFocusScoped) {\n                this.#onSerieGroupFocusScoped = this.#onSerieGroupFocus.bind(this);\n                this.#onSerieGroupBlurScoped = this.#onSerieGroupBlur.bind(this);\n            }\n\n            this.addEventListener(this.serieGroupElement, 'focus', this.#onSerieGroupFocusScoped, true);\n            this.addEventListener(this.serieGroupElement, 'blur', this.#onSerieGroupBlurScoped, true);\n\n            this.valueElGroup = el('g', {\n                className: prefixed('value-element-group')\n            });\n            this.valueElRect = el('rect', {\n                fill: this.config.focusedValueFill || 'black'\n            });\n            this.valueElText = el('text', {\n                direction: this.config.dir,\n                textAnchor: 'middle',\n                dominantBaseline: 'middle',\n                fontFamily: this.config.fontFamily,\n                fontSize: 'smaller',\n                fill: this.config.focusedValueColor || 'white'\n            }, document.createTextNode(''));\n            this.valueElGroup.appendChild(this.valueElRect);\n            this.valueElGroup.appendChild(this.valueElText);\n        }\n    }\n\n    #addLegend() {\n\n        const gLegend = el('g', {\n            className: prefixed('legend-group')\n        });\n\n        if (this.config.legendSelect) {\n            if (!this.#onLegendClickScoped) {\n                this.#onLegendClickScoped = this.#onLegendClick.bind(this);\n                this.#onLegendKeypressScoped = this.#onLegendKeypress.bind(this);\n            }\n            this.addEventListener(gLegend, 'keypress', this.#onLegendKeypressScoped, false);\n            this.addEventListener(gLegend, 'click', this.#onLegendClickScoped, false);\n        }\n\n        this.config.series.forEach(function (serie, serieIndex) {\n\n            const gSerie = el('g', {\n                dataSerie: serie.id,\n                tabindex: this.config.legendSelect ? 0 : null\n            });\n\n            let x = 0, y = 0;\n\n            switch (this.config.legendPosition) {\n                case 'top':\n                    y = this.config.legendTop ? this.config.legendTop : (this.config.padding.top / 2);\n                    break;\n                case 'bottom':\n                    y = this.config.legendBottom ? this.config.legendBottom : (this.height - (this.config.padding.bottom / 2));\n                    break;\n                case 'end':\n                    if (this.isLTR) {\n                        x = this.config.padding.start + this.chartWidth + (this.config.xAxisGridPadding * 2) + this.config.paddingDefault;\n                        y = this.config.padding.top + this.config.yAxisGridPadding + (serieIndex * this.config.paddingDefault);\n                    } else {\n                        x = (this.config.xAxisGridPadding * 2) + this.config.padding.end - this.config.paddingDefault - this.config.legendWidth;\n                        y = this.config.padding.top + this.config.yAxisGridPadding + (serieIndex * this.config.paddingDefault);\n                    }\n                    break;\n            }\n\n            const rect = el('rect', {\n                x: x,\n                y: y,\n                rx: this.config.legendCircle ? this.config.legendWidth : 0,\n                ry: this.config.legendCircle ? this.config.legendWidth : 0,\n                width: this.config.legendWidth,\n                height: this.config.legendWidth,\n                fill: this.getSerieFill(serie, serieIndex)\n            });\n\n            const text = el('text', {\n                direction: this.config.dir,\n                x: this.isLTR ? (x + (this.config.legendWidth * 2)) : (x - this.config.legendWidth),\n                y: y + (this.config.legendWidth / 2) + 1, // + 1 don't know why\n                textAnchor: 'start',\n                dominantBaseline: 'middle',\n                fontFamily: this.config.fontFamily,\n                fill: this.config.legendColor,\n                fontSize: this.config.legendFontSize,\n            }, document.createTextNode(serie.title));\n\n\n            if (this.isLTR) {\n                gSerie.appendChild(rect);\n                gSerie.appendChild(text);\n            } else {\n                gSerie.appendChild(text);\n                gSerie.appendChild(rect);\n            }\n            gLegend.appendChild(gSerie);\n        }, this);\n\n        this.svg.appendChild(gLegend);\n\n        if (['top', 'bottom'].indexOf(this.config.legendPosition) > -1) {\n\n            // Measure the text so we can place the rects and texts next to each other\n            // and center the complete legend row.\n\n            let totalLegendWidth = 0;\n            let curX = this.isLTR ? 0 : (this.width - this.config.legendWidth);\n            gLegend.querySelectorAll('g').forEach(function (g) {\n                const box = g.getBBox();\n                g.querySelector('rect').setAttribute('x', curX);\n                g.querySelector('text').setAttribute('x', this.isLTR ? (curX + (this.config.legendWidth * 2)) : (curX - 10));\n                if (this.isLTR) {\n                    curX += (box.width + this.config.paddingDefault);\n                } else {\n                    curX -= (box.width + this.config.paddingDefault);\n                }\n                totalLegendWidth += (box.width + this.config.paddingDefault);\n            }, this);\n            if (this.isLTR) {\n                curX -= this.config.paddingDefault;\n                gLegend.setAttribute('transform', 'translate(' + ((this.width / 2) - (curX / 2)) + ', 0)');\n            } else {\n                totalLegendWidth -= this.config.paddingDefault;\n                gLegend.setAttribute('transform', 'translate(-' + ((this.width / 2) - (totalLegendWidth / 2)) + ', 0)');\n            }\n\n        }\n\n    }\n\n    #addTitle() {\n\n        var x, y, dominantBaseline, textAnchor = null;\n        switch (this.config.titleHorizontalPosition) {\n            case 'end':\n                x = this.width - this.config.paddingDefault;\n                textAnchor = this.isLTR ? 'end' : 'start';\n                break;\n            case 'start':\n                x = this.config.paddingDefault;\n                textAnchor = this.isLTR ? 'start' : 'end';\n                break;\n            default:\n                x = this.width / 2;\n                textAnchor = 'middle';\n                break;\n        }\n        switch (this.config.titleVerticalPosition) {\n            case 'center':\n                y = this.height / 2;\n                dominantBaseline = 'middle';\n                break;\n            case 'bottom':\n                y = this.height - this.config.paddingDefault;\n                dominantBaseline = 'auto';\n                break;\n            default:\n                y = this.config.paddingDefault;\n                dominantBaseline = 'hanging';\n                break;\n        }\n        this.svg.appendChild(el('text', {\n            direction: this.config.dir,\n            x: x,\n            y: this.config.paddingDefault,\n            textAnchor: textAnchor,\n            dominantBaseline: dominantBaseline,\n            fontFamily: this.config.fontFamily,\n            fontSize: this.config.titleFontSize,\n            fill: this.config.titleColor,\n            className: prefixed('text-title'),\n        }, document.createTextNode(this.config.title)));\n    }\n\n    /**\n     * Things we need to do for all chart types before we start visualise the data.\n     * @returns {HTMLElement} The current serie group element.\n     */\n    #dataBefore() {\n        if (this.serieGroupElement.firstChild) {\n            this.serieGroupElement.firstChild.remove();\n        }\n        var currentSerieGroupElement = el('g', {\n            id: prefixed('serie-group-current'),\n            className: this.config.transition ? prefixed('unattached') : ''\n        });\n        return currentSerieGroupElement;\n    }\n\n    /**\n     * Things we need to do for all chart types after we visualised the data.\n     * @param {HTMLElement} currentSerieGroupElement The current serie group element we got from #dataBefore().\n     */\n    #dataAfter(currentSerieGroupElement) {\n        this.serieGroupElement.appendChild(currentSerieGroupElement).getBoundingClientRect(); // getBoundingClientRect causes a reflow, so we don't have to use setTimeout to remove the class.\n        if (this.config.transition) {\n            currentSerieGroupElement.classList.remove(prefixed('unattached'));\n        }\n    }\n\n    getSeriePropertyColor(props, serie, serieIndex) {\n        for (var i = 0; i < props.length; i++) {\n            var key = props[i];\n            if (serie[key]) {\n                return key === 'fillGradient' ? `url(#${serie.id}-gradient)` : serie[key];\n            }\n        }\n        if (serie.color) {\n            return serie.color;\n        }\n        return SvgChart.#activeColorPalette[serieIndex];\n    }\n\n    getSeriePointColor(serie, serieIndex) {\n        return this.getSeriePropertyColor(['pointColor', 'strokeColor'], serie, serieIndex);\n    }\n\n    getSerieStrokeColor(serie, serieIndex) {\n        return this.getSeriePropertyColor(['strokeColor'], serie, serieIndex);\n    }\n\n    getSerieFill(serie, serieIndex) {\n        return this.getSeriePropertyColor(['fillGradient'], serie, serieIndex);\n    }\n\n    /**\n     * Adds an event listener to a node and adds it to the _listenersToRemoveAfterConfigChange array as well, so we can remove them in one place.\n     * @param {Node} node Node to add the listener to.\n     * @param {String} eventName Name of event.\n     * @param {Function} callback Function that needs to be executed.\n     * @param {Boolean} capture Capture or not.\n     */\n    addEventListener(node, eventName, callback, capture) {\n        node.addEventListener(eventName, callback, capture);\n        this._listenersToRemoveAfterConfigChange.push([node, eventName, callback, capture]);\n    }\n\n\n    /**\n     * When legend gets toggled (selected / deselected).\n     * @param {Node} target Legend node that gets toggled.\n     */\n    #onLegendToggle(target) {\n        var g = parent(target, 'g');\n        if (g && g.dataset.serie) {\n            var sg = this.serieGroupElement.querySelector('g[data-serie=\"' + g.dataset.serie + '\"]');\n            if (this.unselectedSeries[g.dataset.serie]) {\n                if (sg) {\n                    sg.setAttribute('display', 'inline'); // This is the default apparently and MUST be set before we change the unselected class, otherwise the transition won't be started\n                    sg.classList.remove(prefixed('unselected'));\n                }\n                g.classList.remove(prefixed('unselected'));\n                delete this.unselectedSeries[g.dataset.serie];\n            } else {\n                g.classList.add(prefixed('unselected'));\n                if (sg) {\n                    sg.classList.add(prefixed('unselected'));\n                }\n                this.unselectedSeries[g.dataset.serie] = true;\n            }\n        }\n    }\n\n    /**\n     * When a key is pressed on a focussed legend node.\n     * @param {Event} e Event object.\n     */\n    #onLegendKeypress(e) {\n        if (e.keyCode === 13) {\n            this.#onLegendToggle(e.target);\n        }\n    }\n\n    /**\n     * When a focussed legend node is clicked.\n     * @param {Event} e Event object.\n     */\n    #onLegendClick(e) {\n        this.#onLegendToggle(e.target);\n    }\n\n    /**\n     * When the tranisiton of a serie group has ended.\n     * @param {Event} e Event object.\n     */\n    #onSerieGroupTransitionend(e) {\n        // Currently only used to add display none to it when this serie group is unselected.\n        // We have to add display none, so this node doesn't make part of the UI anymore and cannot hide other nodes.\n        if (e.target.classList.contains(prefixed('unselected'))) {\n            e.target.setAttribute('display', 'none');\n        }\n    }\n\n    /**\n     * When a serie group node is blurred (this means loses focus).\n     * @param {Event} e Event object.\n     */\n    #onSerieGroupBlur(e) {\n        var circle = e.target;\n        var g = parent(circle, 'g');\n        var serie = g.dataset.serie;\n        if (serie) {\n            // Remove the current value element.\n            this.serieGroupElement.removeChild(this.valueElGroup);\n        }\n    }\n\n    /**\n     * When a serie group node gets focussed.\n     * @param {Event} e Event object.\n     */\n    #onSerieGroupFocus(e) {\n        var circle = e.target;\n        var g = parent(circle, 'g');\n        var serie = g.dataset.serie;\n        if (serie) {\n            var serieItem = this.config.series.find((item) => item.id === serie);\n            this.valueElText.replaceChild(document.createTextNode(serieItem.title + ': ' + circle.dataset.value), this.valueElText.firstChild);\n            this.serieGroupElement.appendChild(this.valueElGroup);\n            var box = this.valueElText.getBBox();\n            var width = box.width + (this.config.focusedValuePadding * 2);\n            var height = box.height + (this.config.focusedValuePadding * 2);\n            this.valueElRect.setAttribute('width', width);\n            this.valueElRect.setAttribute('height', height);\n            this.valueElText.setAttribute('x', width / 2);\n            this.valueElText.setAttribute('y', height / 2);\n\n            var type = serieItem.type || this.config.chartType;\n            var x, y = null;\n            switch (type) {\n                case 'line':\n                case 'bar':\n                case 'lineAndBar':\n                    x = (circle.getAttribute('cx') || (parseFloat(circle.getAttribute('x')) + (circle.getAttribute('width') / 2))) - (width / 2);\n                    y = (circle.getAttribute('cy') || circle.getAttribute('y')) - 10 - height;\n                    break;\n                case 'pie':\n                case 'donut':\n                    var d = circle.getAttribute('d').split(' ');\n                    x = d[1].trim();\n                    y = d[2].trim();\n                    break;\n            }\n            this.valueElGroup.setAttribute('transform', 'translate(' + x + ', ' + y + ')');\n        }\n    }\n\n}\n\n// Add el function to chart instance, so we can use it in the calling function, for example\n// to use it in the drawOnConfig or drawOnData callbacks.\nSvgChart.prototype.el = el;\n\nexport { SvgChart };\n", "import { SvgChart } from \"../src/svg.js\";\n\n//SvgChart.setActiveColorPalette(SvgChart.colorPalettes.springPastelsColorPalette);\n\nfunction getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction getRandomNumbersSummedUpTo(count, maxSum) {\n    let sum = maxSum;\n    const numbers = [];\n    for (let i = 0; i < count - 1; i++) {\n        const randomNumber = Math.floor(Math.random() * sum);\n        sum -= randomNumber < 0 ? 0 : randomNumber;\n        numbers.push(randomNumber < 0 ? 0 : randomNumber);\n    }\n    numbers.push(sum);\n    return numbers;\n}\n\nvar htmlDir = document.documentElement.getAttribute('dir') || 'ltr';\n\nvar chartInfo = {\n    chartBasicLine: {\n        config: {\n            chartType: 'line',\n            transition: true,\n            dir: htmlDir,\n            title: 'Basic line chart',\n            minValue: 0,\n            maxValue: 100,\n            legendPosition: 'end',\n            xAxisTitle: 'Days',\n            yAxisTitle: 'Count',\n            padding: {\n                end: 100,\n                start: 80,\n                top: 50,\n                bottom: 70\n            },\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                }\n            ]\n        },\n        data: null,\n        chart: null\n    },\n    chartBasicLineDark: {\n        config: {\n            chartType: 'line',\n            backgroundColor: 'black',\n            titleColor: 'white',\n            xAxisGridLineColor: 'green',\n            yAxisGridLineColor: 'green',\n            xAxisLabelColor: '#C0C0C0',\n            yAxisLabelColor: '#C0C0C0',\n            xAxisTitleColor: 'white',\n            yAxisTitleColor: 'white',\n            focusedValueFill: 'white',\n            focusedValueColor: 'black',\n            lineChartFilled: true,\n            legendColor: 'white',\n            transition: true,\n            dir: htmlDir,\n            title: 'Basic line chart dark',\n            minValue: 0,\n            maxValue: 100,\n            legendPosition: 'end',\n            xAxisTitle: 'Days',\n            yAxisTitle: 'Count',\n            padding: {\n                end: 100,\n                start: 80,\n                top: 50,\n                bottom: 70\n            },\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                }\n            ]\n        },\n        data: {\n            series: {\n                train: Array(7).fill(1).map(item => getRandomIntInclusive(0, 100)),\n                car: Array(7).fill(1).map(item => getRandomIntInclusive(0, 100)),\n            },\n            xAxis: {\n                columns: ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']\n            }\n        },\n        chart: null\n    },\n    chartBasicLineBig: {\n        config: {\n            chartType: 'line',\n            dir: htmlDir,\n            title: 'Basic line chart with many values',\n            minValue: 0,\n            maxValue: 100,\n            xAxisTitle: 'Days',\n            yAxisStep: 10, // real value step\n            yAxisLabelStep: 20,\n            xAxisStep: 2, // step between colums (so 2 means display each second step from first one on)\n            xAxisLabelStep: 10,\n            lineCurved: false,\n            yAxisTitle: 'Count',\n            points: false,\n            lineWidth: 1,\n            padding: {\n                end: 100,\n                start: 80,\n                top: 100,\n                bottom: 100\n            },\n            series: [\n                {\n                    id: 'car',\n                    title: 'Car',\n                    color: 'blue'\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike',\n                    color: 'green'\n                },\n            ],\n            xAxisLabelRotation: 45,\n            xAxisLabelTop: 30,\n            xAxisGridPadding: 20,\n            yAxisGridPadding: 20,\n            legendPosition: 'top',\n            legendTop: 60\n        },\n        dataFunc: function (id) {\n            const total = 100;\n            var numbers = [];\n            var serieData = {};\n            for (let i = 0; i < total; i++) {\n                numbers.push(getRandomNumbersSummedUpTo(4, 100));\n            };\n            chartInfo[id].config.series.forEach(function (serie) {\n                serieData[serie.id] = [];\n            });\n            numbers.forEach(function (numberArray) {\n                chartInfo[id].config.series.forEach(function (serie, serieIndex) {\n                    serieData[serie.id].push(numberArray[serieIndex]);\n                });\n            });\n            chartInfo[id].data = {\n                series: serieData,\n                xAxis: {\n                    columns: Array(total).fill(1).map(function (value, index) {\n                        return 'Item ' + (index + 1);\n                    })\n                }\n            };\n        },\n        chart: null\n    },\n    chartBasicBar: {\n        config: {\n            chartType: 'bar',\n            dir: htmlDir,\n            title: 'Basic bar chart',\n            minValue: 0,\n            maxValue: 100,\n            legendPosition: 'top',\n            xAxisTitle: 'Days',\n            yAxisTitle: 'Count',\n            legendTop: 60,\n            padding: {\n                end: 40,\n                start: 80,\n                bottom: 60\n            },\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                }\n            ]\n        },\n        data: null,\n        chart: null\n    },\n    chartStackedBar: {\n        config: {\n            chartType: 'bar',\n            dir: htmlDir,\n            title: 'Stacked bar chart',\n            legendPosition: 'top',\n            minValue: 0,\n            maxValue: 100,\n            legendTop: 60,\n            barSpacing: 20,\n            barStacked: true,\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike',\n                },\n                {\n                    id: 'feet',\n                    title: 'Feet',\n                }\n            ]\n        },\n        data: null,\n        chart: null,\n        dataFunc: function (id) {\n            var numbers = [];\n            var serieData = {};\n            for (let i = 0; i < 7; i++) {\n                numbers.push(getRandomNumbersSummedUpTo(4, 100));\n            };\n            chartInfo[id].config.series.forEach(function (serie) {\n                serieData[serie.id] = [];\n            });\n            numbers.forEach(function (numberArray) {\n                chartInfo[id].config.series.forEach(function (serie, serieIndex) {\n                    serieData[serie.id].push(numberArray[serieIndex]);\n                });\n            });\n            chartInfo[id].data = {\n                series: serieData,\n                xAxis: {\n                    columns: ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']\n                }\n            };\n        }\n    },\n    chartBasicPie: {\n        config: {\n            chartType: 'pie',\n            dir: htmlDir,\n            title: 'Basic pie chart',\n            legendPosition: 'top',\n            legendTop: 60,\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train'\n                },\n                {\n                    id: 'car',\n                    title: 'Car'\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike'\n                },\n                {\n                    id: 'feet',\n                    title: 'Feet'\n                }\n            ]\n        },\n        data: null,\n        chart: null\n    },\n    chartBasicDonut: {\n        config: {\n            chartType: 'donut',\n            dir: htmlDir,\n            title: 'Basic donut chart',\n            legendPosition: 'top',\n            legendTop: 60,\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train'\n                },\n                {\n                    id: 'car',\n                    title: 'Car'\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike'\n                },\n                {\n                    id: 'feet',\n                    title: 'Feet'\n                }\n            ]\n        },\n        data: null,\n        chart: null\n    },\n    chartBarAndLine: {\n        config: {\n            chartType: 'lineAndBar',\n            dir: htmlDir,\n            title: 'Bar and line chart',\n            legendPosition: 'top',\n            legendTop: 60,\n            minValue: 0,\n            maxValue: 100,\n            barSpacing: 10,\n            series: [\n                {\n                    id: 'bike',\n                    title: 'Bike',\n                    type: 'bar'\n                },\n                {\n                    id: 'feet',\n                    title: 'Feet',\n                    type: 'bar'\n                },\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                }\n            ]\n        },\n        data: null,\n        chart: null,\n    },\n    chartCustom: {\n        config: {\n            padding: {\n                bottom: 70,\n                start: 80\n            },\n            chartType: 'line',\n            dir: htmlDir,\n            title: 'Custom line chart',\n            legendPosition: 'top',\n            legendTop: 60,\n            xAxisTitle: 'Days',\n            yAxisTitle: 'Count',\n            xAxisTitleColor: 'black',\n            yAxisTitleColor: 'black',\n            minValue: 0,\n            maxValue: 100,\n            barSpacing: 10,\n            xAxisGridColumnsSelectable: true,\n            xAxisGridColumnsSelectableColor: 'red',\n            xAxisGridColumns: true,\n            lineCurved: false,\n            onXAxisLabelGroupSelect: function (chart, index) {\n                var serieValues = [];\n                Object.keys(chart.data.series).forEach(function (serie) {\n                    serieValues.push(`${serie} = ${chart.data.series[serie][index]}`);\n                });\n                document.getElementById('chartCustomCodeInfo').innerHTML = `Clicked on '${chart.data.xAxis.columns[index]}' with values: ${serieValues.join(\", \")}`;\n            },\n            drawOnData: function (chart, groupNode) {\n                groupNode.appendChild(chart.el('text', {\n                    x: chart.isLTR ? (chart.width - chart.config.padding.end - 2) : (chart.config.padding.end + 2),\n                    direction: chart.config.dir,\n                    y: chart.config.padding.top + 4,\n                    textAnchor: 'end',\n                    dominantBaseline: 'hanging',\n                    fontWeight: 'bold',\n                    fontSize: '26px'\n                }, document.createTextNode(Date.now())));\n            },\n            drawOnConfig: function (chart, groupNode) {\n                groupNode.appendChild(chart.el('rect', {\n                    x: chart.config.padding.left,\n                    y: chart.config.padding.top,\n                    width: chart.chartWidth,\n                    height: chart.lineAndBarValueHeight * 20,\n                    fill: 'darkgreen',\n                    fillOpacity: 0.2\n                }));\n                groupNode.appendChild(chart.el('rect', {\n                    x: chart.config.padding.left,\n                    y: chart.config.padding.top + (chart.lineAndBarValueHeight * 20),\n                    width: chart.chartWidth,\n                    height: chart.lineAndBarValueHeight * 40,\n                    fill: 'orange',\n                    fillOpacity: 0.2\n                }));\n                groupNode.appendChild(chart.el('rect', {\n                    x: chart.config.padding.left,\n                    y: chart.config.padding.top + (chart.lineAndBarValueHeight * 60),\n                    width: chart.chartWidth,\n                    height: chart.lineAndBarValueHeight * 40,\n                    fill: 'red',\n                    fillOpacity: 0.2\n                }));\n            },\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike',\n                }\n            ]\n        },\n        data: null,\n        chart: null,\n        onNewDataFunc: function () {\n            document.getElementById('chartCustomCodeInfo').innerHTML = 'Click a day to see details! ';\n        }\n    },\n    chartDynamic: {\n        config: {\n            padding: {\n                bottom: 70,\n                start: 80\n            },\n            chartType: 'line',\n            dir: htmlDir,\n            title: 'Dynamic chart',\n            legendPosition: 'top',\n            legendTop: 60,\n            xAxisTitle: 'Days',\n            yAxisTitle: 'Count',\n            xAxisTitleColor: 'black',\n            yAxisTitleColor: 'black',\n            minValue: 0,\n            maxValue: 100,\n            barSpacing: 10,\n            xAxisGridColumnsSelectable: true,\n            xAxisGridColumnsSelectableColor: 'red',\n            xAxisGridColumns: true,\n            lineCurved: true,\n            series: [\n                {\n                    id: 'train',\n                    title: 'Train',\n                },\n                {\n                    id: 'car',\n                    title: 'Car',\n                },\n                {\n                    id: 'bike',\n                    title: 'Bike',\n                }\n            ]\n        },\n        data: {\n            series: {\n                train: Array(7).fill(1).map(item => getRandomIntInclusive(0, 100)),\n                car: Array(7).fill(1).map(item => getRandomIntInclusive(0, 100)),\n                bike: Array(7).fill(1).map(item => getRandomIntInclusive(0, 100))\n            },\n            xAxis: {\n                columns: ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']\n            }\n        },\n        chart: null\n    }\n};\n\nFunction.prototype.toJSON = function () {\n    return this.toString().replace(/\\n/g, \"<br>\").replace('function(', \"FUNC[\");\n}\n\nfunction setChartData(id) {\n    var isPieOrDonut = ['pie', 'donut'].indexOf(chartInfo[id].config.chartType) !== -1;\n    var serieData = {};\n    chartInfo[id].config.series.forEach(function (serie) {\n        serieData[serie.id] = !isPieOrDonut ? Array(7).fill(1).map(item => getRandomIntInclusive(0, 100)) : getRandomIntInclusive(0, 100);\n    });\n    chartInfo[id].data = {\n        series: serieData,\n        xAxis: {\n            columns: isPieOrDonut ? ['mon'] : ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']\n        }\n    };\n}\n\n/**\n * Rewrites CSV to data object.\n * Format: first row: columns (first column is empty)\n * second and next rows: first column id of serie and next columns are values\n * ,mon,tue,wed,thu,fri,sat,sun\n * train,45,98,45,45,56,67,89\n * car,55,4,7,6,8,9,0\n * \n */\nfunction csvToData(csv, id) {\n\n    let data = {\n        series: {},\n        xAxis: {\n            columns: null\n        }\n    };\n\n    const lines = csv.split(\"\\n\");\n\n    lines.forEach(function (line, lineIndex) {\n\n        const columns = line.split(',');\n        const firstColumn = columns.shift();\n\n        if (lineIndex === 0) {\n\n            data.xAxis.columns = columns;\n            return;\n        }\n\n        data.series[firstColumn] = columns;\n\n    });\n\n    chartInfo[id].data = data;\n}\n\nfunction stringifyObject(ob) {\n    let s = [];\n    Object.keys(ob).forEach(function (key) {\n        const value = ob[key];\n        switch (typeof value) {\n            case 'object':\n                s.push(\"    \" + '\"' + key + '\": ' + JSON.stringify(value));\n                break;\n            case 'number':\n                s.push(\"    \" + '\"' + key + '\": ' + value);\n                break;\n            case 'string':\n                s.push(\"    \" + '\"' + key + '\": \"' + value + '\"');\n                break;\n            case 'function':\n                s.push(\"    \" + '\"' + key + '\": ' + value.toString());\n                break;\n            case 'boolean':\n                s.push(\"    \" + '\"' + key + '\": ' + value);\n                break;\n        }\n    });\n    return \"{\\n\" + s.join(\",\\n\") + \"\\n}\";\n}\n\nfunction doChart(id) {\n    if (chartInfo[id].onNewDataFunc) {\n        chartInfo[id].onNewDataFunc();\n    }\n    //if (!chartInfo[id].data) {\n    var csvArea = document.getElementById(id + 'CodeDataCsv');\n    if (csvArea && csvArea.value) {\n        csvToData(csvArea.value.trim(), id);\n    } else {\n        chartInfo[id].dataFunc ? chartInfo[id].dataFunc(id) : setChartData(id);\n    }\n    //}\n    if (chartInfo[id].chart === null) {\n        chartInfo[id].chart = new SvgChart(document.getElementById(id), chartInfo[id].config);\n        document.getElementById(id + 'RandomDataButton').addEventListener('click', function () {\n            doChart(id);\n        });\n        document.getElementById(id + 'PngButton').addEventListener('click', function () {\n            chartInfo[id].chart.saveAsPng(id + '.png');\n        });\n    } else {\n        chartInfo[id].chart.setConfig(chartInfo[id].config);\n    }\n    chartInfo[id].chart.chart(chartInfo[id].data);\n    var codeConfig = document.getElementById(id + 'CodeConfig').querySelector('code');\n    var codeData = document.getElementById(id + 'CodeData').querySelector('code');\n    codeConfig.innerHTML = stringifyObject(chartInfo[id].config);\n    codeData.innerHTML = JSON.stringify(chartInfo[id].data, null, 2);\n    hljs.highlightElement(codeConfig);\n    hljs.highlightElement(codeData);\n}\n\nfunction dynamicChart() {\n\n    if (!chartInfo['chartDynamic'].chart) {\n        document.getElementById('chartDynamicCodeConfig').value = JSON.stringify(chartInfo['chartDynamic'].config, null, 2);\n        document.getElementById('chartDynamicCodeData').value = JSON.stringify(chartInfo['chartDynamic'].data, null, 2);\n        document.getElementById('chartDynamicExecuteButton').addEventListener('click', dynamicChart);\n        document.getElementById('chartDynamicPngButton').addEventListener('click', function () {\n            chartInfo['chartDynamic'].chart.saveAsPng('chartDynamic.png');\n        });\n    }\n\n    const config = eval(\"(\" + document.getElementById('chartDynamicCodeConfig').value + \")\"); // note that JSON.parse doesn't work with functions as values.\n    const data = eval(\"(\" + document.getElementById('chartDynamicCodeData').value + \")\");\n\n    if (!chartInfo['chartDynamic'].chart) {\n        chartInfo['chartDynamic'].chart = new SvgChart(document.getElementById('chartDynamic'), config);\n    } else {\n        chartInfo['chartDynamic'].chart.setConfig(config);\n    }\n    chartInfo['chartDynamic'].chart.chart(data);\n}\n\ndoChart('chartBasicLine');\ndoChart('chartBasicLineDark');\ndoChart('chartBasicLineBig');\ndoChart('chartBasicBar');\ndoChart('chartStackedBar');\ndoChart('chartBasicPie');\ndoChart('chartBasicDonut');\ndoChart('chartBarAndLine');\ndoChart('chartCustom');\ndynamicChart();\ncreateToc();\n\nfunction createToc() {\n    const toc = [];\n    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(function(h, index) {\n        const level = h.tagName.toLowerCase().substring(1);\n        if (level == 1) {\n            return;\n        }\n        if (!h.id) {\n            h.id = 'my-header-' + index;\n        }\n        toc.push('<div class=\"my-header-level-' + level + '\"><a href=\"#' + h.id + '\">' + h.innerText + '</a></div>');\n    });\n    document.getElementById('toc').innerHTML = toc.join(\"\\n\");\n}\n\nfunction getParent(el, parentTagName) {\n    let parent = el;\n    while (parent && parent.tagName.toLowerCase() !== parentTagName) {\n        parent = parent.parentNode;\n    }\n    return parent;\n}\n\ndocument.documentElement.addEventListener('click', function (e) {\n    const target = e.target;\n    if (target.dataset.toggle) {\n        const targetId = target.dataset.targetId;\n        const csvEl = document.getElementById(targetId + 'CodeDataCsv');\n        const toggle = target.dataset.toggle;\n        switch (toggle) {\n            case 'chart':\n                document.getElementById(targetId).classList.remove('my-hidden');\n                document.getElementById(targetId + 'CodeConfig').classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeData').classList.add('my-hidden');\n                if (csvEl) csvEl.classList.add('my-hidden');\n                break;\n            case 'config':\n                document.getElementById(targetId).classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeConfig').classList.remove('my-hidden');\n                document.getElementById(targetId + 'CodeData').classList.add('my-hidden');\n                if (csvEl) csvEl.classList.add('my-hidden');\n                break;\n            case 'data':\n                document.getElementById(targetId).classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeConfig').classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeData').classList.remove('my-hidden');\n                if (csvEl) csvEl.classList.add('my-hidden');\n                break;\n            case 'data-csv':\n                document.getElementById(targetId).classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeConfig').classList.add('my-hidden');\n                document.getElementById(targetId + 'CodeData').classList.add('my-hidden');\n                if (csvEl) csvEl.classList.remove('my-hidden');\n                break;\n        }\n        document.querySelectorAll('button[data-target-id=\"' + targetId + '\"]').forEach(function (el) {\n            if (el === target) {\n                el.classList.add('my-active-tab');\n            } else {\n                el.classList.remove('my-active-tab');\n            }\n        });\n    } else if (target.classList.contains('my-copy-button')) {\n        var pre = getParent(target, 'pre');\n        navigator.clipboard.writeText(pre.querySelector('code').innerText);\n    }\n});\n\n"],
  "mappings": "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",
  "names": ["el", "parent", "parent", "config", "colors", "data", "data", "el", "parent"]
}
