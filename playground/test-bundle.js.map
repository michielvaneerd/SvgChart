{
  "version": 3,
  "sources": ["../src/types.ts", "../src/config.ts", "../src/utils.ts", "../src/colors.ts", "../src/charts/controller.ts", "../src/x_y_hor_vert_axis.ts", "../src/charts/line_chart_controller.ts", "../src/charts/bar_chart_controller.ts", "../src/charts/bar_and_line_chart_controller.ts", "../src/charts/donut_or_pie_utils.ts", "../src/charts/donut_chart_controller.ts", "../src/charts/pie_chart_controller.ts", "../src/charts/radar_chart_controller.ts", "../src/charts/bubble_chart_controller.ts", "../src/svg.ts", "test.js"],
  "sourcesContent": ["import { SvgChart } from \"./svg\";\n\n/**\n * Function that are scoped to a specific `this` object and that is called when an event happens.\n */\ntype ScopedEventCallback = (e: Event) => void;\n\n/**\n * Serie object that is used in the config phase.\n */\ntype ChartConfigSerie = {\n    id: string;\n    title: string;\n    type?: ChartType;\n    fillGradient?: string;\n    color?: string;\n}\n\n/**\n * Possible type of charts.\n */\nenum ChartType {\n    Line,\n    Bar,\n    LineAndBar,\n    Pie,\n    Donut,\n    Radar,\n    Bubble\n}\n\n/**\n * Data object with series data and columns.\n */\ninterface ChartData {\n    series: { [key: string]: number[] },\n    xAxis?: { columns: string[] };\n};\n\n/**\n * Data point with x and y values.\n */\ninterface ChartPoint {\n    x: number;\n    y: number;\n}\n\n/**\n * Object with information about an event for a specific node.\n */\ninterface ChartEventInfo {\n    node: Node;\n    eventName: string;\n    callback: EventListenerOrEventListenerObject;\n    capture: boolean;\n}\n\n/**\n * Hash with string as key and boolean as value.\n */\ntype StringBooleanHash = {\n    [key: string]: boolean;\n}\n\n/**\n * Callback function that is getting called when a X axis label is selected.\n */\ntype XAxisColumnSelectedCallback = (svgChart: SvgChart, selectedIndex: number) => void;\n\n/**\n * Callback function that is getting called at a specific point during the chart drawing.\n */\ntype DrawCallback = (svgChart: SvgChart, groupNode: SVGElement) => void;\n\ntype FocusedValueCallback = (serie: ChartConfigSerie, value: any) => string;\n\n/**\n * Position enum.\n */\nenum ChartPosition {\n    Top,\n    End,\n    Bottom,\n    Start,\n    Left,\n    Right,\n    Center\n}\n\n\nexport {\n    ScopedEventCallback,\n    ChartConfigSerie,\n    ChartType,\n    ChartData,\n    ChartPoint,\n    ChartEventInfo,\n    StringBooleanHash,\n    XAxisColumnSelectedCallback,\n    DrawCallback,\n    ChartPosition,\n    FocusedValueCallback\n};", "import { ChartConfigSerie, ChartType, XAxisColumnSelectedCallback, DrawCallback, ChartPosition, FocusedValueCallback } from \"./types\";\nimport { deepClone } from \"./utils\";\n\n/**\n * SvgChart config class.\n */\nclass SvgChartConfig {\n\n    /**\n     * Creates a new SvgChartConfig instance with properties from parameter.\n     * Note: config parameter object is referenced.\n     * \n     * @param props Object with all non-default properties.\n     */\n    constructor(props?: object) {\n        if (props) {\n            Object.keys(props).forEach((key) => {\n                switch (key) {\n                    case 'padding':\n                        this[key] = Object.assign(this.padding, props[key]);\n                        break;\n                    default:\n                        this[key] = props[key];       \n                }\n            });\n        }\n    }\n\n    /**\n     * Get direction string to use for dom direction attribute.\n     * \n     * @param config Config object.\n     * @returns Attribute value.\n     */\n    static getDirection(config: SvgChartConfig): string {\n        return config.ltr ? 'ltr' : 'rtl';\n    }\n\n    /**\n     * Whether language direction is ltr.\n     */\n    ltr: boolean = true;\n\n    /**\n     * Series array.\n     */\n    series: Array<ChartConfigSerie> = null;\n\n    /**\n     * Title of chart.\n     */\n    title: string = null;\n\n    /**\n     * Chart type.\n     */\n    chartType: ChartType = null;\n\n    /**\n     * Callback when x axis label is selected. Parameters are SvgChart and x axis column index.\n     */\n    onXAxisLabelGroupSelect: XAxisColumnSelectedCallback = null;\n\n    /**\n     * Padding object.\n     */\n    padding = {\n        start: 40,\n        end: 20,\n        top: 100,\n        bottom: 40,\n        /**\n         * Left will be set by code, depends on direction.\n         */\n        left: 40,\n        /**\n         * Right will be set by code, depends on direction.\n         */\n        right: 20\n    };\n\n    /**\n     * Default padding for space between elements.\n     */\n    paddingDefault: number = 20;\n\n    /**\n     * Width of legend squares or circles.\n     */\n    legendWidth: number = 10;\n\n    /**\n     * Whether the value box should be displayed when an element has focus.\n     */\n    focusedValueShow: boolean = true;\n\n    focusedValueCallback: FocusedValueCallback = null;\n\n    /**\n     * Fill color of focused value box.\n     */\n    focusedCSSValueFill: string = 'black';\n\n    /**\n     * Font color of focused value box.\n     */\n    focusedCSSValueColor: string = 'white';\n\n    /**\n     * Padding of focused value box.\n     */\n    focusedCSSValuePadding: string = '6px';\n\n    /**\n     * Draw function to execute in the config phase. It receives a SvgChart and HTMLElement parameter.\n     * \n     * @example function(svgChart, groupNode) {\n     *     groupNode.appendChild(svgChart.el('rect', {\n     *         x: 10,\n     *         y: 10\n     *     }));\n     * }\n     */\n    drawOnConfig: DrawCallback = null;\n\n    /**\n     * Draw function to execute in the chart phase. It receives a SvgChart and HTMLElement parameter.\n     * \n     * @example function(svgChart, groupNode) {\n     *     groupNode.appendChild(svgChart.el('rect', {\n     *         x: 10,\n     *         y: 10\n     *     }));\n     * }\n     */\n    drawOnData: DrawCallback = null;\n\n    /**\n     * transition - Whether the chart elements should be faded in or nor.\n     */\n    transition: boolean = true;\n\n    /**\n     * Background color of the SVG element.\n     */\n    backgroundColor: string = 'white';\n\n    /**\n     * Font fanily for all text elements.\n     */\n    fontFamily: string = 'sans-serif';\n\n    /**\n     * Fontsize for the title.\n     */\n    titleFontSize: string | number = 'normal';\n\n    /**\n     * Font color of title.\n     */\n    titleColor: string = 'black';\n\n    /**\n     * Horizontal position of title. Can be one of: center, start, end.\n     */\n    titleHorizontalPosition: ChartPosition = ChartPosition.Center; // center (default); start; end\n\n    /**\n     * Vertical position of title. Can be one of: top, bottom, center.\n     */\n    titleVerticalPosition: ChartPosition = ChartPosition.Top; // top (default); bottom; center\n\n    /**\n     * Maximum value. Required for charts with Y-axes.\n     */\n    maxValue: number = null;\n\n    /**\n     * Minumum value of Y axis. Required for charts with Y-axes.\n     */\n    minValue: number = null;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // X Axis\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Font size of axes titles.\n     */\n    axisTitleFontSize: string = 'smaller';\n\n    /**\n     * Font size of axes labels.\n     */\n    axisLabelFontSize: string = 'small';\n\n    // X axis\n    /**\n     * X axis title.\n     */\n    xAxisTitle: string = null;\n\n    /**\n     * If this is a number X, than the x axis title will be positioned X pixels from the bottom.\n     * If this is null, then the title will be positioned paddingDefault pixesl from the bottom.\n     */\n    xAxisTitleBottom: number = null;\n\n    /**\n     * Line width of the x axis grid.\n     */\n    xAxisGridLineWidth: number = 1;\n\n    /**\n     * Color of x axis grid lines.\n     */\n    xAxisGridLineColor: string = '#C0C0C0';\n\n    /**\n     * Stroke dash array value for the x axis grid lines.\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray}.\n     */\n    xAxisGridLineDashArray: string = '1 1';\n\n    /**\n     * Font color of xaxis labels.\n     */\n    xAxisLabelColor: string = '#A0A0A0';\n\n    /**\n     * Font color of x axis title.\n     */\n    xAxisTitleColor: string = '#A0A0A0';\n\n    /**\n     * Whether the xaxis grid should be displayed.\n     */\n    xAxisGrid: boolean = true;\n\n    /**\n     * Outside padding for x axis grid.\n     */\n    xAxisGridPadding: number = 0;\n\n    /**\n     * Whether x axis labels should be displayed.\n     */\n    xAxisLabels: boolean = true;\n\n    /**\n     * Whether the x axis labels should be below (false)\n     * or between (true) the x axis grid lines. For bar charts this will always be set to true.\n     */\n    xAxisGridColumns: boolean = false;\n\n    /**\n     * Whether xAxisGridColumns should be selectable.\n     * If this is true, the x axis labels can be clicked and selected.\n     */\n    xAxisGridColumnsSelectable: boolean = false;\n\n    /**\n     * Opacity value for the selected xAxisGridColumn.\n     */\n    xAxisGridSelectedColumnOpacity: number = 0.2;\n\n    /**\n     * Background color for a selected xAxisGridColumn.\n     */\n    xAxisGridColumnsSelectableColor: string = 'black';\n\n    /**\n     * The text anchor value for x axis labels.\n     * For example if you want vertical labels that should be aligned to the x axis, you can set this to 'start'.\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor}.\n     */\n    textAnchorXAxisLabels: string = 'middle';\n\n    /**\n     * Number of pixels that the x axsis labels will be positioned from the bottom x axis grid line.\n     */\n    xAxisLabelTop: number = 10;\n\n    /**\n     * Degrees for the x axis labels.\n     */\n    xAxisLabelRotation: number = 0;\n\n    /**\n     * Steps between x axis grid lines.\n     */\n    xAxisStep: number = 1;\n\n    /**\n     * Steps between x axis labels.\n     */\n    xAxisLabelStep: number = 1;\n\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Y Axis\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @prop {string} yAxisTitle - Y axis title.\n     */\n    yAxisTitle: string = null;\n\n    /**\n     *  Number of pixels the y axis labels should be positioned from the start. If this is null, this will be defaultPadding pixels.\n     */\n    yAxisTitleStart: number = null; // if this is <> null; then this will be the X start position of the Y axis title.\n\n    /**\n     * Line width of the y axis grid.\n     */\n    yAxisGridLineWidth: number = 1;\n\n    /**\n     * Color of y axis grid lines.\n     */\n    yAxisGridLineColor: string = '#C0C0C0';\n\n    /**\n     * Stroke dash array value for the y axis grid lines.\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray}.\n     */\n    yAxisGridLineDashArray: string = '1 1';\n\n    /**\n     * Font color of y axis labels.\n     */\n    yAxisLabelColor: string = '#A0A0A0';\n\n    /**\n     * Font color of y axis title.\n     */\n    yAxisTitleColor: string = '#A0A0A0';\n\n    /**\n     * Steps between y axis grid lines.\n     */\n    yAxisStep: number = 10; // how many steps between y axis grid lines\n\n    /**\n     * Steps between y axis labels.\n     */\n    yAxisLabelStep: number = 10; // how many steps between labels y axis\n\n\n    //yAxis = true;\n\n    /**\n     * Whether the y axis grid should be displayed.\n     */\n    yAxisGrid: boolean = true;\n\n    /**\n     * Whether y axis labels should be displayed.\n     */\n    yAxisLabels: boolean = true;\n\n    /**\n     * Outside padding for y axis grid.\n     */\n    yAxisGridPadding: number = 0;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Legend\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Font size for legend labels.\n     */\n    legendFontSize: string = 'smaller';\n\n    /**\n     * Font color of legend labels.\n     */\n    legendColor: string = 'black';\n\n    /**\n     * Whether legends should be squares (false) or circles (true)\n     */\n    legendCircle: boolean = false;\n\n    /**\n     * @prop {boolean} legend - Whether legends should be displayed.\n     */\n    legend: boolean = true;\n\n    /**\n     * Whether clicking on a legend hides and shows a the serie.\n     */\n    legendSelect: boolean = true;\n\n    /**\n     * Position of legend. Possible values: bottom, top, end.\n     */\n    legendPosition: ChartPosition = ChartPosition.Top;\n\n    /**\n     * If not null, number of pixels the legend should be positioned from the bottom. Otherwise a default number of pixels will be used.\n     */\n    legendBottom: number = null;\n\n    /**\n     * @prop {number} legendTop - If not null, number of pixels the legend should be positioned from the top. Otherwise a default number of pixels will be used.\n     */\n    legendTop: number = null;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Line charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    /**\n     * Width of line for line charts.\n     */\n    lineWidth: number = 2;\n\n    /**\n     * Radius of line points for line charts.\n     */\n    pointRadius: number = 2;\n\n    /**\n     * Whether null values should be connected or not.\n     */\n    connectNullValues: boolean = false;\n\n    /**\n     * Whether lines should be curved or not.\n     */\n    lineCurved: boolean = true;\n\n    /**\n     * Whether line charts should be filled or not.\n     */\n    lineChartFilled: boolean = false;\n\n    /**\n     * Whether the lines should display points or not.\n     */\n    points: boolean = true;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Bar charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Opacity of bars.\n     */\n    barFillOpacity: number = 0.5;\n\n    /**\n     * Spacing in pixels between bars.\n     */\n    barSpacing: number = 4;\n\n    /**\n     * Width of bar border.\n     */\n    barStrokeWidth: number = 1;\n\n    /**\n     * Whether bars should be stacked.\n     */\n    barStacked: boolean = false;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Pie and donut charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Opacity of pie and donut charts.\n     */\n    pieFillOpacity: number = 0.6;\n\n    /**\n     * With of donuts. Of not given a default value is used.\n     */\n    donutWidth: number = null;\n\n    /**\n     * Stroke color for pie charts.\n     */\n    pieStroke: string = 'white';\n\n    /**\n     * Width of stroke for pie charts. If this is 0, no stroke is painted.\n     */\n    pieStrokeWidth: number = 2;\n\n    /**\n     * Stroke color for donut charts.\n     */\n    donutStroke: string = 'white';\n\n    /**\n     * Width of stroke for donut charts. If this is 0, no stroke is painted.\n     */\n    donutStrokeWidth: number = 2;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Radar charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    radarStrokeWidth: number = 2;\n    radarFillOpacity: number = 0.3;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    // Bubble charts\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n\n    bubbleMaxZValue: number = 100;\n    bubbleFillOpacity: number = 0.5;\n    bubbleStrokeWidth: number = 1;\n    bubbleMaxRadius: number = null;\n};\n\nexport { SvgChartConfig };", "import { ChartPoint } from \"./types\";\n\n/**\n * Callback function that is called by the {@link directionForEach} function.\n */\ntype DirectionForEachCallback = (item: any, index: number, items: Array<any>) => void;\n\n/**\n * SVG namespace.\n */\nconst ns = 'http://www.w3.org/2000/svg';\n\n/**\n * Regex we use to convert from dash to camelcase.\n */\nconst attributesCamelCaseToDashRegex = /[A-Z]/g;\n\n/**\n * String we use to prefix all class names and ID names.\n */\nconst classNamePrefix = 'svg-chart-';\n\n/**\n * Creates a new HTML element.\n * \n * @param name Tag name for new HTML element.\n * @param attributes - Key value pair of attributes to set.\n * @param child - Child node to add to new HTML element.\n * @returns The new HTML element.\n */\nfunction el(name: string, attributes: object = {}, child: Node = null): SVGElement {\n    var el = document.createElementNS(ns, name);\n    Object.keys(attributes).forEach((key) => {\n        if (attributes[key] === null) {\n            return;\n        }\n        switch (key) {\n            case 'className':\n                if (attributes[key]) {\n                    el.classList.add(...attributes[key].trim().split(' '));\n                }\n                break;\n            default:\n                //el.setAttribute(key.replaceAll(attributesCamelCaseToDashRegex, \"-$&\").toLowerCase(), attributes[key]);\n                el.setAttribute(key.replace(attributesCamelCaseToDashRegex, \"-$&\").toLowerCase(), attributes[key]);\n                break;\n        }\n    });\n    if (child) {\n        el.appendChild(child);\n    }\n    return el;\n}\n\n/**\n * Searches up from currentElement until an element is found with the parentName. \n * \n * @param currentElement - HTML element to search up from.\n * @param parentName - Tag name of element to search for.\n * @returns Found HTML element or null.\n */\nfunction parent(currentElement: SVGElement, parentName: string): SVGElement | null {\n    var el = currentElement;\n    while (el && el.nodeName.toLowerCase() !== parentName.toLowerCase()) {\n        el = el.parentNode as SVGElement;\n    }\n    return el;\n}\n\n/**\n * Returns the className with prefix.\n * \n * @param className - Class name to prefix.\n * @returns Classname with prefix.\n */\nfunction prefixed(className: string): string {\n    return classNamePrefix + className;\n}\n\n/**\n * Loop through items in normal (isRTL = true) or reversed (isRTL = false) order and call the callback for each item.\n * \n * @param instance - Instance of object that will be this in the callback.\n * @param items - Array of items to loop through.\n * @param isRTL - Whether it is left-to-right or right-to-left.\n * @param callback - Callback function that is called for each array item.\n */\nfunction directionForEach(instance: object, items: Array<any>, isRTL: boolean, callback: DirectionForEachCallback) {\n    if (isRTL) {\n        const length = items.length;\n        for (let i = 0; i < length; i++) {\n            callback.call(instance, items[i], i, items);\n        }\n    } else {\n        const maxIndex = items.length - 1;\n        for (let i = maxIndex; i >= 0; i--) {\n            callback.call(instance, items[i], maxIndex - i, items);\n        }\n    }\n}\n\n/**\n * Convert polar to cartesian point.\n * \n * @param centerX - Center x.\n * @param centerY - Center y.\n * @param radius - Radius of arc.\n * @param angleInDegrees - Angle in degrees.\n * @returns ChartPoint.\n */\nfunction polarToCartesian(centerX: number, centerY: number, radius: number, angleInDegrees: number): ChartPoint {\n    var angleInRadians = (angleInDegrees - 90) * Math.PI / 180;\n    return {\n        x: centerX + (radius * Math.cos(angleInRadians)),\n        y: centerY + (radius * Math.sin(angleInRadians))\n    };\n}\n\n// Note works only for objects, if we have arrays, we need to add.\nfunction deepClone(src: object, target: any) {\n    Object.keys(src).forEach(function(key) {\n        if (typeof src[key] === 'object') {\n            target[key] = deepClone(src[key], target);\n        } else {\n            target[key] = src[key];\n        }\n    });\n    return target;\n}\n\nexport { el, parent, prefixed, directionForEach, polarToCartesian, DirectionForEachCallback, deepClone };", "/**\n * Some color palettes.\n */\nexport const colors = {\n    dutchFieldColorPalette: [\"#e60049\", \"#0bb4ff\", \"#50e991\", \"#e6d800\", \"#9b19f5\", \"#ffa300\", \"#dc0ab4\", \"#b3d4ff\", \"#00bfa0\"],\n    retroMetroColorPalette: [\"#ea5545\", \"#f46a9b\", \"#ef9b20\", \"#edbf33\", \"#ede15b\", \"#bdcf32\", \"#87bc45\", \"#27aeef\", \"#b33dc6\"],\n    riverNightsColorPalette: [\"#b30000\", \"#7c1158\", \"#4421af\", \"#1a53ff\", \"#0d88e6\", \"#00b7c7\", \"#5ad45a\", \"#8be04e\", \"#ebdc78\"],\n    springPastelsColorPalette: [\"#fd7f6f\", \"#7eb0d5\", \"#b2e061\", \"#bd7ebe\", \"#ffb55a\", \"#ffee65\", \"#beb9db\", \"#fdcce5\", \"#8bd3c7\"]\n};", "import { SvgChartConfig } from \"../config\";\nimport { ChartConfigSerie } from \"../types\";\nimport { SvgChart } from \"../svg\";\nimport { el, prefixed } from \"../utils\";\n\n/**\n * Abstract Controller class. Reponsible for drawing charts for specific chart types.\n */\nclass Controller {\n\n    svgChart: SvgChart;\n    config: SvgChartConfig;\n\n    static requiredConfigWithValue = {};\n\n    /**\n     * Create new Controller class.\n     * \n     * @param svgChart - SvgChart instance.\n     */\n    constructor(svgChart: SvgChart) {\n        if (new.target === Controller) {\n            throw new Error('Controller class cannot be directly instanstiated.');\n        }\n        this.svgChart = svgChart;\n        this.config = this.svgChart.config;\n    }\n\n    // onFocusedValueDisplay(configSerie: ChartConfigSerie, dataSerie: any) {\n    //         this.svgChart.data.series\n\n    // }\n\n    /**\n     * Draws chart.\n     * \n     * Calls:\n     * - {@link onDrawStart} - Called once at the beginning of the drawing.\n     * - {@link onDrawSerie} - Called for each serie.\n     * - {@link onDrawEnd} - Called once at the end of the drawing.\n     * \n     * @param currentSerieGroupElement - Group element where the chart can be appended to.\n     */\n    onDraw(currentSerieGroupElement: SVGElement) {\n        this.onDrawStart(currentSerieGroupElement);\n        this.config.series.forEach((serie, serieIndex) => {\n            const serieGroup = el('g', {\n                dataSerie: serie.id,\n                className: this.svgChart.unselectedSeries[serie.id] ? prefixed('unselected') : ''\n            });\n            this.onDrawSerie(serie, serieIndex, serieGroup);\n            currentSerieGroupElement.appendChild(serieGroup);\n        });\n        this.onDrawEnd(currentSerieGroupElement);\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * \n     * @param currentSerieGroupElement - DOM group element.\n     */\n    onDrawStart(currentSerieGroupElement: SVGElement) {\n\n    }\n\n    /**\n     * Do things at the end of the draw for this chart.\n     * \n     * @param currentSerieGroupElement - DOM group element.\n     */\n    onDrawEnd(currentSerieGroupElement: SVGElement) {\n\n    }\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup.\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @param serieGroup - DOM group element for this serie.\n     */\n    onDrawSerie(serie: ChartConfigSerie, serieIndex: number, serieGroup: SVGElement) { }\n\n    /**\n     * Execute config things before global config things are done.\n     */\n    onConfigBefore() { }\n\n    /**\n     * Execute config things after global config things are done.\n     */\n    onConfigAfter() { }\n\n    /**\n     * Execute serie config things before global config serie things are done.\n     * \n     * @param serie - Serie object\n     */\n    onConfigSerieBefore(serie: ChartConfigSerie) { }\n\n    /**\n     * Execute config things after global config things are done.\n     * \n     * @param serie - Serie object\n     */\n    onConfigSerieAfter(serie: ChartConfigSerie) { }\n\n}\n\nexport { Controller };", "import { SvgChartConfig } from \"./config\";\nimport { SvgChart } from \"./svg\";\nimport { ScopedEventCallback } from \"./types\";\nimport { el, prefixed, directionForEach } from \"./utils\";\n\nexport class XYHorVertAxisController {\n\n    #onXAxisLabelGroupClickScoped: ScopedEventCallback;\n    #onXAxisLabelGroupKeypressScoped: ScopedEventCallback;\n\n    #xAxisGroupElement: SVGElement;\n    #xAxisLabelsGroupElement: SVGElement;\n\n    svgChart: SvgChart;\n    config: SvgChartConfig;\n\n    valueHeight: number;\n    columnWidth: number;\n    selectedColumnIndex: number;\n\n    #xAxisGridColumnsSelectableGroupElement: SVGElement;\n\n    set xAxisLabelsGroupElement(value: SVGElement) {\n        this.#xAxisLabelsGroupElement = value;\n    }\n\n    get xAxisLabelsGroupElement() {\n        return this.#xAxisLabelsGroupElement;\n    }\n\n    set xAxisGroupElement(value: SVGElement) {\n        this.#xAxisGroupElement = value;\n    }\n\n    get xAxisGroupElement() {\n        return this.#xAxisGroupElement;\n    }\n\n    /**\n     * @param svgChart SvgChart instance.\n     */\n    constructor(svgChart: SvgChart) {\n        this.svgChart = svgChart;\n        this.config = svgChart.config;\n        // We cannot call getController here, because the this constructor is called inside the\n        // constructor of the Controller...\n    }\n\n    onDrawStart() {\n\n        if (this.xAxisGroupElement.firstChild) {\n            this.xAxisGroupElement.removeChild(this.xAxisGroupElement.firstChild);\n        }\n\n        if (this.xAxisLabelsGroupElement.firstChild) {\n            this.xAxisLabelsGroupElement.removeChild(this.xAxisLabelsGroupElement.firstChild);\n        }\n\n        // Note that for bar charts to display correctly, this.config.xAxisGridColumns MUST be true!\n        const columnWidth = this.config.xAxisGridColumns\n            ? (this.svgChart.chartWidth / (this.svgChart.data.xAxis.columns.length))\n            : (this.svgChart.chartWidth / (this.svgChart.data.xAxis.columns.length - 1));\n\n        this.columnWidth = columnWidth;\n\n        this.addXAxisGridAndLabels(columnWidth);\n    }\n\n    onConfigBefore() {\n        this.selectedColumnIndex = null;\n        this.valueHeight = this.svgChart.chartHeight / (Math.abs(this.config.minValue) + this.config.maxValue);\n\n        if (this.config.yAxisGrid) {\n            this.addYAxisGridAndLabels();\n        }\n\n        if (this.config.xAxisTitle) {\n            this.addXAxisTitle();\n        }\n\n        if (this.config.yAxisTitle) {\n            this.addYAxisTitle();\n        }\n\n        if (this.config.xAxisLabels) {\n            this.addXAxisLabelsGroup();\n        }\n\n        this.xAxisGroupElement = this.svgChart.svg.appendChild(el('g', {\n            className: prefixed('x-axis-group')\n        }));\n    }\n\n    /**\n     * Add Y axis grid lines and labels.\n     */\n    addYAxisGridAndLabels() {\n\n        var gYAxis = el('g', {\n            className: prefixed('y-axis-group')\n        });\n        const absMinValue = Math.abs(this.config.minValue);\n        var currentYAxisValue = this.config.minValue;\n        var currentYAxisLabelValue = this.config.minValue;\n        while (currentYAxisValue <= this.config.maxValue || currentYAxisLabelValue <= this.config.maxValue) {\n            if (this.config.yAxisGrid && currentYAxisValue <= this.config.maxValue) {\n                let y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - ((currentYAxisValue + absMinValue) * this.valueHeight);\n                gYAxis.appendChild(el('line', {\n                    x1: this.config.padding.left,\n                    y1: y,\n                    x2: this.config.padding.left + this.svgChart.chartWidth + (this.config.xAxisGridPadding * 2),\n                    y2: y,\n                    className: prefixed('y-axis-grid-line'),\n                    stroke: this.config.yAxisGridLineColor || '',\n                    strokeWidth: this.config.yAxisGridLineWidth || '',\n                    strokeDasharray: this.config.yAxisGridLineDashArray || '',\n                }));\n            }\n            currentYAxisValue += this.config.yAxisStep;\n            if (this.config.yAxisLabels && currentYAxisLabelValue <= this.config.maxValue) {\n                let y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - ((currentYAxisLabelValue + absMinValue) * this.valueHeight);\n                gYAxis.appendChild(el('text', {\n                    direction: SvgChartConfig.getDirection(this.config),\n                    x: this.config.ltr ? (this.config.padding.left - 10) : (this.config.padding.left + this.svgChart.chartWidth + 10),\n                    y: y,\n                    textAnchor: 'end',\n                    dominantBaseline: 'middle',\n                    fontFamily: this.config.fontFamily || '',\n                    fontSize: this.config.axisLabelFontSize || '',\n                    className: prefixed('y-axis-label'),\n                    fill: this.config.yAxisLabelColor || ''\n                }, document.createTextNode(currentYAxisLabelValue.toString())));\n            }\n            currentYAxisLabelValue += this.config.yAxisLabelStep;\n        }\n        this.svgChart.svg.appendChild(gYAxis);\n    }\n\n    /**\n     * Add X axis grid lines and labels.\n     * \n     * @param columnWidth - Width of each column.\n     */\n    addXAxisGridAndLabels(columnWidth: number) {\n\n        if (this.svgChart.config.xAxisGridColumnsSelectable) {\n            if (this.#xAxisGridColumnsSelectableGroupElement.firstChild) {\n                this.#xAxisGridColumnsSelectableGroupElement.firstChild.remove();\n            }\n        }\n\n        // Draw xAxis lines\n        var currentXAxisGroupElement = el('g');\n\n        var currentXAxisLabelsGroupElement = el('g', {\n            className: prefixed('x-axis-label-group-current')\n        });\n\n        var currentXAxisGridColumnsSelectableGroupElement = (this.config.xAxisGridColumnsSelectable) ? el('g') : null;\n        directionForEach(this, this.svgChart.data.xAxis.columns, this.config.ltr, (colValue: number, colIndex: number) => {\n            if (this.config.xAxisGrid) {\n                const x = this.config.padding.left + this.config.xAxisGridPadding + (colIndex * columnWidth);\n                if (colIndex === 0 || ((colIndex + 0) % this.config.xAxisStep === 0)) {\n                    this.#addXAxisLine(currentXAxisGroupElement, x);\n                }\n                if (this.config.xAxisGridColumnsSelectable) {\n                    currentXAxisGridColumnsSelectableGroupElement.appendChild(el('rect', {\n                        x: x,\n                        y: this.config.padding.top + this.config.yAxisGridPadding,\n                        width: columnWidth,\n                        height: this.svgChart.chartHeight,\n                        className: prefixed('x-axis-grid-column-selectable'),\n                        fillOpacity: 0,\n                        fill: this.config.xAxisGridColumnsSelectableColor\n                    }));\n                }\n            }\n            if (this.config.xAxisLabels && ((colIndex + 0) % this.config.xAxisLabelStep === 0)) {\n                var xlg = el('g', {\n                    transform: `translate(${this.config.padding.left + this.config.xAxisGridPadding + (colIndex * columnWidth) + (this.config.xAxisGridColumns ? (columnWidth / 2) : 0)} ${this.svgChart.chartHeight + this.config.padding.top + (this.config.yAxisGridPadding * 2) + this.config.xAxisLabelTop})`\n                });\n                xlg.appendChild(el('text', {\n                    direction: SvgChartConfig.getDirection(this.config),\n                    textAnchor: this.config.textAnchorXAxisLabels || 'middle',\n                    dominantBaseline: 'hanging',\n                    fontFamily: this.config.fontFamily || '',\n                    fontSize: this.config.axisLabelFontSize || '',\n                    fontWeight: 'normal',\n                    fill: this.config.xAxisLabelColor || '',\n                    tabindex: this.config.xAxisGridColumnsSelectable ? 0 : null,\n                    className: prefixed('x-axis-label') + ' ' + (this.config.xAxisGridColumnsSelectable ? prefixed('x-axis-grid-column-selectable-label') : ''),\n                    transform: `rotate(${this.config.xAxisLabelRotation})`\n                }, document.createTextNode(colValue.toString())));\n                currentXAxisLabelsGroupElement.appendChild(xlg);\n            }\n        });\n        if (this.config.xAxisGrid && this.config.xAxisGridColumns) {\n            this.#addXAxisLine(currentXAxisGroupElement, this.config.padding.left + this.config.xAxisGridPadding + (this.svgChart.data.xAxis.columns.length * columnWidth));\n        }\n        this.xAxisGroupElement.appendChild(currentXAxisGroupElement);\n        this.config.xAxisGridColumnsSelectable && this.#xAxisGridColumnsSelectableGroupElement.appendChild(currentXAxisGridColumnsSelectableGroupElement);\n        this.xAxisLabelsGroupElement.appendChild(currentXAxisLabelsGroupElement);\n    }\n\n    /**\n     * Draws an X axis line.\n     * \n     * @param parent - Parent element where to attach the line to.\n     * @param x X position.\n     */\n    #addXAxisLine(parent: SVGElement, x: number) {\n        parent.appendChild(el('line', {\n            x1: x,\n            y1: this.config.padding.top,\n            x2: x,\n            y2: this.svgChart.chartHeight + this.config.padding.top + (this.config.yAxisGridPadding * 2),\n            className: prefixed('x-axis-grid-line'),\n            stroke: this.config.xAxisGridLineColor,\n            strokeWidth: this.config.xAxisGridLineWidth,\n            strokeDasharray: this.config.xAxisGridLineDashArray,\n        }));\n    }\n\n    /**\n     * Draws the X axis title.\n     */\n    addXAxisTitle() {\n        var x = this.config.ltr ? (this.svgChart.width - this.config.padding.right - this.config.xAxisGridPadding) : (this.config.padding.left);\n        this.svgChart.svg.appendChild(el('text', {\n            direction: SvgChartConfig.getDirection(this.config),\n            x: x,\n            y: this.svgChart.height - (this.config.xAxisTitleBottom !== null ? this.config.xAxisTitleBottom : this.config.paddingDefault),\n            textAnchor: 'end',\n            dominantBaseline: 'auto',\n            fontFamily: this.config.fontFamily || '',\n            fontSize: this.config.axisTitleFontSize || '',\n            fill: this.config.xAxisTitleColor || '',\n            className: prefixed('text-x-axis-title')\n        }, document.createTextNode(this.config.xAxisTitle)));\n    }\n\n    /**\n     * Draws the Y axis title.\n     */\n    addYAxisTitle() {\n        var yAxisTitleG = el('g');\n        var x = 0;\n        if (this.config.ltr) {\n            x = this.config.yAxisTitleStart ? this.config.yAxisTitleStart : this.config.paddingDefault;\n        } else {\n            x = this.config.yAxisTitleStart ? (this.svgChart.width - this.config.yAxisTitleStart) : (this.svgChart.width - this.config.paddingDefault);\n        }\n        yAxisTitleG.setAttribute('transform', 'translate(' + x + ', ' + (this.config.padding.top + this.config.yAxisGridPadding) + ')');\n        var yAxisTitleEl = el('text', {\n            direction: SvgChartConfig.getDirection(this.config),\n            textAnchor: 'end',\n            dominantBaseline: 'hanging',\n            fontFamily: this.config.fontFamily || '',\n            fontSize: this.config.axisTitleFontSize || '',\n            fill: this.config.yAxisTitleColor || '',\n            className: prefixed('text-y-axis-title')\n        }, document.createTextNode(this.config.yAxisTitle));\n        yAxisTitleEl.setAttribute('transform', this.config.ltr ? 'rotate(-90)' : 'rotate(90)');\n        yAxisTitleG.appendChild(yAxisTitleEl);\n        this.svgChart.svg.appendChild(yAxisTitleG);\n    }\n\n    /**\n     * Adds group for x axis labels.\n     */\n    addXAxisLabelsGroup() {\n        this.xAxisLabelsGroupElement = el('g', {\n            className: prefixed('x-axis-label-group')\n        });\n        if (this.config.xAxisGridColumnsSelectable) {\n            if (!this.#onXAxisLabelGroupClickScoped) {\n                this.#onXAxisLabelGroupClickScoped = this.#onXAxisLabelGroupClick.bind(this);\n                this.#onXAxisLabelGroupKeypressScoped = this.#onXAxisLabelGroupKeypress.bind(this);\n            }\n            this.svgChart.addEventListener(this.xAxisLabelsGroupElement, 'click', this.#onXAxisLabelGroupClickScoped, false);\n            this.svgChart.addEventListener(this.xAxisLabelsGroupElement, 'keydown', this.#onXAxisLabelGroupKeypressScoped, false);\n            // Group element that wraps the rects that indicates a selected column for line and bar charts.\n            this.#xAxisGridColumnsSelectableGroupElement = this.svgChart.svg.appendChild(el('g', {\n                className: prefixed('x-axis-columns-selectable-group')\n            }));\n        }\n        this.svgChart.svg.appendChild(this.xAxisLabelsGroupElement);\n    }\n\n    /**\n     * When a label on the x axis receives a click when focussed.\n     * \n     * @param e Event object.\n     */\n    #onXAxisLabelGroupClick(e: Event) {\n        this.#onXAxisLabelGroupSelect(e.target as SVGElement);\n    }\n\n    /**\n     * Display the selected column indicator and fires the onXAxisLabelGroupSelect callback (if defined).\n     * \n     * @param label - Node (x axis label) that is selected.\n     */\n    #onXAxisLabelGroupSelect(label: SVGElement) {\n\n        var textNodes = this.xAxisLabelsGroupElement.querySelectorAll('text.' + prefixed('x-axis-grid-column-selectable-label'));\n        var rects = this.#xAxisGridColumnsSelectableGroupElement.querySelectorAll('rect.' + prefixed('x-axis-grid-column-selectable'));\n        for (var i = 0; i < textNodes.length; i++) {\n            if (textNodes[i] === label) {\n                this.selectedColumnIndex = i;\n                textNodes[i].classList.add(prefixed('selected'));\n                rects[i].classList.add(prefixed('selected'));\n                rects[i].setAttribute('fill-opacity', this.config.xAxisGridSelectedColumnOpacity.toString());\n                if (this.config.onXAxisLabelGroupSelect) {\n                    this.config.onXAxisLabelGroupSelect(this.svgChart, this.selectedColumnIndex);\n                }\n            } else {\n                textNodes[i].classList.remove(prefixed('selected'));\n                rects[i].classList.remove(prefixed('selected'));\n                rects[i].setAttribute('fill-opacity', '0');\n            }\n        }\n    }\n\n    /**\n     * When a X axis label receives a ENTER key event.\n     * \n     * @param e Keyboard event.\n     */\n    #onXAxisLabelGroupKeypress(e: KeyboardEvent) {\n        if (e.key === 'Enter') {\n            this.#onXAxisLabelGroupSelect(e.target as SVGElement);\n        }\n    }\n\n}", "import { prefixed, directionForEach, el } from \"../utils\";\nimport { Controller } from \"./controller\";\nimport { SvgChart } from \"../svg\";\nimport { XYHorVertAxisController } from \"../x_y_hor_vert_axis\";\nimport { ChartConfigSerie, ChartPoint } from \"../types\";\n\n/**\n * Controller class for bar and line charts.\n */\nexport class LineController extends Controller {\n\n    axisController: XYHorVertAxisController;\n    \n    /**\n     * @param svgChart - SvgChart instance.\n     */\n    constructor(svgChart: SvgChart, axisController?: XYHorVertAxisController) {\n        super(svgChart);\n        if (axisController) {\n            this.axisController = axisController;\n        } else {\n            this.axisController = new XYHorVertAxisController(svgChart);\n        }\n    }\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup. Overrides base class method.\n     * \n     * @override\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @param serieGroup - DOM group element for this serie.\n     */\n    onDrawSerie(serie: ChartConfigSerie, serieIndex: number, serieGroup: SVGElement) {\n        var nonNullPoints = [[]]; // Array of arrays, each array consists only of NON NULL points, used for smoot lines when not connecting NULL values and for filled lines charts when not connecting null points\n        var flatNonNullPoints = [];\n        const absMinValue = Math.abs(this.config.minValue);\n\n        directionForEach(this, this.svgChart.data.series[serie.id], this.config.ltr, (value: number, valueIndex: number, values: Array<number>) => {\n            var x = this.config.padding.left + this.config.xAxisGridPadding + (valueIndex * this.axisController.columnWidth) + (this.config.xAxisGridColumns ? (this.axisController.columnWidth / 2) : 0);\n            var y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - ((value + absMinValue) * this.axisController.valueHeight);\n\n            if (value === null) {\n                if (nonNullPoints[nonNullPoints.length - 1].length > 0 && valueIndex + 1 < values.length) {\n                    nonNullPoints.push([]);\n                }\n            } else {\n                nonNullPoints[nonNullPoints.length - 1].push({ x: x, y: y, value: value });\n                flatNonNullPoints.push({ x: x, y: y, value: value });\n            }\n        });\n\n        var paths = [];\n\n        if (this.config.connectNullValues) {\n\n            // Loop through flatNonNullPoints\n\n            let path = this.config.lineCurved ? this.#getCurvedPathFromPoints(flatNonNullPoints) : this.#getStraightPathFromPoints(flatNonNullPoints);\n            if (path.length > 0) {\n                paths.push(path);\n            }\n\n        } else {\n\n            // Loop through nonNullPoints\n\n            nonNullPoints.forEach((currentNonNullPoints) => {\n                if (currentNonNullPoints.length > 0) {\n                    let path = this.config.lineCurved ? this.#getCurvedPathFromPoints(currentNonNullPoints) : this.#getStraightPathFromPoints(currentNonNullPoints);\n                    if (path.length > 0) {\n                        paths.push(path);\n                    }\n                }\n            });\n\n        }\n\n        paths.forEach((path) => {\n            serieGroup.appendChild(el('path', {\n                d: path.join(' '),\n                fill: this.config.lineChartFilled ? this.svgChart.getSerieFill(serie, serieIndex) : 'none',\n                fillOpacity: 0.4,\n                stroke: this.svgChart.getSerieStrokeColor(serie, serieIndex),\n                strokeWidth: this.config.lineWidth || '',\n                className: prefixed('line')\n            }));\n        });\n\n        if (this.config.points) {\n            flatNonNullPoints.forEach((point) => {\n                serieGroup.appendChild(el('circle', {\n                    cx: point.x,\n                    cy: point.y,\n                    r: this.config.pointRadius,\n                    zIndex: 1,\n                    fill: this.svgChart.getSeriePointColor(serie, serieIndex),\n                    stroke: this.svgChart.getSeriePointColor(serie, serieIndex),\n                    dataValue: point.value,\n                    className: prefixed('value-point'),\n                    tabindex: this.config.focusedValueShow ? 0 : null\n                }));\n            });\n        }\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * \n     * @override\n     * \n     * @param currentSerieGroupElement - DOM group element.\n     */\n    onDrawStart(currentSerieGroupElement: SVGElement) {\n        this.axisController.onDrawStart();\n    }\n\n    /**\n     * Helper function to get a curved path from an array of points.\n     * \n     * @param points - Array of points.\n     * @returns Array of curved path coordinates.\n     */\n    #getCurvedPathFromPoints(points: Array<ChartPoint>): Array<any> {\n        let path = ['M ' + points[0].x + ' ' + points[0].y];\n        for (var i = 0; i < points.length - 1; i++) {\n            var x_mid = (points[i].x + points[i + 1].x) / 2;\n            var y_mid = (points[i].y + points[i + 1].y) / 2;\n            var cp_x1 = (x_mid + points[i].x) / 2;\n            var cp_x2 = (x_mid + points[i + 1].x) / 2;\n            path.push(`Q ${cp_x1} ${points[i].y}, ${x_mid} ${y_mid}`);\n            path.push(`Q ${cp_x2} ${points[i + 1].y} ${points[i + 1].x} ${points[i + 1].y}`);\n        }\n        this.#closePath(path, points);\n        return path;\n    }\n\n    /**\n     * Closes path for filled line charts.\n     * \n     * @param path - Array of path coordinates\n     * @param points - Array of points\n     */\n    #closePath(path: Array<any>, points: Array<ChartPoint>) {\n        if (this.config.lineChartFilled && points.length > 1) {\n            path.push(`L ${points[points.length - 1].x} ${this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight}`);\n            path.push(`L ${points[0].x} ${this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight}`);\n            path.push(`L ${points[0].x} ${points[0].y}`);\n            path.push('Z');\n        }\n\n\n    }\n\n    /**\n     * Helper function to get a straight path for line charts.\n     * \n     * @param points - Array of points.\n     * @returns Array of path coordinates.\n     */\n    #getStraightPathFromPoints(points: Array<ChartPoint>): Array<any> {\n        let path = [];\n        points.forEach((point, pointIndex) => {\n            if (pointIndex === 0) {\n                path.push(`M ${point.x} ${point.y}`);\n            } else {\n                path.push(`L ${point.x} ${point.y}`);\n            }\n        });\n        this.#closePath(path, points);\n        return path;\n    }\n\n    /**\n     * Execute config things before global config things are done.\n     * \n     * @override\n     */\n    onConfigBefore() {\n        super.onConfigBefore();\n        this.axisController.onConfigBefore();\n    }\n\n}\n", "import { prefixed, directionForEach, el } from \"../utils\";\nimport { Controller } from \"./controller\";\nimport { SvgChart } from \"../svg\";\nimport { XYHorVertAxisController } from \"../x_y_hor_vert_axis\";\nimport { ChartConfigSerie, ChartType } from \"../types\";\n\n/**\n * Controller class for bar and line charts.\n */\nexport class BarController extends Controller {\n\n    svgChart: SvgChart;\n\n    // Shared with line and bar\n    axisController: XYHorVertAxisController;\n\n    #barCountPerColumn: number;\n    currentBarIndex: number;\n    stackedBarValues: object;\n    barWidth: number;\n\n    set barCountPerColumn(value: number) {\n        this.#barCountPerColumn = value;\n    }\n\n    get barCountPerColumn() {\n        return this.#barCountPerColumn;\n    }\n\n    /**\n     * @param svgChart - SvgChart instance.\n     */\n    constructor(svgChart: SvgChart, axisController?: XYHorVertAxisController) {\n        super(svgChart);\n        if (axisController) {\n            this.axisController = axisController;\n        } else {\n            this.axisController = new XYHorVertAxisController(svgChart);\n        }\n    }\n\n    /** @override */\n    static requiredConfigWithValue = {\n        xAxisGridColumns: true\n    };\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup.\n     * \n     * @override\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @param serieGroup - DOM group element for this serie.\n     */\n    onDrawSerie(serie: ChartConfigSerie, serieIndex: number, serieGroup: SVGElement) {\n        directionForEach(this, this.svgChart.data.series[serie.id], this.config.ltr, (value: number, valueIndex: number) => {\n\n            var x = null;\n            var y = null;\n            var height = null;\n            if (this.config.barStacked) {\n                if (!this.stackedBarValues[valueIndex]) {\n                    this.stackedBarValues[valueIndex] = this.config.minValue\n                };\n                x = this.config.padding.left + this.config.xAxisGridPadding + (valueIndex * this.axisController.columnWidth) + this.config.barSpacing;\n                y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (value * this.axisController.valueHeight) - (this.stackedBarValues[valueIndex] * this.axisController.valueHeight);\n                height = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (value * this.axisController.valueHeight);\n                this.stackedBarValues[valueIndex] = this.stackedBarValues[valueIndex] += value;\n            } else {\n                x = this.config.padding.left + this.config.xAxisGridPadding + (valueIndex * this.axisController.columnWidth) + (this.barWidth * this.currentBarIndex) + (this.config.barSpacing * (this.currentBarIndex + 1));\n                if (isNaN(x)) {\n                    console.log(this.currentBarIndex);\n                }\n                height = y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - (value * this.axisController.valueHeight);\n            }\n\n            serieGroup.appendChild(el('rect', {\n                x: x,\n                y: y,\n                width: this.barWidth,\n                height: this.svgChart.chartHeight + this.config.padding.top + this.config.yAxisGridPadding - height,\n                fill: this.svgChart.getSerieFill(serie, serieIndex),\n                className: prefixed('bar'),\n                fillOpacity: this.config.barFillOpacity || '',\n                strokeWidth: this.config.barStrokeWidth || 0,\n                stroke: this.svgChart.getSerieStrokeColor(serie, serieIndex),\n                dataValue: value,\n                tabindex: this.config.focusedValueShow ? 0 : null\n            }));\n\n        });\n\n        this.currentBarIndex += 1;\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * \n     * @override\n     * \n     * @param currentSerieGroupElement - DOM group element.\n     */\n    onDrawStart(currentSerieGroupElement: SVGElement) {\n\n        this.axisController.onDrawStart();\n        \n        const barWidth = (this.axisController.columnWidth - (this.config.barSpacing * (this.barCountPerColumn + 1))) / (this.barCountPerColumn || 1);\n\n        this.barWidth = barWidth;\n\n        this.currentBarIndex = 0;\n        this.stackedBarValues = {}; // value index => current value (steeds optellen)\n    }\n\n    /**\n     * Execute config things before global config things are done.\n     * \n     * @override\n     */\n    onConfigBefore() {\n        super.onConfigBefore();\n        //onConfigBeforeBarAndLine(this.svgChart, this.axisController);\n        this.barCountPerColumn = this.config.barStacked ? 1 : 0;\n        this.axisController.onConfigBefore();\n    }\n\n    /**\n     * Execute serie config things before global config serie things are done.\n     * \n     * @override\n     * \n     * @param serie - Serie object\n     */\n    onConfigSerieBefore(serie: ChartConfigSerie) {\n        super.onConfigSerieBefore(serie);\n        if (!this.config.barStacked && (serie.type === ChartType.Bar || this.config.chartType === ChartType.Bar)) {\n            this.barCountPerColumn += 1;\n        }\n    }\n\n}\n", "import { Controller } from \"./controller\";\nimport { LineController } from \"./line_chart_controller\";\nimport { BarController } from \"./bar_chart_controller\";\nimport { SvgChart } from \"../svg\";\nimport { ChartConfigSerie, ChartType } from \"../types\";\nimport { XYHorVertAxisController } from \"../x_y_hor_vert_axis\";\n\n/**\n * Controller class for bar and line charts.\n */\nclass BarAndLineController extends Controller {\n\n    #lineChartController: LineController;\n    #barChartController: BarController;\n    axisController: XYHorVertAxisController;\n\n    /**\n     * @param svgChart - SvgChart instance.\n     */\n    constructor(svgChart: SvgChart) {\n        super(svgChart);\n        this.axisController = new XYHorVertAxisController(svgChart);\n        this.#barChartController = new BarController(svgChart, this.axisController);\n        this.#lineChartController = new LineController(svgChart, this.axisController);\n    }\n\n    set barCountPerColumn(value: number) {\n        this.#barChartController.barCountPerColumn = value;\n    }\n\n    get barCountPerColumn() {\n        return this.#barChartController.barCountPerColumn;\n    }\n\n    /** @override */\n    static requiredConfigWithValue = {\n        xAxisGridColumns: true\n    };\n\n    /** @override */\n    onDrawSerie(serie: ChartConfigSerie, serieIndex: number, serieGroup: SVGElement) {\n        const serieType = serie.type || (this.config.chartType === ChartType.LineAndBar ? ChartType.Line : this.config.chartType);\n        switch (serieType) {\n            case ChartType.Line:\n                this.#lineChartController.onDrawSerie(serie, serieIndex, serieGroup);\n                break;\n            case ChartType.Bar:\n                this.#barChartController.onDrawSerie(serie, serieIndex, serieGroup);\n                break;\n        }\n    }\n\n    /** @override */\n    onDrawStart(currentSerieGroupElement: SVGElement) {\n        this.#barChartController.onDrawStart(currentSerieGroupElement);\n    }\n\n    /** @override */\n    onConfigBefore() {\n        this.#barChartController.onConfigBefore();\n    }\n\n    /** @override */\n    onConfigSerieBefore(serie) {\n        this.#barChartController.onConfigSerieBefore(serie);\n    }\n\n}\n\nexport { BarAndLineController };\n\n\n\n\n\n\n", "import { el, prefixed } from \"../utils\";\nimport { SvgChart } from \"../svg\";\nimport { DonutController } from \"./donut_chart_controller\";\nimport { PieController } from \"./pie_chart_controller\";\nimport { ChartType } from \"../types\";\n\n/**\n * Function that is called from within the {@link drawPieOrDonut} function.\n */\ntype ArcCallback = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    startAngle: number,\n    endAngle: number\n) => Array<string | number>;\n\n/**\n * Shared functions that draws a pie or donut chart. Called from {@link DonutController} and {@link PieController}.\n * \n * @param svgChart - SvgChart instance.\n * @param currentSerieGroupElement - Group node.\n * @param describeArcCallback - Callback for gettting the path of the pie or donut.\n */\nfunction drawPieOrDonut(svgChart: SvgChart, currentSerieGroupElement: SVGElement, describeArcCallback: ArcCallback) {\n\n    var radius = svgChart.chartHeight / 2;\n    var centerX = svgChart.width / 2;\n    var centerY = svgChart.chartHeight / 2 + svgChart.config.padding.top;\n\n    var total = 0;\n    for (let key in svgChart.data.series) {\n        total += svgChart.data.series[key][0];\n    }\n\n    var totalToDegree = 360 / total;\n    var currentTotal = 0;\n\n    svgChart.config.series.forEach((serie, serieIndex) => {\n        var serieGroup = el('g', {\n            dataSerie: serie.id,\n            className: svgChart.unselectedSeries[serie.id] ? prefixed('unselected') : ''\n        });\n\n        const value = svgChart.data.series[serie.id][0];\n\n        var startAngle = currentTotal * totalToDegree;\n        currentTotal += value;\n        var endAngle = currentTotal * totalToDegree;\n        var path = describeArcCallback(centerX, centerY, radius, startAngle, endAngle);\n        serieGroup.appendChild(el('path', {\n            d: path.join(' '),\n            fill: svgChart.getSerieFill(serie, serieIndex),\n            fillOpacity: svgChart.config.pieFillOpacity || 1,\n            className: prefixed('pie-piece'),\n            tabindex: 0,\n            stroke: svgChart.config[ChartType[svgChart.config.chartType].toLowerCase() + 'Stroke'],\n            strokeWidth: svgChart.config[ChartType[svgChart.config.chartType].toLowerCase() + 'StrokeWidth'],\n            dataValue: value\n        }));\n\n        currentSerieGroupElement.appendChild(serieGroup);\n\n    });\n\n}\n\nexport { drawPieOrDonut, ArcCallback };", "import { polarToCartesian } from \"../utils\";\nimport { Controller } from \"./controller\";\nimport { drawPieOrDonut } from \"./donut_or_pie_utils\";\n\n/**\n * Class for displaying pie and donut charts.\n * @extends Controller\n */\nclass DonutController extends Controller {\n\n    /**\n     * Draw donut chart.\n     * \n     * @override\n     * \n     * @param currentSerieGroupElement - Current serie group element.\n     */\n    onDraw(currentSerieGroupElement: SVGElement) {\n        const donutWidth = this.config.donutWidth || this.svgChart.chartHeight / 4;\n        drawPieOrDonut(this.svgChart, currentSerieGroupElement, (centerX: number, centerY: number, radius: number, startAngle: number, endAngle: number) => {\n            return describeArcDonut(centerX, centerY, radius - donutWidth, donutWidth, startAngle, endAngle);\n        });\n    }\n\n}\n\n/**\n * Get path for donut.\n * \n * @param x - X point.\n * @param y - Y point.\n * @param radius - Radius of arc.\n * @param spread - Spread of the donut.\n * @param startAngle - Start angle.\n * @param endAngle - End angle.\n * @returns Array of path coordinates.\n */\nfunction describeArcDonut(x: number, y: number, radius: number, spread: number, startAngle: number, endAngle: number): Array<string | number> {\n    var innerStart = polarToCartesian(x, y, radius, endAngle);\n    var innerEnd = polarToCartesian(x, y, radius, startAngle);\n    var outerStart = polarToCartesian(x, y, radius + spread, endAngle);\n    var outerEnd = polarToCartesian(x, y, radius + spread, startAngle);\n\n    var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n    var d = [\n        \"M\", outerStart.x, outerStart.y,\n        \"A\", radius + spread, radius + spread, 0, largeArcFlag, 0, outerEnd.x, outerEnd.y,\n        \"L\", innerEnd.x, innerEnd.y,\n        \"A\", radius, radius, 0, largeArcFlag, 1, innerStart.x, innerStart.y,\n        \"L\", outerStart.x, outerStart.y, \"Z\"\n    ];\n\n    return d;\n}\n\nexport { DonutController }; ", "import { polarToCartesian } from \"../utils\";\nimport { Controller } from \"./controller\";\nimport { drawPieOrDonut } from \"./donut_or_pie_utils\";\n\n/**\n * Class for displaying pie and donut charts.\n * @extends Controller\n */\nclass PieController extends Controller {\n\n    /**\n     * Draws pie chart.\n     * \n     * @override\n     * \n     * @param currentSerieGroupElement - Current serie group element.\n     */\n    onDraw(currentSerieGroupElement: SVGElement) {\n        drawPieOrDonut(this.svgChart, currentSerieGroupElement, (centerX: number, centerY: number, radius: number, startAngle: number, endAngle: number) => {\n            return describeArcPie(centerX, centerY, radius, startAngle, endAngle);\n        });\n    }\n\n}\n\n/**\n * Get path for pie.\n * \n * @param x - X point.\n * @param y - Y point.\n * @param radius - Radius of arc.\n * @param startAngle - Start angle.\n * @param endAngle - End angle.\n * @returns Array of path coordinates.\n */\nfunction describeArcPie(x: number, y: number, radius: number, startAngle: number, endAngle: number): Array<string | number> {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n\n    var arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n    var d = [\n        \"M\", start.x, start.y,\n        \"A\", radius, radius, 0, arcSweep, 0, end.x, end.y,\n        \"L\", x, y,\n        \"L\", start.x, start.y\n    ];\n\n    return d;\n}\n\nexport { PieController }; ", "import { SvgChartConfig } from \"../config\";\nimport { ChartConfigSerie } from \"../types\";\nimport { el, polarToCartesian, prefixed } from \"../utils\";\nimport { Controller } from \"./controller\";\n\n/**\n * Class for displaying radar charts.\n */\nclass RadarController extends Controller {\n\n    #radius: number;\n    #centerX: number;\n    #centerY: number;\n    #seriesCount: number;\n    #degreeSteps: number;\n    #radiusByXStep: number;\n    #axisGroupElement: SVGElement;\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup. Overrides base class method.\n     * \n     * @override\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @param serieGroup - DOM group element for this serie.\n     */\n    onDrawSerie(serie: ChartConfigSerie, serieIndex: number, serieGroup: SVGElement) {\n\n        super.onDrawSerie(serie, serieIndex, serieGroup);\n\n        let points = [];\n        this.svgChart.data.series[serie.id].forEach((value, index) => {\n            const curRadius = this.#radiusByXStep * value;\n            const point = polarToCartesian(this.#centerX, this.#centerY, curRadius, this.#degreeSteps * index);\n            points.push(`${point.x}, ${point.y}`);\n            serieGroup.appendChild(el('circle', {\n                cx: point.x,\n                cy: point.y,\n                r: this.config.pointRadius,\n                fill: this.svgChart.getSerieFill(serie, serieIndex),\n                tabindex: this.config.focusedValueShow ? 0 : null,\n                zIndex: 1,\n                dataValue: value,\n                className: prefixed('value-point'),\n                stroke: this.svgChart.getSeriePointColor(serie, serieIndex)\n            }));\n        });\n        serieGroup.appendChild(el('polygon', {\n            points: points.join(' '),\n            stroke: this.svgChart.getSerieStrokeColor(serie, serieIndex),\n            fill: this.svgChart.getSerieFill(serie, serieIndex),\n            fillOpacity: this.config.radarFillOpacity,\n            strokeWidth: this.config.radarStrokeWidth,\n        }));\n    }\n\n    /**\n     * @override\n     */\n    onConfigBefore(): void {\n\n        super.onConfigBefore();\n\n        this.#axisGroupElement = this.svgChart.svg.appendChild(el('g', {\n            className: prefixed('x-axis-group')\n        }));\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * \n     * @override\n     * \n     * @param currentSerieGroupElement - DOM group element.\n     */\n    onDrawStart(currentSerieGroupElement: SVGElement) {\n\n        super.onDrawStart(currentSerieGroupElement);\n\n        this.#drawAxis();\n    }\n\n    #drawAxis() {\n        this.#radius = this.svgChart.chartHeight / 2;\n        this.#centerX = this.svgChart.width / 2;\n        this.#centerY = this.svgChart.chartHeight / 2 + this.svgChart.config.padding.top;\n        var gAxis = el('g', {\n            className: prefixed('axis-group')\n        });\n\n        this.#seriesCount = this.svgChart.data.xAxis.columns.length;\n        this.#degreeSteps = 360 / this.#seriesCount;\n        this.#radiusByXStep = this.#radius / (Math.abs(this.config.minValue) + this.config.maxValue);\n\n        for (let curYStep = this.config.minValue; curYStep <= this.config.maxValue; curYStep += this.config.yAxisStep) {\n\n            const curRadius = this.#radiusByXStep * curYStep;\n\n            let polylinePoints = [];\n            let firstPoint = null;\n\n            this.svgChart.data.xAxis.columns.forEach((column, index) => {\n\n                const angle = this.#degreeSteps * index;\n\n                const point = polarToCartesian(this.#centerX, this.#centerY, curRadius, angle);\n\n                if (index === 0) {\n                    firstPoint = point;\n                }\n\n                polylinePoints.push(`${point.x}, ${point.y}`);\n\n                if (curYStep === this.config.maxValue) {\n\n                    let dominantBaseline: string = null;\n                    if (angle === 0) {\n                        dominantBaseline = 'auto';\n                    } else if (angle <= 90) {\n                        dominantBaseline = 'middle';\n                    } else if (angle < 270) {\n                        dominantBaseline = 'hanging';\n                    } else {\n                        dominantBaseline = 'middle';\n                    }\n\n                    gAxis.appendChild(el('text', {\n                        x: angle === 0 || angle === 180 ? point.x : (angle < 180 ? (point.x + this.config.paddingDefault) : point.x - this.config.paddingDefault),\n                        y: angle === 0 ? point.y - this.config.paddingDefault : (angle === 180 ? (point.y + this.config.paddingDefault) : point.y),\n                        direction: SvgChartConfig.getDirection(this.config),\n                        textAnchor: angle === 0 || angle === 180 ? 'middle' : (angle < 180 ? 'start' : 'end'),\n                        dominantBaseline: dominantBaseline,\n                        fontFamily: this.config.fontFamily || '',\n                        fontSize: this.config.axisLabelFontSize || '',\n                        fontWeight: 'normal',\n                        fill: this.config.xAxisLabelColor || '',\n                    }, document.createTextNode(column)));\n                    gAxis.appendChild(el('line', {\n                        x1: this.#centerX,\n                        y1: this.#centerY,\n                        x2: point.x,\n                        y2: point.y,\n                        className: prefixed('axis-grid-line'),\n                        stroke: this.config.xAxisGridLineColor,\n                        strokeWidth: this.config.xAxisGridLineWidth,\n                        strokeDasharray: this.config.xAxisGridLineDashArray,\n                    }));\n                }\n            });\n\n            gAxis.appendChild(el('polygon', {\n                points: polylinePoints.join(' '),\n                fill: 'transparent',\n                className: prefixed('axis-grid-line'),\n                stroke: this.config.xAxisGridLineColor,\n                strokeWidth: this.config.xAxisGridLineWidth,\n                strokeDasharray: this.config.xAxisGridLineDashArray,\n            }));\n\n            if (curYStep % this.config.yAxisLabelStep === 0) {\n                gAxis.appendChild(el('text', {\n                    x: firstPoint.x,\n                    y: firstPoint.y,\n                    direction: SvgChartConfig.getDirection(this.config),\n                    textAnchor: 'middle',\n                    dominantBaseline: 'middle',\n                    fontFamily: this.config.fontFamily || '',\n                    fontSize: this.config.axisLabelFontSize || '',\n                    fontWeight: 'normal',\n                    fill: this.config.xAxisLabelColor || '',\n                }, document.createTextNode(curYStep.toString())));\n            }\n\n        }\n\n        this.#axisGroupElement.appendChild(gAxis);\n    }\n\n}\n\nexport { RadarController };", "import { XYHorVertAxisController } from \"../x_y_hor_vert_axis\";\nimport { SvgChart } from \"../svg\";\nimport { Controller } from \"./controller\";\nimport { ChartConfigSerie } from \"../types\";\nimport { directionForEach, el, prefixed } from \"../utils\";\n\nexport class BubbleController extends Controller {\n\n    axisController: XYHorVertAxisController;\n\n    #radiusPerZValue: number;\n\n    /**\n     * @param svgChart - SvgChart instance.\n     */\n    constructor(svgChart: SvgChart) {\n        super(svgChart);\n        this.axisController = new XYHorVertAxisController(svgChart);\n    }\n\n    /**\n     * Execute config things before global config things are done.\n     * \n     * @override\n     */\n    onConfigBefore() {\n        super.onConfigBefore();\n        this.axisController.onConfigBefore();\n    }\n\n    /**\n     * Do things at the start of the draw for this chart.\n     * \n     * @override\n     * \n     * @param currentSerieGroupElement - DOM group element.\n     */\n    onDrawStart(currentSerieGroupElement: SVGElement) {\n        super.onDrawStart(currentSerieGroupElement);\n        this.axisController.onDrawStart();\n        const maxRadius = this.config.bubbleMaxRadius || (this.svgChart.chartWidth / this.svgChart.data.xAxis.columns.length / 2);\n        this.#radiusPerZValue = maxRadius / this.config.bubbleMaxZValue;\n    }\n\n    /**\n     * Draws chart element for this serie and attached it to the serieGroup. Overrides base class method.\n     * \n     * @override\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @param serieGroup - DOM group element for this serie.\n     */\n    onDrawSerie(serie: ChartConfigSerie, serieIndex: number, serieGroup: SVGElement) {\n        const absMinValue = Math.abs(this.config.minValue);\n        directionForEach(this, this.svgChart.data.series[serie.id], this.config.ltr, (value: Array<number>, valueIndex: number, values: Array<Array<number>>) => {\n            const x = this.config.padding.left + this.config.xAxisGridPadding + (valueIndex * this.axisController.columnWidth) + (this.config.xAxisGridColumns ? (this.axisController.columnWidth / 2) : 0);\n            const y = this.config.padding.top + this.config.yAxisGridPadding + this.svgChart.chartHeight - ((value[0] + absMinValue) * this.axisController.valueHeight);\n            serieGroup.appendChild(el('circle', {\n                cx: x,\n                cy: y,\n                r: this.#radiusPerZValue * value[1],\n                zIndex: 1,\n\n                fill: this.svgChart.getSerieFill(serie, serieIndex),\n                //className: prefixed('bar'),\n                fillOpacity: this.config.bubbleFillOpacity || '',\n                strokeWidth: this.config.bubbleStrokeWidth || 0,\n                stroke: this.svgChart.getSerieStrokeColor(serie, serieIndex),\n\n                // fill: this.svgChart.getSeriePointColor(serie, serieIndex),\n                // stroke: this.svgChart.getSeriePointColor(serie, serieIndex),\n                //dataValue: this.svgChart.data.xAxis.columns[valueIndex] + \", \" + value[0] + ', ' + value[1],\n                dataIndex: valueIndex,\n                className: prefixed('value-point'),\n                tabindex: this.config.focusedValueShow ? 0 : null\n            }));\n        });\n    }\n\n}\n", "import { el, parent, prefixed } from \"./utils\";\nimport { colors } from \"./colors\";\nimport { LineController } from \"./charts/line_chart_controller\";\nimport { BarController } from \"./charts/bar_chart_controller\";\nimport { BarAndLineController } from \"./charts/bar_and_line_chart_controller\";\nimport { DonutController } from \"./charts/donut_chart_controller\";\nimport { PieController } from \"./charts/pie_chart_controller\";\nimport { SvgChartConfig } from \"./config\";\nimport { Controller } from \"./charts/controller\";\nimport { ChartConfigSerie, ChartData, ChartEventInfo, ChartPosition, ChartType, ScopedEventCallback, StringBooleanHash } from \"./types\";\nimport { RadarController } from \"./charts/radar_chart_controller\";\nimport { BubbleController } from \"./charts/bubble_chart_controller\";\n\n// Radar chart:\n// https://medium.com/@brianfoody/jogging-your-geometry-memory-by-building-an-svg-radar-chart-in-react-native-4aeee555809f\n\n/**\n * SvgChart class.\n * \n * ```ts\n * var chart = new SvgChart();\n * ```\n */\nclass SvgChart {\n\n    /**\n     * Mapper for chart types and chart controllers.\n     */\n    static #chartTypeControllers = { ChartType: Controller };\n\n    static {\n        SvgChart.#chartTypeControllers[ChartType.Line] = LineController;\n        SvgChart.#chartTypeControllers[ChartType.Bar] = BarController;\n        SvgChart.#chartTypeControllers[ChartType.LineAndBar] = BarAndLineController;\n        SvgChart.#chartTypeControllers[ChartType.Pie] = PieController;\n        SvgChart.#chartTypeControllers[ChartType.Donut] = DonutController;\n        SvgChart.#chartTypeControllers[ChartType.Radar] = RadarController;\n        SvgChart.#chartTypeControllers[ChartType.Bubble] = BubbleController;\n    }\n\n    /**\n     * All embedded color palettes. Set another with {@link setActiveColorPalette}.\n     */\n    static colorPalettes = colors;\n\n    /**\n     * Some CSS rules for synamic styles are added to the HEAD of the document.\n     */\n    static #cssAdded = false;\n\n    /**\n     * Current color palette. Set another one with {@link setActiveColorPalette}.\n     */\n    static #activeColorPalette = colors.dutchFieldColorPalette;\n\n    /**\n     * Width of parent element.\n     */\n    width: number;\n\n    /**\n     * Height of parent element.\n     */\n    height: number;\n\n    /**\n     * Width of chart without paddings.\n     */\n    chartWidth: number;\n\n    /**\n     * Height of chart without paddings.s\n     */\n    chartHeight: number;\n\n    /**\n     * The generated root SVG element.\n     */\n    svg: SVGElement;\n\n    /**\n     * Config object that is created in the constrructor or setConfig() methiod.\n     */\n    config: SvgChartConfig;\n\n    /**\n     * Controller that is in charge of drawing the chart.\n     */\n    #controller: Controller;\n\n    /**\n     * Hash where key = serie and value = whether it is selected or nor not.\n     */\n    unselectedSeries: StringBooleanHash;\n\n    /**\n     * Chart data object. Set during the chart() method.\n     */\n    #data: ChartData;\n\n    /**\n     * Element that contains definitions, for example for gradients.\n     */\n    #defsElement: SVGElement;\n\n    /**\n     * Element where the config.drawOnDarta method will paint in. Only created when config.drawOnData is specified.\n     */\n    #drawOnDataGroup: SVGElement;\n\n    /**\n     * Element where series will be attached to.\n     */\n    serieGroupElement: SVGElement;\n\n    /**\n     * SVG group element that wraps the focused value element.\n     */\n    focusedValueForeignObject: SVGElement;\n    focusedValueDiv: HTMLElement;\n\n    /**\n     * Scoped callback to call when a legend item gets clicked.\n     */\n    #onLegendClickScoped: ScopedEventCallback = null;\n\n    /**\n     * Scoped callback to call when a legend items receives a keyboard ENTER press.\n     */\n    #onLegendKeypressScoped: ScopedEventCallback = null;\n    #onSerieGroupTransitionendScoped: ScopedEventCallback = null;\n    #onSerieGroupFocusScoped: ScopedEventCallback = null;\n    #onSerieGroupBlurScoped: ScopedEventCallback = null;\n\n    #listenersToRemoveAfterConfigChange: Array<ChartEventInfo>;\n\n    get controller() {\n        return this.#controller;\n    }\n\n    get data() {\n        return this.#data;\n    }\n\n    /**\n     * Set a color palette for all chart instances.\n     * \n     * @param colors - Array of colors.\n     */\n    static setActiveColorPalette(colors: Array<string>) {\n        SvgChart.#activeColorPalette = colors;\n    }\n\n    /**\n     * Constructor - create a new chart instance.\n     * \n     * Actions during the constructor:\n     * - Adding CSS rules (for dynamic styling)\n     * - Create and add SVG element.\n     * - Call {@link setConfig}.\n     * \n     * @param parent - Parent DOM node the SVG element will be attached to.\n     * @param config - Configuration object.\n     */\n    constructor(parent: HTMLElement, config: SvgChartConfig) {\n\n        if (!SvgChart.#cssAdded) {\n            SvgChart.#cssAdded = true;\n            const cssRules = [\n                '.' + prefixed('value-point') + ', g.' + prefixed('legend-group') + ' g, .' + prefixed('x-axis-grid-column-selectable-label') + ' { cursor: pointer; }',\n                '.' + prefixed('value-point') + ':hover, circle.' + prefixed('value-point') + ':focus { stroke-width: 6; outline: none; }',\n                '#' + prefixed('serie-group') + ' g { transition: opacity 0.6s; }',\n                '#' + prefixed('serie-group') + ' g.' + prefixed('unselected') + ' { opacity: 0; }',\n                '#' + prefixed('serie-group-current') + ' { transition: opacity 1s; opacity: 1; }',\n                '#' + prefixed('serie-group-current') + '.' + prefixed('unattached') + ' { opacity: 0; }',\n                'g.' + prefixed('legend-group') + ' g.' + prefixed('unselected') + ' { opacity: 0.4; }',\n                'text.' + prefixed('x-axis-label') + '.' + prefixed('x-axis-grid-column-selectable-label') + '.' + prefixed('selected') + ' { font-weight: bold; }',\n                'rect.' + prefixed('bar') + ':hover, path.' + prefixed('pie-piece') + ':hover { fill-opacity: 0.7; }',\n                'path.' + prefixed('pie-piece') + ':focus, rect.' + prefixed('bar') + ':focus { outline: none; fill-opacity:1; }'\n            ];\n            parent.ownerDocument.head.appendChild(document.createElement(\"style\")).innerHTML = cssRules.join(\"\\n\");\n        }\n\n        const parentRect = parent.getBoundingClientRect();\n\n        this.width = parentRect.width;\n        this.height = parentRect.height;\n\n        this.svg = el('svg', {\n            width: this.width,\n            height: this.height\n        });\n        parent.appendChild(this.svg);\n\n        this.setConfig(config);\n    }\n\n    /**\n     * Set the configuration for this chart instance. The idea is that this method does things that need to be done\n     * only once for a chart and that {@link chart} does things for drawing the charts and can happen multiple times,\n     * for example if you need to display a new set of data.\n     * \n     * Actions during this method:\n     * - Merge config from parameter with default config.\n     * - Create chart controller for this charttype.\n     * - Remove all child element and event listeners for this chart (only does something when this method is called multiple times).\n     * - Adding elements like title, legend, etc.\n     * - Add the {@link serieGroupElement}.\n     * \n     * @param config - Configuration object.\n     */\n    setConfig(config: SvgChartConfig) {\n\n        // const newConfig = new SvgChartConfig();\n\n        // this.config = Object.assign({}, newConfig, config);\n        // this.config.padding = Object.assign({}, newConfig.padding, this.config.padding);\n\n        this.config = config;\n        Object.keys(SvgChart.#chartTypeControllers[this.config.chartType].requiredConfigWithValue).forEach((key) => {\n            this.config[key] = SvgChart.#chartTypeControllers[this.config.chartType].requiredConfigWithValue[key];\n        });\n        //this.config = Object.assign(this.config, SvgChart.#chartTypeControllers[this.config.chartType].requiredConfigWithValue);\n\n        if (this.config.ltr) {\n            this.config.padding.left = this.config.padding.start;\n            this.config.padding.right = this.config.padding.end;\n        } else {\n            this.config.padding.left = this.config.padding.end;\n            this.config.padding.right = this.config.padding.start;\n        }\n\n        this.#controller = new SvgChart.#chartTypeControllers[config.chartType](this);\n\n        this.svg.setAttribute('direction', SvgChartConfig.getDirection(this.config));\n\n        // First remove event listener from a previous config if they exist.\n        if (this.#listenersToRemoveAfterConfigChange && this.#listenersToRemoveAfterConfigChange.length) {\n            this.#listenersToRemoveAfterConfigChange.forEach((item) => {\n                item.node.removeEventListener(item.eventName, item.callback, item.capture);\n            });\n        }\n        this.#listenersToRemoveAfterConfigChange = [];\n\n        // And then remove child nodes from a previous config if they exist.\n        while (this.svg.childNodes.length) {\n            this.svg.firstChild.remove();\n        }\n\n        this.#data = null;\n        this.unselectedSeries = {} as StringBooleanHash;\n\n        this.chartWidth = this.width - this.config.padding.start - this.config.padding.end - (this.config.xAxisGridPadding * 2);\n        this.chartHeight = this.height - this.config.padding.top - this.config.padding.bottom - (this.config.yAxisGridPadding * 2);\n\n        if (this.config.backgroundColor) {\n            this.svg.style.backgroundColor = this.config.backgroundColor;\n        }\n        this.#defsElement = el('defs');\n        this.svg.appendChild(this.#defsElement);\n\n        if (!this.#onSerieGroupTransitionendScoped) {\n            this.#onSerieGroupTransitionendScoped = this.#onSerieGroupTransitionend.bind(this);\n        }\n\n        let drawOnConfigGroup = this.config.drawOnConfig ? this.svg.appendChild(el('g', {\n            className: prefixed('draw-on-config-group')\n        })) : null;\n\n        if (this.config.title) {\n            this.#addTitle();\n        }\n\n        if (this.config.legend) {\n            this.#addLegend();\n        }\n\n        this.controller.onConfigBefore();\n\n        this.config.series.forEach((serie) => {\n\n            this.controller.onConfigSerieBefore(serie);\n\n            if (serie.fillGradient) {\n                var lg = el('linearGradient', {\n                    id: serie.id + '-gradient',\n                    x1: 0,\n                    x2: 0,\n                    y1: 0,\n                    y2: 1\n                });\n                lg.appendChild(el('stop', {\n                    offset: \"0%\",\n                    stopColor: serie.fillGradient[0]\n                }));\n                lg.appendChild(el('stop', {\n                    offset: \"100%\",\n                    stopColor: serie.fillGradient[1]\n                }));\n                this.#defsElement.appendChild(lg);\n            }\n\n            this.controller.onConfigSerieAfter(serie);\n\n        });\n\n        if (this.config.drawOnConfig) {\n            this.config.drawOnConfig(this, drawOnConfigGroup);\n        }\n\n        if (this.config.drawOnData) {\n            this.#drawOnDataGroup = el('g', {\n                className: prefixed('draw-on-data-group')\n            });\n            this.svg.appendChild(this.#drawOnDataGroup);\n        }\n\n        this.#addSerieGroup();\n\n        this.controller.onConfigAfter();\n\n    }\n\n    /**\n     * Writing the chart data.\n     * \n     * @param data - Data object.\n     */\n    chart(data: ChartData = null) {\n\n        if (data !== null) {\n            this.#data = data;\n        }\n\n        if (this.serieGroupElement.firstChild) {\n            this.serieGroupElement.firstChild.remove();\n        }\n        const currentSerieGroupElement = el('g', {\n            id: prefixed('serie-group-current'),\n            className: this.config.transition ? prefixed('unattached') : ''\n        });\n\n        this.controller.onDraw(currentSerieGroupElement);\n\n        this.serieGroupElement.appendChild(currentSerieGroupElement);\n\n        if (this.config.transition) {\n            // getBoundingClientRect causes a reflow, so we don't have to use setTimeout to remove the class.\n            currentSerieGroupElement.getBoundingClientRect();\n            currentSerieGroupElement.classList.remove(prefixed('unattached'));\n        }\n\n        if (this.config.drawOnData) {\n            this.config.drawOnData(this, this.#drawOnDataGroup);\n        }\n\n    }\n\n    // setSelectedIndex(index) {\n    //     var textNodes = this.xAxisLabelsGroupElement.querySelectorAll('text.' + prefixed('x-axis-grid-column-selectable-label'));\n    //     return this.#onXAxisLabelGroupSelect(textNodes.item(index));\n    // }\n\n    /**\n     * Saves chart as PNG file.\n     * \n     * @param filename - Filename.\n     */\n    saveAsPng(filename: string) {\n        var rect = this.svg.getBoundingClientRect();\n        var canvas = document.createElement('canvas');\n        canvas.setAttribute('width', rect.width.toString());\n        canvas.setAttribute('height', rect.height.toString());\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = this.svg.style.backgroundColor;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        var img = new Image();\n        var data = '<svg xmlns=\"http://www.w3.org/2000/svg\">' + this.svg.innerHTML + '</svg>';\n        var parser = new DOMParser();\n        var result = parser.parseFromString(data, 'text/xml');\n        var inlineSVG = result.getElementsByTagName(\"svg\")[0];\n        inlineSVG.setAttribute('width', rect.width.toString());\n        inlineSVG.setAttribute('height', rect.height.toString());\n        var svg64 = btoa(new XMLSerializer().serializeToString(inlineSVG));\n        var image64 = 'data:image/svg+xml;base64,' + svg64;\n        img.onload = function () {\n            ctx.drawImage(img, 0, 0, rect.width, rect.height);\n            window.URL.revokeObjectURL(image64);\n            var png_img = canvas.toDataURL(\"image/png\");\n            const createEl = document.createElement('a');\n            createEl.href = png_img;\n            createEl.download = filename;\n            createEl.click();\n            createEl.remove();\n        }\n        img.src = image64;\n    }\n\n    /**\n     * Add serie group element. This is a SVG group element where the series data will be attached to.\n     */\n    #addSerieGroup() {\n        this.serieGroupElement = el('g', {\n            id: prefixed('serie-group')\n        });\n        this.svg.appendChild(this.serieGroupElement);\n        this.addEventListener(this.serieGroupElement, 'transitionend', this.#onSerieGroupTransitionendScoped, false);\n\n        if (this.config.focusedValueShow) {\n\n            if (!this.#onSerieGroupFocusScoped) {\n                this.#onSerieGroupFocusScoped = this.#onSerieGroupFocus.bind(this);\n                this.#onSerieGroupBlurScoped = this.#onSerieGroupBlur.bind(this);\n            }\n\n            this.addEventListener(this.serieGroupElement, 'focus', this.#onSerieGroupFocusScoped, true);\n            this.addEventListener(this.serieGroupElement, 'blur', this.#onSerieGroupBlurScoped, true);\n\n            this.focusedValueForeignObject = el('foreignObject');\n            this.focusedValueDiv = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n            this.focusedValueDiv.style.position = 'absolute';\n            this.focusedValueDiv.style.backgroundColor = this.config.focusedCSSValueFill;\n            this.focusedValueDiv.style.fontFamily = this.config.fontFamily;\n            this.focusedValueDiv.style.whiteSpace = 'nowrap';\n            this.focusedValueDiv.style.fontSize = 'smaller';\n            this.focusedValueDiv.style.color = this.config.focusedCSSValueColor;\n            this.focusedValueDiv.style.padding = this.config.focusedCSSValuePadding.toString();\n            this.focusedValueForeignObject.style.overflow = 'visible';\n            this.focusedValueForeignObject.appendChild(this.focusedValueDiv);\n\n        }\n    }\n\n    /**\n     * Add legend.\n     */\n    #addLegend() {\n\n        const gLegend = el('g', {\n            className: prefixed('legend-group')\n        });\n\n        if (this.config.legendSelect) {\n            if (!this.#onLegendClickScoped) {\n                this.#onLegendClickScoped = this.#onLegendClick.bind(this);\n                this.#onLegendKeypressScoped = this.#onLegendKeypress.bind(this);\n            }\n            this.addEventListener(gLegend, 'keydown', this.#onLegendKeypressScoped, false);\n            this.addEventListener(gLegend, 'click', this.#onLegendClickScoped, false);\n        }\n\n        this.config.series.forEach((serie, serieIndex) => {\n\n            const gSerie = el('g', {\n                dataSerie: serie.id,\n                tabindex: this.config.legendSelect ? 0 : null\n            });\n\n            let x = 0, y = 0;\n\n            switch (this.config.legendPosition) {\n                case ChartPosition.Top:\n                    y = this.config.legendTop ? this.config.legendTop : (this.config.padding.top / 2);\n                    break;\n                case ChartPosition.Bottom:\n                    y = this.config.legendBottom ? this.config.legendBottom : (this.height - (this.config.padding.bottom / 2));\n                    break;\n                case ChartPosition.End:\n                    if (this.config.ltr) {\n                        x = this.config.padding.start + this.chartWidth + (this.config.xAxisGridPadding * 2) + this.config.paddingDefault;\n                        y = this.config.padding.top + this.config.yAxisGridPadding + (serieIndex * this.config.paddingDefault);\n                    } else {\n                        x = (this.config.xAxisGridPadding * 2) + this.config.padding.end - this.config.paddingDefault - this.config.legendWidth;\n                        y = this.config.padding.top + this.config.yAxisGridPadding + (serieIndex * this.config.paddingDefault);\n                    }\n                    break;\n            }\n\n            const rect = el('rect', {\n                x: x,\n                y: y,\n                rx: this.config.legendCircle ? this.config.legendWidth : 0,\n                ry: this.config.legendCircle ? this.config.legendWidth : 0,\n                width: this.config.legendWidth,\n                height: this.config.legendWidth,\n                fill: this.getSerieFill(serie, serieIndex)\n            });\n\n            const text = el('text', {\n                direction: SvgChartConfig.getDirection(this.config),\n                x: this.config.ltr ? (x + (this.config.legendWidth * 2)) : (x - this.config.legendWidth),\n                y: y + (this.config.legendWidth / 2) + 1, // + 1 don't know why\n                textAnchor: 'start',\n                dominantBaseline: 'middle',\n                fontFamily: this.config.fontFamily,\n                fill: this.config.legendColor,\n                fontSize: this.config.legendFontSize,\n            }, document.createTextNode(serie.title));\n\n\n            if (this.config.ltr) {\n                gSerie.appendChild(rect);\n                gSerie.appendChild(text);\n            } else {\n                gSerie.appendChild(text);\n                gSerie.appendChild(rect);\n            }\n            gLegend.appendChild(gSerie);\n        });\n\n        this.svg.appendChild(gLegend);\n\n        if ([ChartPosition.Top, ChartPosition.Bottom].indexOf(this.config.legendPosition) > -1) {\n\n            // Measure the text so we can place the rects and texts next to each other\n            // and center the complete legend row.\n\n            let totalLegendWidth = 0;\n            let curX = this.config.ltr ? 0 : (this.width - this.config.legendWidth);\n            gLegend.querySelectorAll('g').forEach((g) => {\n                const box = g.getBBox();\n                g.querySelector('rect').setAttribute('x', curX.toString());\n                g.querySelector('text').setAttribute('x', (this.config.ltr ? (curX + (this.config.legendWidth * 2)) : (curX - 10)).toString());\n                if (this.config.ltr) {\n                    curX += (box.width + this.config.paddingDefault);\n                } else {\n                    curX -= (box.width + this.config.paddingDefault);\n                }\n                totalLegendWidth += (box.width + this.config.paddingDefault);\n            });\n            if (this.config.ltr) {\n                curX -= this.config.paddingDefault;\n                gLegend.setAttribute('transform', 'translate(' + ((this.width / 2) - (curX / 2)) + ', 0)');\n            } else {\n                totalLegendWidth -= this.config.paddingDefault;\n                gLegend.setAttribute('transform', 'translate(-' + ((this.width / 2) - (totalLegendWidth / 2)) + ', 0)');\n            }\n\n        }\n\n    }\n\n    /**\n     * Add chart title.\n     */\n    #addTitle() {\n        var x: number, y: number, dominantBaseline: string, textAnchor: string = null;\n        switch (this.config.titleHorizontalPosition) {\n            case ChartPosition.End:\n                x = this.width - this.config.paddingDefault;\n                textAnchor = this.config.ltr ? 'end' : 'start';\n                break;\n            case ChartPosition.Start:\n                x = this.config.paddingDefault;\n                textAnchor = this.config.ltr ? 'start' : 'end';\n                break;\n            default:\n                x = this.width / 2;\n                textAnchor = 'middle';\n                break;\n        }\n        switch (this.config.titleVerticalPosition) {\n            case ChartPosition.Center:\n                y = this.height / 2;\n                dominantBaseline = 'middle';\n                break;\n            case ChartPosition.Bottom:\n                y = this.height - this.config.paddingDefault;\n                dominantBaseline = 'auto';\n                break;\n            default:\n                y = this.config.paddingDefault;\n                dominantBaseline = 'hanging';\n                break;\n        }\n        this.svg.appendChild(el('text', {\n            direction: SvgChartConfig.getDirection(this.config),\n            x: x,\n            y: this.config.paddingDefault,\n            textAnchor: textAnchor,\n            dominantBaseline: dominantBaseline,\n            fontFamily: this.config.fontFamily,\n            fontSize: this.config.titleFontSize,\n            fill: this.config.titleColor,\n            className: prefixed('text-title'),\n        }, document.createTextNode(this.config.title)));\n    }\n\n    /**\n     * Get the color or gradient for this serie for a specific property.\n     * \n     * @param props - \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @returns Color or gradient.\n     */\n    getSeriePropertyColor(props: Array<any>, serie: ChartConfigSerie, serieIndex: number): string {\n        for (var i = 0; i < props.length; i++) {\n            var key = props[i];\n            if (serie[key]) {\n                return key === 'fillGradient' ? `url(#${serie.id}-gradient)` : serie[key];\n            }\n        }\n        if (serie.color) {\n            return serie.color;\n        }\n        return SvgChart.#activeColorPalette[serieIndex];\n    }\n\n    /**\n     * Get the point color or gradient for this serie.\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @returns Color or gradient.\n     */\n    getSeriePointColor(serie: ChartConfigSerie, serieIndex: number): string {\n        return this.getSeriePropertyColor(['pointColor', 'strokeColor'], serie, serieIndex);\n    }\n\n    /**\n     * Get the stroke color or gradient for this serie.\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @returns Color or gradient.\n     */\n    getSerieStrokeColor(serie: ChartConfigSerie, serieIndex: number): string {\n        return this.getSeriePropertyColor(['strokeColor'], serie, serieIndex);\n    }\n\n    /**\n     * Get the fill color or gradient for this serie.\n     * \n     * @param serie - Serie object.\n     * @param serieIndex - Serie index.\n     * @returns Color or gradient.\n     */\n    getSerieFill(serie: ChartConfigSerie, serieIndex: number): string {\n        return this.getSeriePropertyColor(['fillGradient'], serie, serieIndex);\n    }\n\n    /**\n     * Adds an event listener to a node and adds it to the #listenersToRemoveAfterConfigChange array as well, so we can remove them in one place.\n     * \n     * @param node - Node to add the listener to.\n     * @param eventName - Name of event.\n     * @param callback - Function that needs to be executed.\n     * @param capture - Capture or not.\n     */\n    addEventListener(node: Node, eventName: string, callback: EventListenerOrEventListenerObject, capture: boolean) {\n        node.addEventListener(eventName, callback, capture);\n        this.#listenersToRemoveAfterConfigChange.push({\n            node: node,\n            eventName: eventName,\n            callback: callback,\n            capture: capture\n        });\n    }\n\n\n    /**\n     * When legend gets toggled (selected / deselected).\n     * @param {SVGElement} target Legend node that gets toggled.\n     */\n    #onLegendToggle(target: SVGElement) {\n        var g = parent(target, 'g');\n        if (g && g.dataset.serie) {\n            var sg = this.serieGroupElement.querySelector('g[data-serie=\"' + g.dataset.serie + '\"]');\n            if (this.unselectedSeries[g.dataset.serie]) {\n                if (sg) {\n                    sg.setAttribute('display', 'inline'); // This is the default apparently and MUST be set before we change the unselected class, otherwise the transition won't be started\n                    sg.classList.remove(prefixed('unselected'));\n                }\n                g.classList.remove(prefixed('unselected'));\n                delete this.unselectedSeries[g.dataset.serie];\n            } else {\n                g.classList.add(prefixed('unselected'));\n                if (sg) {\n                    sg.classList.add(prefixed('unselected'));\n                }\n                this.unselectedSeries[g.dataset.serie] = true;\n            }\n        }\n    }\n\n    /**\n     * When a key is pressed on a focussed legend node.\n     * @param {Event} e Event object.\n     */\n    #onLegendKeypress(e: KeyboardEvent) {\n        if (e.key === 'Enter') {\n            this.#onLegendToggle(e.target as SVGElement);\n        }\n    }\n\n    /**\n     * When a focussed legend node is clicked.\n     * @param {Event} e Event object.\n     */\n    #onLegendClick(e: Event) {\n        this.#onLegendToggle(e.target as SVGElement);\n    }\n\n    /**\n     * When the tranisiton of a serie group has ended.\n     * \n     * @param e - Event object.\n     */\n    #onSerieGroupTransitionend(e: Event) {\n        const target = e.target as SVGElement;\n        // Currently only used to add display none to it when this serie group is unselected.\n        // We have to add display none, so this node doesn't make part of the UI anymore and cannot hide other nodes.\n        if (target.classList.contains(prefixed('unselected'))) {\n            target.setAttribute('display', 'none');\n        }\n    }\n\n    /**\n     * When a serie group node is blurred (this means loses focus).\n     * \n     * @param e - Event object.\n     */\n    #onSerieGroupBlur(e: Event) {\n        var circle = e.target as SVGElement;\n        var g = parent(circle, 'g');\n        var serie = g.dataset.serie;\n        if (serie) {\n            // Remove the current value element.\n            //this.serieGroupElement.removeChild(this.focusedValueEl);\n        }\n    }\n\n    /**\n     * When a serie group node gets focussed.\n     * \n     * @param e - Event object.\n     */\n    #onSerieGroupFocus(e: Event) {\n        var circle = e.target as SVGElement;\n        var g = parent(circle, 'g');\n        var serie = g.dataset.serie;\n        if (serie) {\n            var serieItemIndex = this.config.series.findIndex((item) => item.id === serie);\n            var serieItem = this.config.series[serieItemIndex];\n\n            \n            var data = this.data.series[circle.dataset.index];\n            console.log(this.data.series[serie][circle.dataset.index]);\n\n            this.focusedValueDiv.innerHTML = this.config.focusedValueCallback\n                ? this.config.focusedValueCallback(serieItem, circle.dataset.value)\n                : serieItem.title + '<hr style=\"border-color:' + this.getSerieFill(serieItem, serieItemIndex) + '\">' + circle.dataset.value;\n\n            this.serieGroupElement.appendChild(this.focusedValueForeignObject);\n            const width = this.focusedValueDiv.clientWidth;\n            const height = this.focusedValueDiv.clientHeight;\n            this.focusedValueForeignObject.setAttribute('width', width.toString());\n            this.focusedValueForeignObject.setAttribute('height', height.toString());\n\n            const type = serieItem.type || this.config.chartType;\n            let x: number, y: number = null;\n            switch (type) {\n                case ChartType.Line:\n                case ChartType.Bar:\n                case ChartType.LineAndBar:\n                case ChartType.Radar:\n                case ChartType.Bubble:\n                    x = (parseFloat(circle.getAttribute('cx')) || (parseFloat(circle.getAttribute('x')) + (parseFloat(circle.getAttribute('width')) / 2))) - (width / 2);\n                    y = (parseFloat(circle.getAttribute('cy')) || parseFloat(circle.getAttribute('y'))) - 10 - height;\n                    break;\n                case ChartType.Pie:\n                case ChartType.Donut:\n                    var d = circle.getAttribute('d').split(' ');\n                    x = parseFloat(d[1].trim());\n                    y = parseFloat(d[2].trim());\n                    break;\n            }\n            this.focusedValueForeignObject.setAttribute('transform', 'translate(' + x + ', ' + y + ')');\n        }\n    }\n\n}\n\nexport { SvgChart };\n", "import { SvgChartConfig } from \"../src/config\";\nimport { SvgChart } from \"../src/svg\";\nimport { ChartType } from \"../src/types\";\n\nconst config = new SvgChartConfig();\nconfig.title = 'Bubble';\nconfig.minValue = 0;\nconfig.maxValue = 100;\n//config.bubbleStrokeWidth = 2;\n//config.bubbleFillOpacity = .2\nconfig.chartType = ChartType.Bubble;\nconfig.xAxisGridPadding = 20;\nconfig.yAxisGridPadding = 20;\n//config.focusedValueCallback = (serie, value) => '<strong>Serie</strong>: ' + serie.title + '<br> en value ' + value;\n\n//config.backgroundColor = '#FCFCFC';\nconfig.series = [\n    {\n        id: 'humans',\n        title: 'Humans'\n    },\n    {\n        id: 'animals',\n        title: 'Animals'\n    },\n    {\n        id: 'flowers',\n        title: 'Flowers'\n    },\n];\n\nconst chart = new SvgChart(document.getElementById('chart'), config);\n\nconst chartSeries = {\n    // Each point: [y, radius]\n    series: {\n        humans: [\n            [12, 34],\n            [23, 40],\n            [45, 100,],\n            [45, 56],\n            [45, 56],\n            [45, 56],\n            [10, 34]\n        ],\n        animals: [\n            [15, 4],\n            [3, 40],\n            [65, 100,],\n            [34, 16],\n            [18, 89],\n            [5, 6],\n            [12, 4]\n        ],\n        flowers: [\n            [2, 3],\n            [3, 4],\n            [5, 10,],\n            [5, 6],\n            [5, 6],\n            [5, 6],\n            [1, 4]\n        ],\n    },\n    xAxis: {\n        columns: [\n            'mon',\n            'tue',\n            'wed',\n            'thu',\n            'fri',\n            'sat',\n            'sun'\n        ]\n    }\n};\n\nchart.chart(chartSeries);"],
  "mappings": "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",
  "names": ["ChartType", "config", "el", "parent", "parent", "config", "colors"]
}
